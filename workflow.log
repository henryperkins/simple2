2024-11-14 21:33:02,650 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:02,650 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:02,650 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:02,650 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:02,651 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:02,651 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:02,651 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:02,651 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_directory
        Parameters: cls: Any, v: Any
        Returns: Any
        Decorators: validator('directory')
        Exceptions: ValueError
        Existing docstring: Validate cache directory path.
2024-11-14 21:33:02,651 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:03,841 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_directory: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:03,841 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f922ef9ffffa8e6821d26a4ccb433b48
2024-11-14 21:33:03,841 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f922ef9ffffa8e6821d26a4ccb433b48 with key: docstring:v1:f922ef9ffffa8e6821d26a4ccb433b48
2024-11-14 21:33:03,841 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f922ef9ffffa8e6821d26a4ccb433b48
2024-11-14 21:33:03,842 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:03,842 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:03,842 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:03,842 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:03,842 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:03,842 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:03,842 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:03,843 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_level
        Parameters: cls: Any, v: Any
        Returns: Any
        Decorators: validator('level')
        Exceptions: ValueError
        Existing docstring: Validate logging level.
2024-11-14 21:33:03,843 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:05,150 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_level: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:05,150 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: a8aec98ede34268900dcaff28d74e9e0
2024-11-14 21:33:05,150 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: a8aec98ede34268900dcaff28d74e9e0 with key: docstring:v1:a8aec98ede34268900dcaff28d74e9e0
2024-11-14 21:33:05,150 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: a8aec98ede34268900dcaff28d74e9e0
2024-11-14 21:33:05,153 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:05,153 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:05,154 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:05,154 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:05,154 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:05,154 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:05,154 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:05,154 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_max_workers
        Parameters: cls: Any, v: Any, values: Any
        Returns: Any
        Decorators: validator('max_workers')
        Exceptions: ValueError
        Existing docstring: Validate max_workers does not exceed concurrency limit.
2024-11-14 21:33:05,154 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:06,508 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_max_workers: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:06,508 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: aa6d8b53f68a2b4bb602410b118475a5
2024-11-14 21:33:06,508 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: aa6d8b53f68a2b4bb602410b118475a5 with key: docstring:v1:aa6d8b53f68a2b4bb602410b118475a5
2024-11-14 21:33:06,508 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: aa6d8b53f68a2b4bb602410b118475a5
2024-11-14 21:33:06,509 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:06,509 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:06,509 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:06,509 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:06,509 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:06,509 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:06,509 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:06,510 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: load
        Parameters: cls: Any, config_path: Optional[str]
        Returns: Optional['Config']
        Decorators: classmethod
        Exceptions: None
        Existing docstring: Load configuration from a YAML file and environment variables.
2024-11-14 21:33:06,510 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:07,833 - docstring_workflow - ERROR - logger - log_error - Error processing function load: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:07,834 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['validate_configuration']
2024-11-14 21:33:07,834 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: de5624fa1edc50a1303eb6e7e2543442
2024-11-14 21:33:07,834 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: de5624fa1edc50a1303eb6e7e2543442 with key: docstring:v1:de5624fa1edc50a1303eb6e7e2543442
2024-11-14 21:33:07,834 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: de5624fa1edc50a1303eb6e7e2543442
2024-11-14 21:33:07,835 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:07,835 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:07,835 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:07,835 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:07,835 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:07,835 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:07,835 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:07,836 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_configuration
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: ValueError
        Existing docstring: Perform cross-field validation of the configuration.

Raises:
    ValueError: If validation fails
2024-11-14 21:33:07,836 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:09,230 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_configuration: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:09,235 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:33:09,236 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=11, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:33:09,236 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:33:09,236 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:33:09,236 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:33:09,236 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/config.py
2024-11-14 21:33:09,236 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/config.py'
2024-11-14 21:33:09,236 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpnr_h6iiz/context_manager.py
2024-11-14 21:33:09,236 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpnr_h6iiz/context_manager.py
2024-11-14 21:33:09,236 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpnr_h6iiz/context_manager.py'
2024-11-14 21:33:09,257 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:33:09,257 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:33:09,258 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:33:09,258 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:33:09,258 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:33:09,259 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:33:09,259 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:33:09,261 - docstring_workflow - INFO - logger - log_info - Extracted 3 functions.
2024-11-14 21:33:09,261 - docstring_workflow - INFO - logger - log_info - Extracted 3 functions from source code.
2024-11-14 21:33:09,261 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__init__', '_add_to_language_tracking', '_serialize_segment_id']
2024-11-14 21:33:09,261 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: ef55483cda42eac02a3059deab6cb738
2024-11-14 21:33:09,261 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: ef55483cda42eac02a3059deab6cb738 with key: docstring:v1:ef55483cda42eac02a3059deab6cb738
2024-11-14 21:33:09,261 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: ef55483cda42eac02a3059deab6cb738
2024-11-14 21:33:09,262 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:09,262 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:09,262 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:09,262 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:09,262 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:09,262 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:09,262 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:09,263 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, context_size_limit: int, max_tokens: int, model_name: str, embedding_batch_size: int
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the context manager.

Args:
    context_size_limit: Maximum number of segments in context
    max_tokens: Maximum tokens allowed
    model_name: Model name for tokenization
    embedding_batch_size: Batch size for embedding generation
2024-11-14 21:33:09,263 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:10,769 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:10,769 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f76eeb3cd0cc1d3bb7f4fba77e78e715
2024-11-14 21:33:10,769 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f76eeb3cd0cc1d3bb7f4fba77e78e715 with key: docstring:v1:f76eeb3cd0cc1d3bb7f4fba77e78e715
2024-11-14 21:33:10,769 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f76eeb3cd0cc1d3bb7f4fba77e78e715
2024-11-14 21:33:10,770 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:10,770 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:10,770 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:10,770 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:10,770 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:10,771 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:10,771 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:10,771 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _add_to_language_tracking
        Parameters: self: Any, segment_id: str, language: str
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Add a segment to language-specific tracking.
2024-11-14 21:33:10,771 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:12,042 - docstring_workflow - ERROR - logger - log_error - Error processing function _add_to_language_tracking: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:12,042 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 312cd43c94ba3f32ab31031c4df76d52
2024-11-14 21:33:12,042 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 312cd43c94ba3f32ab31031c4df76d52 with key: docstring:v1:312cd43c94ba3f32ab31031c4df76d52
2024-11-14 21:33:12,043 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 312cd43c94ba3f32ab31031c4df76d52
2024-11-14 21:33:12,043 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:12,043 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:12,044 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:12,044 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:12,044 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:12,044 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:12,044 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:12,044 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _serialize_segment_id
        Parameters: self: Any, segment_id: Any
        Returns: str
        Decorators: None
        Exceptions: None
        Existing docstring: Serialize segment_id to a string.
2024-11-14 21:33:12,044 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:13,255 - docstring_workflow - ERROR - logger - log_error - Error processing function _serialize_segment_id: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:13,259 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:33:13,259 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=3, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:33:13,259 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:33:13,259 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:33:13,259 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:33:13,259 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/context_manager.py
2024-11-14 21:33:13,259 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/context_manager.py'
2024-11-14 21:33:13,259 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpnr_h6iiz/documentation.py
2024-11-14 21:33:13,259 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpnr_h6iiz/documentation.py
2024-11-14 21:33:13,260 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpnr_h6iiz/documentation.py'
2024-11-14 21:33:13,280 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:33:13,281 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:33:13,281 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:33:13,282 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:33:13,282 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:33:13,282 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:33:13,282 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:33:13,286 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions.
2024-11-14 21:33:13,286 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions from source code.
2024-11-14 21:33:13,286 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['parse_response', '__init__', '_get_function_schema', '_create_prompt', '__init__']
2024-11-14 21:33:13,286 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 370223d059a68f8c31f572cb9eed0ba4
2024-11-14 21:33:13,286 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 370223d059a68f8c31f572cb9eed0ba4 with key: docstring:v1:370223d059a68f8c31f572cb9eed0ba4
2024-11-14 21:33:13,286 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 370223d059a68f8c31f572cb9eed0ba4
2024-11-14 21:33:13,288 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:13,289 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:13,289 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:13,289 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:13,289 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:13,289 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:13,289 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:13,289 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: parse_response
        Parameters: response: Dict[str, Any]
        Returns: Dict[str, Any]
        Decorators: staticmethod
        Exceptions: AIServiceResponseError
        Existing docstring: Parse and validate an AI service response.

Args:
    response: Raw response from the AI service

Returns:
    Dictionary containing parsed response data

Raises:
    AIServiceResponseError: If parsing fails
2024-11-14 21:33:13,290 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:14,642 - docstring_workflow - ERROR - logger - log_error - Error processing function parse_response: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:14,642 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: e5ee9b8da56ee9a3763abe6ec535d285
2024-11-14 21:33:14,642 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: e5ee9b8da56ee9a3763abe6ec535d285 with key: docstring:v1:e5ee9b8da56ee9a3763abe6ec535d285
2024-11-14 21:33:14,643 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: e5ee9b8da56ee9a3763abe6ec535d285
2024-11-14 21:33:14,643 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:14,643 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:14,643 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:14,643 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:14,644 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:14,644 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:14,644 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:14,644 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, api_key: str, model: str
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:33:14,644 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:16,051 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:16,051 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: d207a452780e464ccdc06f54097af08b
2024-11-14 21:33:16,052 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: d207a452780e464ccdc06f54097af08b with key: docstring:v1:d207a452780e464ccdc06f54097af08b
2024-11-14 21:33:16,052 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: d207a452780e464ccdc06f54097af08b
2024-11-14 21:33:16,052 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:16,052 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:16,053 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:16,053 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:16,053 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:16,053 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:16,053 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:16,053 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _get_function_schema
        Parameters: self: Any
        Returns: Dict[str, Any]
        Decorators: None
        Exceptions: None
        Existing docstring: Get the function schema for the API.
2024-11-14 21:33:16,054 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:17,400 - docstring_workflow - ERROR - logger - log_error - Error processing function _get_function_schema: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:17,400 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: dc93b864873de376c8078c49fbe88675
2024-11-14 21:33:17,400 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: dc93b864873de376c8078c49fbe88675 with key: docstring:v1:dc93b864873de376c8078c49fbe88675
2024-11-14 21:33:17,401 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: dc93b864873de376c8078c49fbe88675
2024-11-14 21:33:17,401 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:17,401 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:17,401 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:17,402 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:17,402 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:17,402 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:17,402 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:17,402 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _create_prompt
        Parameters: self: Any, function_details: Dict[str, Any], context_segments: Optional[List[str]], metadata: Optional[Dict[str, Any]]
        Returns: str
        Decorators: None
        Exceptions: None
        Existing docstring: Create the prompt for the AI service.
2024-11-14 21:33:17,402 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:18,824 - docstring_workflow - ERROR - logger - log_error - Error processing function _create_prompt: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:18,824 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 232ed7015fb09aa9e7e21804de05ffb3
2024-11-14 21:33:18,824 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 232ed7015fb09aa9e7e21804de05ffb3 with key: docstring:v1:232ed7015fb09aa9e7e21804de05ffb3
2024-11-14 21:33:18,824 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 232ed7015fb09aa9e7e21804de05ffb3
2024-11-14 21:33:18,825 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:18,825 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:18,825 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:18,825 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:18,825 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:18,825 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:18,826 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:18,826 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, api_key: str, endpoint: str, deployment_name: str
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:33:18,826 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:20,265 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:20,266 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__init__']
2024-11-14 21:33:20,266 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 1ea577c4b2a7d5d9c92ff795bca1b568
2024-11-14 21:33:20,266 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 1ea577c4b2a7d5d9c92ff795bca1b568 with key: docstring:v1:1ea577c4b2a7d5d9c92ff795bca1b568
2024-11-14 21:33:20,266 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 1ea577c4b2a7d5d9c92ff795bca1b568
2024-11-14 21:33:20,267 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:20,267 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:20,267 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:20,267 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:20,267 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:20,267 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:20,267 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:20,267 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, service: AIServiceInterface, context_manager: ContextManager, hierarchy_manager: CodeHierarchy, multilang_manager: MultiLanguageManager, metadata_manager: MetadataManager
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the documentation generator.

Args:
    service: AI service interface
    context_manager: Context management instance
    hierarchy_manager: Hierarchy management instance
    multilang_manager: Multi-language support instance
    metadata_manager: Metadata management instance
2024-11-14 21:33:20,268 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:21,691 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:21,697 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:33:21,697 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=6, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:33:21,697 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:33:21,698 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:33:21,698 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:33:21,698 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/documentation.py
2024-11-14 21:33:21,698 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/documentation.py'
2024-11-14 21:33:21,698 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpnr_h6iiz/cache.py
2024-11-14 21:33:21,698 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpnr_h6iiz/cache.py
2024-11-14 21:33:21,698 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpnr_h6iiz/cache.py'
2024-11-14 21:33:21,719 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:33:21,719 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:33:21,719 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:33:21,720 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:33:21,720 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:33:21,720 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:33:21,720 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:33:21,723 - docstring_workflow - INFO - logger - log_info - Extracted 13 functions.
2024-11-14 21:33:21,724 - docstring_workflow - INFO - logger - log_info - Extracted 13 functions from source code.
2024-11-14 21:33:21,724 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__init__', '_init_db', '_cleanup_old_entries', '_cleanup_by_size', 'fetch']
2024-11-14 21:33:21,724 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 2103f4c4562d0cb9c49fbbbe137908f4
2024-11-14 21:33:21,724 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 2103f4c4562d0cb9c49fbbbe137908f4 with key: docstring:v1:2103f4c4562d0cb9c49fbbbe137908f4
2024-11-14 21:33:21,724 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 2103f4c4562d0cb9c49fbbbe137908f4
2024-11-14 21:33:21,726 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:21,726 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:21,726 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:21,727 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:21,727 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:21,727 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:21,727 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:21,727 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, config: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the cache with configuration.
2024-11-14 21:33:21,727 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:23,074 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:23,074 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 0ce7f2a2711e92611e8391b2f99432d4
2024-11-14 21:33:23,074 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 0ce7f2a2711e92611e8391b2f99432d4 with key: docstring:v1:0ce7f2a2711e92611e8391b2f99432d4
2024-11-14 21:33:23,075 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 0ce7f2a2711e92611e8391b2f99432d4
2024-11-14 21:33:23,075 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:23,075 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:23,076 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:23,076 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:23,076 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:23,076 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:23,076 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:23,076 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _init_db
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the SQLite database schema.
2024-11-14 21:33:23,076 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:24,487 - docstring_workflow - ERROR - logger - log_error - Error processing function _init_db: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:24,487 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 7920b0933ebe40a799360073209d1c30
2024-11-14 21:33:24,487 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 7920b0933ebe40a799360073209d1c30 with key: docstring:v1:7920b0933ebe40a799360073209d1c30
2024-11-14 21:33:24,488 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 7920b0933ebe40a799360073209d1c30
2024-11-14 21:33:24,488 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:24,488 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:24,488 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:24,488 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:24,489 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:24,489 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:24,489 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:24,489 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _cleanup_old_entries
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Remove entries older than TTL.
2024-11-14 21:33:24,489 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:25,713 - docstring_workflow - ERROR - logger - log_error - Error processing function _cleanup_old_entries: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:25,713 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 178b48134376f15faa3ace401f49b605
2024-11-14 21:33:25,713 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 178b48134376f15faa3ace401f49b605 with key: docstring:v1:178b48134376f15faa3ace401f49b605
2024-11-14 21:33:25,713 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 178b48134376f15faa3ace401f49b605
2024-11-14 21:33:25,714 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:25,714 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:25,714 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:25,714 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:25,714 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:25,715 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:25,715 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:25,715 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _cleanup_by_size
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Remove oldest entries if cache size exceeds limit.
2024-11-14 21:33:25,715 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:27,087 - docstring_workflow - ERROR - logger - log_error - Error processing function _cleanup_by_size: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:27,088 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f7eea7adbf0588d9eac47420cd63f831
2024-11-14 21:33:27,088 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f7eea7adbf0588d9eac47420cd63f831 with key: docstring:v1:f7eea7adbf0588d9eac47420cd63f831
2024-11-14 21:33:27,088 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f7eea7adbf0588d9eac47420cd63f831
2024-11-14 21:33:27,088 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:27,089 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:27,089 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:27,089 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:27,089 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:27,089 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:27,089 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:27,089 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: fetch
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:33:27,089 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:28,374 - docstring_workflow - ERROR - logger - log_error - Error processing function fetch: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:28,374 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['insert', 'fetch_module', 'insert_module', 'clear_all', 'fetch_stats']
2024-11-14 21:33:28,374 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: ea737e664d79da120ae38e457a5fca68
2024-11-14 21:33:28,374 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: ea737e664d79da120ae38e457a5fca68 with key: docstring:v1:ea737e664d79da120ae38e457a5fca68
2024-11-14 21:33:28,374 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: ea737e664d79da120ae38e457a5fca68
2024-11-14 21:33:28,375 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:28,375 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:28,375 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:28,375 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:28,375 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:28,375 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:28,375 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:28,376 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: insert
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:33:28,376 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:29,808 - docstring_workflow - ERROR - logger - log_error - Error processing function insert: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:29,808 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 387d4de0234fa8fbe0516ca567bf3b53
2024-11-14 21:33:29,808 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 387d4de0234fa8fbe0516ca567bf3b53 with key: docstring:v1:387d4de0234fa8fbe0516ca567bf3b53
2024-11-14 21:33:29,809 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 387d4de0234fa8fbe0516ca567bf3b53
2024-11-14 21:33:29,811 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:29,812 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:29,812 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:29,812 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:29,812 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:29,812 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:29,812 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:29,812 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: fetch_module
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:33:29,812 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:31,008 - docstring_workflow - ERROR - logger - log_error - Error processing function fetch_module: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:31,008 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 3599b934576579fd9b00ada7a7debd5c
2024-11-14 21:33:31,008 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 3599b934576579fd9b00ada7a7debd5c with key: docstring:v1:3599b934576579fd9b00ada7a7debd5c
2024-11-14 21:33:31,009 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 3599b934576579fd9b00ada7a7debd5c
2024-11-14 21:33:31,009 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:31,009 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:31,009 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:31,009 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:31,010 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:31,010 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:31,010 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:31,010 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: insert_module
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:33:31,010 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:32,223 - docstring_workflow - ERROR - logger - log_error - Error processing function insert_module: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:32,223 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 2f342b62230c3936b9ae8ddb92478766
2024-11-14 21:33:32,223 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 2f342b62230c3936b9ae8ddb92478766 with key: docstring:v1:2f342b62230c3936b9ae8ddb92478766
2024-11-14 21:33:32,223 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 2f342b62230c3936b9ae8ddb92478766
2024-11-14 21:33:32,224 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:32,224 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:32,224 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:32,224 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:32,224 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:32,224 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:32,224 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:32,225 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: clear_all
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:33:32,225 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:33,620 - docstring_workflow - ERROR - logger - log_error - Error processing function clear_all: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:33,621 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 3f88260a356b0ffcb70ec627376d1c79
2024-11-14 21:33:33,621 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 3f88260a356b0ffcb70ec627376d1c79 with key: docstring:v1:3f88260a356b0ffcb70ec627376d1c79
2024-11-14 21:33:33,621 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 3f88260a356b0ffcb70ec627376d1c79
2024-11-14 21:33:33,621 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:33,622 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:33,622 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:33,622 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:33,622 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:33,622 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:33,622 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:33,622 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: fetch_stats
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:33:33,622 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:34,874 - docstring_workflow - ERROR - logger - log_error - Error processing function fetch_stats: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:34,874 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['delete_entry', 'delete_module', 'delete_expired_module']
2024-11-14 21:33:34,874 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f92bc01a3543e77b048ddebfb01b4e13
2024-11-14 21:33:34,874 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f92bc01a3543e77b048ddebfb01b4e13 with key: docstring:v1:f92bc01a3543e77b048ddebfb01b4e13
2024-11-14 21:33:34,874 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f92bc01a3543e77b048ddebfb01b4e13
2024-11-14 21:33:34,875 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:34,875 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:34,875 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:34,875 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:34,875 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:34,875 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:34,875 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:34,876 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: delete_entry
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:33:34,876 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:36,165 - docstring_workflow - ERROR - logger - log_error - Error processing function delete_entry: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:36,165 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 4714fc3cbcb760bbbc574bb3cb0e2571
2024-11-14 21:33:36,165 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 4714fc3cbcb760bbbc574bb3cb0e2571 with key: docstring:v1:4714fc3cbcb760bbbc574bb3cb0e2571
2024-11-14 21:33:36,165 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 4714fc3cbcb760bbbc574bb3cb0e2571
2024-11-14 21:33:36,166 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:36,166 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:36,166 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:36,166 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:36,166 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:36,166 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:36,166 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:36,167 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: delete_module
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:33:36,167 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:37,542 - docstring_workflow - ERROR - logger - log_error - Error processing function delete_module: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:37,542 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: a8a632ab10ef264b9aeeec0693a7b893
2024-11-14 21:33:37,542 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: a8a632ab10ef264b9aeeec0693a7b893 with key: docstring:v1:a8a632ab10ef264b9aeeec0693a7b893
2024-11-14 21:33:37,543 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: a8a632ab10ef264b9aeeec0693a7b893
2024-11-14 21:33:37,545 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:37,545 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:37,545 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:37,546 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:37,546 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:37,546 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:37,546 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:37,546 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: delete_expired_module
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:33:37,546 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:38,777 - docstring_workflow - ERROR - logger - log_error - Error processing function delete_expired_module: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:38,783 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:33:38,783 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=13, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:33:38,783 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:33:38,783 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:33:38,783 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:33:38,783 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/cache.py
2024-11-14 21:33:38,783 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/cache.py'
2024-11-14 21:33:38,783 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpnr_h6iiz/hierarchy.py
2024-11-14 21:33:38,783 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpnr_h6iiz/hierarchy.py
2024-11-14 21:33:38,784 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpnr_h6iiz/hierarchy.py'
2024-11-14 21:33:38,804 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:33:38,804 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:33:38,804 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:33:38,805 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:33:38,805 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:33:38,805 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:33:38,805 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:33:38,809 - docstring_workflow - INFO - logger - log_info - Extracted 22 functions.
2024-11-14 21:33:38,809 - docstring_workflow - INFO - logger - log_info - Extracted 22 functions from source code.
2024-11-14 21:33:38,809 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['add_child', 'remove_child', 'find_child', 'get_path', 'to_dict']
2024-11-14 21:33:38,809 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 0eacc6c0ed3c8bda141e0b43fc7cea5f
2024-11-14 21:33:38,809 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 0eacc6c0ed3c8bda141e0b43fc7cea5f with key: docstring:v1:0eacc6c0ed3c8bda141e0b43fc7cea5f
2024-11-14 21:33:38,809 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 0eacc6c0ed3c8bda141e0b43fc7cea5f
2024-11-14 21:33:38,809 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:38,810 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:38,810 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:38,810 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:38,810 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:38,810 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:38,810 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:38,810 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: add_child
        Parameters: self: Any, child: 'HierarchyNode'
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Add a child node to this node.
2024-11-14 21:33:38,810 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:40,103 - docstring_workflow - ERROR - logger - log_error - Error processing function add_child: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:40,103 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: abc3866720ac42829f1062a9523e58e4
2024-11-14 21:33:40,104 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: abc3866720ac42829f1062a9523e58e4 with key: docstring:v1:abc3866720ac42829f1062a9523e58e4
2024-11-14 21:33:40,104 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: abc3866720ac42829f1062a9523e58e4
2024-11-14 21:33:40,104 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:40,104 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:40,105 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:40,105 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:40,105 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:40,105 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:40,105 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:40,105 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: remove_child
        Parameters: self: Any, child: 'HierarchyNode'
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Remove a child node from this node.
2024-11-14 21:33:40,105 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:41,599 - docstring_workflow - ERROR - logger - log_error - Error processing function remove_child: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:41,600 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 009bef259c4c17691c2731440293412b
2024-11-14 21:33:41,600 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 009bef259c4c17691c2731440293412b with key: docstring:v1:009bef259c4c17691c2731440293412b
2024-11-14 21:33:41,600 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 009bef259c4c17691c2731440293412b
2024-11-14 21:33:41,600 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:41,601 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:41,601 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:41,601 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:41,601 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:41,601 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:41,601 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:41,601 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: find_child
        Parameters: self: Any, name: str
        Returns: Optional['HierarchyNode']
        Decorators: None
        Exceptions: None
        Existing docstring: Find a direct child node by name.
2024-11-14 21:33:41,602 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:42,946 - docstring_workflow - ERROR - logger - log_error - Error processing function find_child: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:42,946 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 8d17fb148161ae647849d7a92b67b9d6
2024-11-14 21:33:42,946 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 8d17fb148161ae647849d7a92b67b9d6 with key: docstring:v1:8d17fb148161ae647849d7a92b67b9d6
2024-11-14 21:33:42,946 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 8d17fb148161ae647849d7a92b67b9d6
2024-11-14 21:33:42,947 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:42,947 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:42,948 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:42,948 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:42,948 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:42,948 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:42,948 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:42,948 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_path
        Parameters: self: Any
        Returns: str
        Decorators: None
        Exceptions: None
        Existing docstring: Get the full path from root to this node.
2024-11-14 21:33:42,948 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:44,276 - docstring_workflow - ERROR - logger - log_error - Error processing function get_path: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:44,276 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 72f8dd248ec0dacb24ffc8e53d032a75
2024-11-14 21:33:44,276 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 72f8dd248ec0dacb24ffc8e53d032a75 with key: docstring:v1:72f8dd248ec0dacb24ffc8e53d032a75
2024-11-14 21:33:44,277 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 72f8dd248ec0dacb24ffc8e53d032a75
2024-11-14 21:33:44,277 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:44,277 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:44,278 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:44,278 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:44,278 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:44,278 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:44,278 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:44,278 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: to_dict
        Parameters: self: Any
        Returns: Dict[str, Any]
        Decorators: None
        Exceptions: None
        Existing docstring: Convert the node to a dictionary representation.
2024-11-14 21:33:44,278 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:45,577 - docstring_workflow - ERROR - logger - log_error - Error processing function to_dict: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:45,577 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__repr__', '__init__', 'add_node', 'get_node', 'remove_node']
2024-11-14 21:33:45,577 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f742e20d2b4f414f60540138600187b9
2024-11-14 21:33:45,577 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f742e20d2b4f414f60540138600187b9 with key: docstring:v1:f742e20d2b4f414f60540138600187b9
2024-11-14 21:33:45,578 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f742e20d2b4f414f60540138600187b9
2024-11-14 21:33:45,580 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:45,580 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:45,580 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:45,581 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:45,581 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:45,581 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:45,581 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:45,581 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __repr__
        Parameters: self: Any
        Returns: str
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:33:45,581 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:46,877 - docstring_workflow - ERROR - logger - log_error - Error processing function __repr__: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:46,877 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 74784b5204978384eb3ee3f65036a1c7
2024-11-14 21:33:46,877 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 74784b5204978384eb3ee3f65036a1c7 with key: docstring:v1:74784b5204978384eb3ee3f65036a1c7
2024-11-14 21:33:46,878 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 74784b5204978384eb3ee3f65036a1c7
2024-11-14 21:33:46,878 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:46,878 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:46,878 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:46,879 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:46,879 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:46,879 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:46,879 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:46,879 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the code hierarchy.
2024-11-14 21:33:46,879 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:48,294 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:48,294 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: b3796a540848c83cffdb46892ef32060
2024-11-14 21:33:48,294 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: b3796a540848c83cffdb46892ef32060 with key: docstring:v1:b3796a540848c83cffdb46892ef32060
2024-11-14 21:33:48,294 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: b3796a540848c83cffdb46892ef32060
2024-11-14 21:33:48,295 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:48,295 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:48,295 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:48,295 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:48,295 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:48,295 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:48,295 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:48,296 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: add_node
        Parameters: self: Any, path: str, node_type: str, documentation: str, metadata: Dict[str, Any]
        Returns: HierarchyNode
        Decorators: None
        Exceptions: ValueError
        Existing docstring: Add a new node to the hierarchy.

Args:
    path: Dot-separated path to the node (e.g., 'module.class.function')
    node_type: Type of the code element
    documentation: Optional documentation string
    metadata: Optional metadata dictionary
    
Returns:
    The created node
    
Raises:
    ValueError: If the path is invalid
2024-11-14 21:33:48,296 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:49,622 - docstring_workflow - ERROR - logger - log_error - Error processing function add_node: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:49,622 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: e8fb6a0d9f0f355d6b1de882aba7c705
2024-11-14 21:33:49,622 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: e8fb6a0d9f0f355d6b1de882aba7c705 with key: docstring:v1:e8fb6a0d9f0f355d6b1de882aba7c705
2024-11-14 21:33:49,623 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: e8fb6a0d9f0f355d6b1de882aba7c705
2024-11-14 21:33:49,623 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:49,623 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:49,624 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:49,624 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:49,624 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:49,624 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:49,624 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:49,624 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_node
        Parameters: self: Any, path: str
        Returns: Optional[HierarchyNode]
        Decorators: None
        Exceptions: None
        Existing docstring: Get a node by its path.
2024-11-14 21:33:49,624 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:50,983 - docstring_workflow - ERROR - logger - log_error - Error processing function get_node: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:50,984 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 0f39e33e0bfa5020af9cb08b46e030d3
2024-11-14 21:33:50,984 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 0f39e33e0bfa5020af9cb08b46e030d3 with key: docstring:v1:0f39e33e0bfa5020af9cb08b46e030d3
2024-11-14 21:33:50,984 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 0f39e33e0bfa5020af9cb08b46e030d3
2024-11-14 21:33:50,984 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:50,985 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:50,985 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:50,985 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:50,985 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:50,985 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:50,985 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:50,986 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: remove_node
        Parameters: self: Any, path: str
        Returns: bool
        Decorators: None
        Exceptions: None
        Existing docstring: Remove a node and its children from the hierarchy.

Args:
    path: Path to the node to remove
    
Returns:
    True if the node was removed, False if not found
2024-11-14 21:33:50,986 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:52,413 - docstring_workflow - ERROR - logger - log_error - Error processing function remove_node: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:52,413 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['move_node', 'search', 'iterate_nodes', 'to_dict', 'save_to_file']
2024-11-14 21:33:52,413 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 3d2d843d7925fe42076abd4ed39fb611
2024-11-14 21:33:52,413 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 3d2d843d7925fe42076abd4ed39fb611 with key: docstring:v1:3d2d843d7925fe42076abd4ed39fb611
2024-11-14 21:33:52,413 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 3d2d843d7925fe42076abd4ed39fb611
2024-11-14 21:33:52,414 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:52,414 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:52,414 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:52,414 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:52,414 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:52,414 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:52,415 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:52,415 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: move_node
        Parameters: self: Any, source_path: str, target_path: str
        Returns: bool
        Decorators: None
        Exceptions: None
        Existing docstring: Move a node to a new location in the hierarchy.

Args:
    source_path: Current path of the node
    target_path: New path for the node
    
Returns:
    True if the move was successful, False otherwise
2024-11-14 21:33:52,415 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:53,760 - docstring_workflow - ERROR - logger - log_error - Error processing function move_node: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:53,761 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: b1be87f8fc9a0d11e1a9714010554489
2024-11-14 21:33:53,761 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: b1be87f8fc9a0d11e1a9714010554489 with key: docstring:v1:b1be87f8fc9a0d11e1a9714010554489
2024-11-14 21:33:53,761 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: b1be87f8fc9a0d11e1a9714010554489
2024-11-14 21:33:53,764 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:53,764 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:53,764 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:53,764 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:53,764 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:53,764 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:53,764 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:53,765 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: search
        Parameters: self: Any, query: str, node_type: Optional[str]
        Returns: List[HierarchyNode]
        Decorators: None
        Exceptions: None
        Existing docstring: Search for nodes matching the given criteria.

Args:
    query: Search string (supports wildcards *)
    node_type: Optional filter by node type
    
Returns:
    List of matching nodes
2024-11-14 21:33:53,765 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:55,134 - docstring_workflow - ERROR - logger - log_error - Error processing function search: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:55,135 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: eeb0cc0fb01ab4e29c94c264b2af0feb
2024-11-14 21:33:55,135 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: eeb0cc0fb01ab4e29c94c264b2af0feb with key: docstring:v1:eeb0cc0fb01ab4e29c94c264b2af0feb
2024-11-14 21:33:55,135 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: eeb0cc0fb01ab4e29c94c264b2af0feb
2024-11-14 21:33:55,135 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:55,136 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:55,136 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:55,136 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:55,136 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:55,136 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:55,136 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:55,137 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: iterate_nodes
        Parameters: self: Any, root: Optional[HierarchyNode]
        Returns: Iterator[HierarchyNode]
        Decorators: None
        Exceptions: None
        Existing docstring: Iterate through all nodes in the hierarchy.

Args:
    root: Optional starting node (defaults to hierarchy root)
    
Yields:
    HierarchyNode objects in depth-first order
2024-11-14 21:33:55,137 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:56,433 - docstring_workflow - ERROR - logger - log_error - Error processing function iterate_nodes: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:56,434 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 72f8dd248ec0dacb24ffc8e53d032a75
2024-11-14 21:33:56,434 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 72f8dd248ec0dacb24ffc8e53d032a75 with key: docstring:v1:72f8dd248ec0dacb24ffc8e53d032a75
2024-11-14 21:33:56,434 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 72f8dd248ec0dacb24ffc8e53d032a75
2024-11-14 21:33:56,434 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:56,435 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:56,435 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:56,435 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:56,435 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:56,435 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:56,435 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:56,436 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: to_dict
        Parameters: self: Any
        Returns: Dict[str, Any]
        Decorators: None
        Exceptions: None
        Existing docstring: Convert the entire hierarchy to a dictionary representation.
2024-11-14 21:33:56,436 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:57,757 - docstring_workflow - ERROR - logger - log_error - Error processing function to_dict: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:57,758 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 6fd9f37426cf54da6d1bb0f94dfbd028
2024-11-14 21:33:57,758 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 6fd9f37426cf54da6d1bb0f94dfbd028 with key: docstring:v1:6fd9f37426cf54da6d1bb0f94dfbd028
2024-11-14 21:33:57,758 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 6fd9f37426cf54da6d1bb0f94dfbd028
2024-11-14 21:33:57,759 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:57,759 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:57,759 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:57,759 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:57,759 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:57,759 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:57,759 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:57,760 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: save_to_file
        Parameters: self: Any, filepath: str
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Save the hierarchy to a JSON file.

Args:
    filepath: Path to save the JSON file
2024-11-14 21:33:57,760 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:33:59,292 - docstring_workflow - ERROR - logger - log_error - Error processing function save_to_file: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:33:59,292 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['load_from_file', '_rebuild_index', '__init__', 'process_module', '_process_class']
2024-11-14 21:33:59,293 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: ee36189f535067f4b01e8c424f8f5e23
2024-11-14 21:33:59,293 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: ee36189f535067f4b01e8c424f8f5e23 with key: docstring:v1:ee36189f535067f4b01e8c424f8f5e23
2024-11-14 21:33:59,293 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: ee36189f535067f4b01e8c424f8f5e23
2024-11-14 21:33:59,293 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:33:59,294 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:33:59,294 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:33:59,294 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:33:59,294 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:33:59,294 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:33:59,294 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:33:59,295 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: load_from_file
        Parameters: cls: Any, filepath: str
        Returns: 'CodeHierarchy'
        Decorators: classmethod
        Exceptions: None
        Existing docstring: Load a hierarchy from a JSON file.

Args:
    filepath: Path to the JSON file
    
Returns:
    CodeHierarchy instance
2024-11-14 21:33:59,295 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:00,539 - docstring_workflow - ERROR - logger - log_error - Error processing function load_from_file: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:00,539 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 3e26375f7fdfe2c4077717a53028d5f6
2024-11-14 21:34:00,539 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 3e26375f7fdfe2c4077717a53028d5f6 with key: docstring:v1:3e26375f7fdfe2c4077717a53028d5f6
2024-11-14 21:34:00,539 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 3e26375f7fdfe2c4077717a53028d5f6
2024-11-14 21:34:00,540 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:00,540 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:00,540 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:00,540 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:00,540 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:00,540 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:00,541 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:00,541 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _rebuild_index
        Parameters: self: Any
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Rebuild the path index from the current hierarchy.
2024-11-14 21:34:00,541 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:02,022 - docstring_workflow - ERROR - logger - log_error - Error processing function _rebuild_index: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:02,022 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 74784b5204978384eb3ee3f65036a1c7
2024-11-14 21:34:02,022 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 74784b5204978384eb3ee3f65036a1c7 with key: docstring:v1:74784b5204978384eb3ee3f65036a1c7
2024-11-14 21:34:02,022 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 74784b5204978384eb3ee3f65036a1c7
2024-11-14 21:34:02,025 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:02,025 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:02,025 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:02,026 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:02,026 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:02,026 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:02,026 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:02,026 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the hierarchy builder.
2024-11-14 21:34:02,026 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:03,338 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:03,338 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 939246ef4596a7519c763e5207824b2a
2024-11-14 21:34:03,338 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 939246ef4596a7519c763e5207824b2a with key: docstring:v1:939246ef4596a7519c763e5207824b2a
2024-11-14 21:34:03,338 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 939246ef4596a7519c763e5207824b2a
2024-11-14 21:34:03,339 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:03,339 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:03,339 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:03,339 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:03,339 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:03,339 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:03,339 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:03,340 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: process_module
        Parameters: self: Any, module_path: str, tree: ast.AST
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Process a module and update the hierarchy.

Args:
    module_path: Path to the module file
    tree: AST of the module
2024-11-14 21:34:03,340 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:04,682 - docstring_workflow - ERROR - logger - log_error - Error processing function process_module: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:04,682 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: ee8553fd94aa6b3c71e7e725943c64ad
2024-11-14 21:34:04,682 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: ee8553fd94aa6b3c71e7e725943c64ad with key: docstring:v1:ee8553fd94aa6b3c71e7e725943c64ad
2024-11-14 21:34:04,683 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: ee8553fd94aa6b3c71e7e725943c64ad
2024-11-14 21:34:04,683 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:04,683 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:04,683 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:04,684 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:04,684 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:04,684 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:04,684 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:04,684 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _process_class
        Parameters: self: Any, node: ast.ClassDef
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Process a class definition and add it to the hierarchy.
2024-11-14 21:34:04,684 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:06,102 - docstring_workflow - ERROR - logger - log_error - Error processing function _process_class: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:06,102 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['_process_function', 'build_node']
2024-11-14 21:34:06,102 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 21af0ede4b1dc677efeb3af2d77b4dfa
2024-11-14 21:34:06,102 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 21af0ede4b1dc677efeb3af2d77b4dfa with key: docstring:v1:21af0ede4b1dc677efeb3af2d77b4dfa
2024-11-14 21:34:06,103 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 21af0ede4b1dc677efeb3af2d77b4dfa
2024-11-14 21:34:06,103 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:06,103 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:06,103 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:06,104 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:06,104 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:06,104 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:06,104 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:06,104 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _process_function
        Parameters: self: Any, node: ast.FunctionDef, parent_path: str
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Process a function definition and add it to the hierarchy.
2024-11-14 21:34:06,104 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:07,437 - docstring_workflow - ERROR - logger - log_error - Error processing function _process_function: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:07,437 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 87ac9682499742e90ded83fae23a21b2
2024-11-14 21:34:07,438 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 87ac9682499742e90ded83fae23a21b2 with key: docstring:v1:87ac9682499742e90ded83fae23a21b2
2024-11-14 21:34:07,438 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 87ac9682499742e90ded83fae23a21b2
2024-11-14 21:34:07,438 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:07,439 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:07,439 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:07,439 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:07,439 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:07,439 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:07,439 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:07,439 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: build_node
        Parameters: data: Dict[str, Any], parent: Optional[HierarchyNode]
        Returns: HierarchyNode
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:34:07,439 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:08,819 - docstring_workflow - ERROR - logger - log_error - Error processing function build_node: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:08,849 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:34:08,849 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=22, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:34:08,850 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:34:08,850 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:34:08,850 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:34:08,850 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/hierarchy.py
2024-11-14 21:34:08,850 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/hierarchy.py'
2024-11-14 21:34:08,850 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpnr_h6iiz/extract.py
2024-11-14 21:34:08,850 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpnr_h6iiz/extract.py
2024-11-14 21:34:08,850 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpnr_h6iiz/extract.py'
2024-11-14 21:34:08,871 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:34:08,871 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:34:08,871 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:34:08,872 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:34:08,872 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:34:08,872 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:34:08,872 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:34:08,873 - docstring_workflow - INFO - logger - log_info - Extracted 3 functions.
2024-11-14 21:34:08,873 - docstring_workflow - INFO - logger - log_info - Extracted 3 functions from source code.
2024-11-14 21:34:08,874 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['extract_functions', '__init__', '_get_language_extractor']
2024-11-14 21:34:08,874 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: e0a9baf837af468b69428fb0e9d40b10
2024-11-14 21:34:08,874 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: e0a9baf837af468b69428fb0e9d40b10 with key: docstring:v1:e0a9baf837af468b69428fb0e9d40b10
2024-11-14 21:34:08,874 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: e0a9baf837af468b69428fb0e9d40b10
2024-11-14 21:34:08,874 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:08,874 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:08,875 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:08,875 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:08,875 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:08,875 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:08,875 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:08,875 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: extract_functions
        Parameters: file_path: str, content: str, significant_operations: Optional[Set[str]], multilang_manager: Optional[MultiLanguageManager], hierarchy_manager: Optional[CodeHierarchy], context_manager: Optional[ContextManager]
        Returns: Dict[str, List[Any]]
        Decorators: None
        Exceptions: None
        Existing docstring: Extract functions and classes from source code.

Args:
    file_path: Path to the source file
    content: Source code string
    significant_operations: Optional set of operations to track
    multilang_manager: Optional multi-language support manager
    hierarchy_manager: Optional hierarchy manager
    context_manager: Optional context manager
    
Returns:
    Dictionary containing extracted classes and functions
2024-11-14 21:34:08,875 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:10,196 - docstring_workflow - ERROR - logger - log_error - Error processing function extract_functions: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:10,196 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: a7baedc840e9a1a441667de652efd031
2024-11-14 21:34:10,196 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: a7baedc840e9a1a441667de652efd031 with key: docstring:v1:a7baedc840e9a1a441667de652efd031
2024-11-14 21:34:10,197 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: a7baedc840e9a1a441667de652efd031
2024-11-14 21:34:10,200 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:10,200 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:10,200 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:10,200 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:10,200 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:10,200 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:10,200 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:10,201 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, multilang_manager: MultiLanguageManager, hierarchy_manager: CodeHierarchy, context_manager: ContextManager, significant_operations: Optional[Set[str]]
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the extraction manager.

Args:
    multilang_manager: Multi-language support manager
    hierarchy_manager: Hierarchy management instance
    context_manager: Context management instance
    significant_operations: Set of significant operations to track
2024-11-14 21:34:10,201 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:11,656 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:11,656 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 0f1e16cf3e544142c8c57d0930bf9f73
2024-11-14 21:34:11,656 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 0f1e16cf3e544142c8c57d0930bf9f73 with key: docstring:v1:0f1e16cf3e544142c8c57d0930bf9f73
2024-11-14 21:34:11,656 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 0f1e16cf3e544142c8c57d0930bf9f73
2024-11-14 21:34:11,657 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:11,657 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:11,657 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:11,658 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:11,658 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:11,658 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:11,658 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:11,658 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _get_language_extractor
        Parameters: self: Any, language: str
        Returns: Optional[BaseLanguageParser]
        Decorators: None
        Exceptions: None
        Existing docstring: Get the appropriate extractor for a language.
2024-11-14 21:34:11,658 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:12,965 - docstring_workflow - ERROR - logger - log_error - Error processing function _get_language_extractor: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:12,968 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:34:12,968 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=3, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:34:12,968 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:34:12,968 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:34:12,968 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:34:12,968 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/extract.py
2024-11-14 21:34:12,968 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/extract.py'
2024-11-14 21:34:12,968 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpnr_h6iiz/multilang.py
2024-11-14 21:34:12,968 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpnr_h6iiz/multilang.py
2024-11-14 21:34:12,968 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpnr_h6iiz/multilang.py'
2024-11-14 21:34:12,989 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:34:12,989 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:34:12,990 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:34:12,990 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:34:12,990 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:34:12,990 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:34:12,990 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:34:12,994 - docstring_workflow - INFO - logger - log_info - Extracted 18 functions.
2024-11-14 21:34:12,994 - docstring_workflow - INFO - logger - log_info - Extracted 18 functions from source code.
2024-11-14 21:34:12,994 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__post_init__', '__init__', 'parse_code', 'extract_docstring', 'get_node_name']
2024-11-14 21:34:12,994 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: c0e8002f3d69f901bc40bdc1d4a1b239
2024-11-14 21:34:12,994 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: c0e8002f3d69f901bc40bdc1d4a1b239 with key: docstring:v1:c0e8002f3d69f901bc40bdc1d4a1b239
2024-11-14 21:34:12,994 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: c0e8002f3d69f901bc40bdc1d4a1b239
2024-11-14 21:34:12,994 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:12,995 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:12,995 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:12,995 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:12,995 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:12,995 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:12,995 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:12,995 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __post_init__
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: ValueError
        Existing docstring: Validate specification consistency.
2024-11-14 21:34:12,995 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:14,373 - docstring_workflow - ERROR - logger - log_error - Error processing function __post_init__: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:14,374 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 8d257468027e17ebe862f24c6009e817
2024-11-14 21:34:14,374 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 8d257468027e17ebe862f24c6009e817 with key: docstring:v1:8d257468027e17ebe862f24c6009e817
2024-11-14 21:34:14,374 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 8d257468027e17ebe862f24c6009e817
2024-11-14 21:34:14,374 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:14,375 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:14,375 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:14,375 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:14,375 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:14,375 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:14,376 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:14,376 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, spec: LanguageSpec
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:34:14,376 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:15,658 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:15,659 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 7d3b90f117131507cb4af6db4ceaef7a
2024-11-14 21:34:15,659 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 7d3b90f117131507cb4af6db4ceaef7a with key: docstring:v1:7d3b90f117131507cb4af6db4ceaef7a
2024-11-14 21:34:15,659 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 7d3b90f117131507cb4af6db4ceaef7a
2024-11-14 21:34:15,659 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:15,660 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:15,660 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:15,660 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:15,660 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:15,660 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:15,660 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:15,661 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: parse_code
        Parameters: self: Any, content: str
        Returns: Dict[str, Any]
        Decorators: abstractmethod
        Exceptions: None
        Existing docstring: Parse code content and extract documentation-relevant information.
2024-11-14 21:34:15,661 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:17,123 - docstring_workflow - ERROR - logger - log_error - Error processing function parse_code: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:17,123 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 1fde812c26e689b93bc3ebef38aff980
2024-11-14 21:34:17,123 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 1fde812c26e689b93bc3ebef38aff980 with key: docstring:v1:1fde812c26e689b93bc3ebef38aff980
2024-11-14 21:34:17,123 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 1fde812c26e689b93bc3ebef38aff980
2024-11-14 21:34:17,124 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:17,124 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:17,124 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:17,124 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:17,124 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:17,125 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:17,125 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:17,125 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: extract_docstring
        Parameters: self: Any, node: Any
        Returns: Optional[str]
        Decorators: abstractmethod
        Exceptions: None
        Existing docstring: Extract docstring from a code node.
2024-11-14 21:34:17,125 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:18,518 - docstring_workflow - ERROR - logger - log_error - Error processing function extract_docstring: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:18,518 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: e5e3a3fef4e527a8a26e2c9dadcba598
2024-11-14 21:34:18,518 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: e5e3a3fef4e527a8a26e2c9dadcba598 with key: docstring:v1:e5e3a3fef4e527a8a26e2c9dadcba598
2024-11-14 21:34:18,518 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: e5e3a3fef4e527a8a26e2c9dadcba598
2024-11-14 21:34:18,521 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:18,521 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:18,521 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:18,521 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:18,521 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:18,521 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:18,521 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:18,522 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_node_name
        Parameters: self: Any, node: Any
        Returns: str
        Decorators: abstractmethod
        Exceptions: None
        Existing docstring: Get the name of a code node.
2024-11-14 21:34:18,522 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:19,901 - docstring_workflow - ERROR - logger - log_error - Error processing function get_node_name: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:19,901 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['extract_comments', 'parse_code', '_process_node', 'parse_code', '_find_preceding_comment']
2024-11-14 21:34:19,901 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 1176af8648e055ba50b8618d0dc4f716
2024-11-14 21:34:19,901 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 1176af8648e055ba50b8618d0dc4f716 with key: docstring:v1:1176af8648e055ba50b8618d0dc4f716
2024-11-14 21:34:19,901 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 1176af8648e055ba50b8618d0dc4f716
2024-11-14 21:34:19,902 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:19,902 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:19,902 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:19,902 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:19,902 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:19,903 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:19,903 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:19,903 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: extract_comments
        Parameters: self: Any, content: str
        Returns: List[str]
        Decorators: None
        Exceptions: None
        Existing docstring: Extract comments from code content.
2024-11-14 21:34:19,903 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:21,217 - docstring_workflow - ERROR - logger - log_error - Error processing function extract_comments: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:21,217 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 7d3b90f117131507cb4af6db4ceaef7a
2024-11-14 21:34:21,217 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 7d3b90f117131507cb4af6db4ceaef7a with key: docstring:v1:7d3b90f117131507cb4af6db4ceaef7a
2024-11-14 21:34:21,218 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 7d3b90f117131507cb4af6db4ceaef7a
2024-11-14 21:34:21,219 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:21,219 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:21,219 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:21,219 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:21,219 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:21,219 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:21,219 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:21,220 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: parse_code
        Parameters: self: Any, content: str
        Returns: Dict[str, Any]
        Decorators: None
        Exceptions: ParserException
        Existing docstring: Parse Python code content.
2024-11-14 21:34:21,220 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:22,655 - docstring_workflow - ERROR - logger - log_error - Error processing function parse_code: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:22,655 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: ca3431e12923380d3f5239b6586a05aa
2024-11-14 21:34:22,655 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: ca3431e12923380d3f5239b6586a05aa with key: docstring:v1:ca3431e12923380d3f5239b6586a05aa
2024-11-14 21:34:22,655 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: ca3431e12923380d3f5239b6586a05aa
2024-11-14 21:34:22,656 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:22,656 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:22,656 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:22,656 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:22,656 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:22,656 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:22,657 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:22,657 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _process_node
        Parameters: self: Any, node: ast.AST
        Returns: Dict[str, Any]
        Decorators: None
        Exceptions: None
        Existing docstring: Process an AST node and its children.
2024-11-14 21:34:22,657 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:23,996 - docstring_workflow - ERROR - logger - log_error - Error processing function _process_node: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:23,996 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 7d3b90f117131507cb4af6db4ceaef7a
2024-11-14 21:34:23,996 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 7d3b90f117131507cb4af6db4ceaef7a with key: docstring:v1:7d3b90f117131507cb4af6db4ceaef7a
2024-11-14 21:34:23,996 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 7d3b90f117131507cb4af6db4ceaef7a
2024-11-14 21:34:23,997 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:23,997 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:23,997 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:23,997 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:23,997 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:23,997 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:23,997 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:23,998 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: parse_code
        Parameters: self: Any, content: str
        Returns: Dict[str, Any]
        Decorators: None
        Exceptions: ParserException
        Existing docstring: Parse JavaScript code content.
2024-11-14 21:34:23,998 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:25,319 - docstring_workflow - ERROR - logger - log_error - Error processing function parse_code: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:25,319 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 7b01125ad9c8e5881367902ee073151a
2024-11-14 21:34:25,319 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 7b01125ad9c8e5881367902ee073151a with key: docstring:v1:7b01125ad9c8e5881367902ee073151a
2024-11-14 21:34:25,319 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 7b01125ad9c8e5881367902ee073151a
2024-11-14 21:34:25,320 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:25,320 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:25,320 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:25,320 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:25,320 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:25,320 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:25,320 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:25,321 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _find_preceding_comment
        Parameters: self: Any, content: str, position: int
        Returns: Optional[str]
        Decorators: None
        Exceptions: None
        Existing docstring: Find JSDoc comment preceding a code block.
2024-11-14 21:34:25,321 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:26,579 - docstring_workflow - ERROR - logger - log_error - Error processing function _find_preceding_comment: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:26,579 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['extract_docstring', 'get_node_name', 'get_parser', '__post_init__', 'register_file']
2024-11-14 21:34:26,579 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 1fde812c26e689b93bc3ebef38aff980
2024-11-14 21:34:26,579 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 1fde812c26e689b93bc3ebef38aff980 with key: docstring:v1:1fde812c26e689b93bc3ebef38aff980
2024-11-14 21:34:26,580 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 1fde812c26e689b93bc3ebef38aff980
2024-11-14 21:34:26,582 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:26,582 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:26,582 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:26,583 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:26,583 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:26,583 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:26,583 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:26,583 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: extract_docstring
        Parameters: self: Any, node: Any
        Returns: Optional[str]
        Decorators: None
        Exceptions: None
        Existing docstring: Extract docstring from a node.
2024-11-14 21:34:26,583 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:27,907 - docstring_workflow - ERROR - logger - log_error - Error processing function extract_docstring: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:27,907 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: e5e3a3fef4e527a8a26e2c9dadcba598
2024-11-14 21:34:27,907 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: e5e3a3fef4e527a8a26e2c9dadcba598 with key: docstring:v1:e5e3a3fef4e527a8a26e2c9dadcba598
2024-11-14 21:34:27,908 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: e5e3a3fef4e527a8a26e2c9dadcba598
2024-11-14 21:34:27,908 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:27,908 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:27,909 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:27,909 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:27,909 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:27,909 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:27,909 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:27,909 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_node_name
        Parameters: self: Any, node: Any
        Returns: str
        Decorators: None
        Exceptions: None
        Existing docstring: Get the name of a node.
2024-11-14 21:34:27,909 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:29,321 - docstring_workflow - ERROR - logger - log_error - Error processing function get_node_name: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:29,321 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: bd2cd3fbd83cef976e7d051a19211655
2024-11-14 21:34:29,321 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: bd2cd3fbd83cef976e7d051a19211655 with key: docstring:v1:bd2cd3fbd83cef976e7d051a19211655
2024-11-14 21:34:29,321 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: bd2cd3fbd83cef976e7d051a19211655
2024-11-14 21:34:29,322 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:29,322 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:29,322 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:29,322 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:29,322 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:29,322 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:29,322 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:29,323 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_parser
        Parameters: cls: Any, language: str, spec: LanguageSpec
        Returns: Optional[BaseLanguageParser]
        Decorators: classmethod
        Exceptions: None
        Existing docstring: Get parser instance for a language.
2024-11-14 21:34:29,323 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:30,738 - docstring_workflow - ERROR - logger - log_error - Error processing function get_parser: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:30,738 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: c0e8002f3d69f901bc40bdc1d4a1b239
2024-11-14 21:34:30,738 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: c0e8002f3d69f901bc40bdc1d4a1b239 with key: docstring:v1:c0e8002f3d69f901bc40bdc1d4a1b239
2024-11-14 21:34:30,738 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: c0e8002f3d69f901bc40bdc1d4a1b239
2024-11-14 21:34:30,739 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:30,739 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:30,739 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:30,739 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:30,739 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:30,739 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:30,739 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:30,740 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __post_init__
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize manager state.
2024-11-14 21:34:30,740 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:32,145 - docstring_workflow - ERROR - logger - log_error - Error processing function __post_init__: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:32,145 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: ca8f113f3065f2be2938ff632a59d34a
2024-11-14 21:34:32,145 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: ca8f113f3065f2be2938ff632a59d34a with key: docstring:v1:ca8f113f3065f2be2938ff632a59d34a
2024-11-14 21:34:32,145 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: ca8f113f3065f2be2938ff632a59d34a
2024-11-14 21:34:32,146 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:32,146 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:32,146 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:32,146 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:32,146 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:32,147 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:32,147 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:32,147 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: register_file
        Parameters: self: Any, language: str
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Register a processed file.
2024-11-14 21:34:32,147 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:33,521 - docstring_workflow - ERROR - logger - log_error - Error processing function register_file: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:33,521 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['get_language_stats', 'save_analysis', 'load_analysis']
2024-11-14 21:34:33,522 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 06cabba7dc7c6d717d7a74717a503ea2
2024-11-14 21:34:33,522 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 06cabba7dc7c6d717d7a74717a503ea2 with key: docstring:v1:06cabba7dc7c6d717d7a74717a503ea2
2024-11-14 21:34:33,522 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 06cabba7dc7c6d717d7a74717a503ea2
2024-11-14 21:34:33,525 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:33,525 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:33,525 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:33,525 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:33,525 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:33,525 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:33,525 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:33,525 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_language_stats
        Parameters: self: Any
        Returns: Dict[str, int]
        Decorators: None
        Exceptions: None
        Existing docstring: Get language statistics.
2024-11-14 21:34:33,526 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:34,783 - docstring_workflow - ERROR - logger - log_error - Error processing function get_language_stats: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:34,783 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: d085cc3d746df182e81253d61c0a792a
2024-11-14 21:34:34,783 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: d085cc3d746df182e81253d61c0a792a with key: docstring:v1:d085cc3d746df182e81253d61c0a792a
2024-11-14 21:34:34,783 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: d085cc3d746df182e81253d61c0a792a
2024-11-14 21:34:34,784 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:34,784 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:34,784 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:34,784 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:34,784 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:34,785 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:34,785 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:34,785 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: save_analysis
        Parameters: self: Any, output_path: str
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Save analysis results to JSON.
2024-11-14 21:34:34,785 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:36,075 - docstring_workflow - ERROR - logger - log_error - Error processing function save_analysis: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:36,075 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 2f29711ec406993c9b1e30e1363bdd7c
2024-11-14 21:34:36,075 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 2f29711ec406993c9b1e30e1363bdd7c with key: docstring:v1:2f29711ec406993c9b1e30e1363bdd7c
2024-11-14 21:34:36,075 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 2f29711ec406993c9b1e30e1363bdd7c
2024-11-14 21:34:36,076 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:36,076 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:36,076 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:36,076 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:36,077 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:36,077 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:36,077 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:36,077 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: load_analysis
        Parameters: cls: Any, input_path: str
        Returns: 'MultiLanguageManager'
        Decorators: classmethod
        Exceptions: None
        Existing docstring: Load analysis results from JSON.
2024-11-14 21:34:36,077 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:37,550 - docstring_workflow - ERROR - logger - log_error - Error processing function load_analysis: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:37,555 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:34:37,555 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=18, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:34:37,555 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:34:37,555 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:34:37,555 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:34:37,555 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/multilang.py
2024-11-14 21:34:37,555 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/multilang.py'
2024-11-14 21:34:37,555 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpnr_h6iiz/main.py
2024-11-14 21:34:37,556 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpnr_h6iiz/main.py
2024-11-14 21:34:37,556 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpnr_h6iiz/main.py'
2024-11-14 21:34:37,577 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:34:37,577 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:34:37,577 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:34:37,578 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:34:37,578 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:34:37,578 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:34:37,578 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:34:37,581 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions.
2024-11-14 21:34:37,581 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions from source code.
2024-11-14 21:34:37,581 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['setup_logging', 'create_arg_parser', 'display_statistics', 'setup_signal_handlers', 'main']
2024-11-14 21:34:37,582 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 326c5c4428ba8a942f1f2cbc913c2b83
2024-11-14 21:34:37,582 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 326c5c4428ba8a942f1f2cbc913c2b83 with key: docstring:v1:326c5c4428ba8a942f1f2cbc913c2b83
2024-11-14 21:34:37,582 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 326c5c4428ba8a942f1f2cbc913c2b83
2024-11-14 21:34:37,582 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:37,582 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:37,582 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:37,583 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:37,583 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:37,583 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:37,583 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:37,583 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: setup_logging
        Parameters: config: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Configure logging with optional config parameter.
2024-11-14 21:34:37,583 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:39,083 - docstring_workflow - ERROR - logger - log_error - Error processing function setup_logging: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:39,083 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: b581c8384aa350e5945f8adcd8d78ea4
2024-11-14 21:34:39,083 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: b581c8384aa350e5945f8adcd8d78ea4 with key: docstring:v1:b581c8384aa350e5945f8adcd8d78ea4
2024-11-14 21:34:39,083 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: b581c8384aa350e5945f8adcd8d78ea4
2024-11-14 21:34:39,084 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:39,084 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:39,084 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:39,084 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:39,084 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:39,084 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:39,085 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:39,085 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: create_arg_parser
        Parameters: None
        Returns: argparse.ArgumentParser
        Decorators: None
        Exceptions: None
        Existing docstring: Create and configure the argument parser.
2024-11-14 21:34:39,085 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:40,346 - docstring_workflow - ERROR - logger - log_error - Error processing function create_arg_parser: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:40,346 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 46deccb79cb9fdd768ea7203077fe3ab
2024-11-14 21:34:40,347 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 46deccb79cb9fdd768ea7203077fe3ab with key: docstring:v1:46deccb79cb9fdd768ea7203077fe3ab
2024-11-14 21:34:40,347 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 46deccb79cb9fdd768ea7203077fe3ab
2024-11-14 21:34:40,347 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:40,347 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:40,348 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:40,348 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:40,348 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:40,348 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:40,348 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:40,348 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: display_statistics
        Parameters: stats: Statistics
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Display documentation generation statistics.
2024-11-14 21:34:40,348 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:41,642 - docstring_workflow - ERROR - logger - log_error - Error processing function display_statistics: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:41,642 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 35c6203f4fd0fbd8f6073a8c13a8e1eb
2024-11-14 21:34:41,642 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 35c6203f4fd0fbd8f6073a8c13a8e1eb with key: docstring:v1:35c6203f4fd0fbd8f6073a8c13a8e1eb
2024-11-14 21:34:41,643 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 35c6203f4fd0fbd8f6073a8c13a8e1eb
2024-11-14 21:34:41,645 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:41,645 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:41,646 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:41,646 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:41,646 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:41,646 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:41,646 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:41,646 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: setup_signal_handlers
        Parameters: app: ApplicationManager
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Set up signal handlers for graceful shutdown.
2024-11-14 21:34:41,646 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:43,123 - docstring_workflow - ERROR - logger - log_error - Error processing function setup_signal_handlers: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:43,124 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: ea83b916b3f52eec32ae6d54d59b4453
2024-11-14 21:34:43,124 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: ea83b916b3f52eec32ae6d54d59b4453 with key: docstring:v1:ea83b916b3f52eec32ae6d54d59b4453
2024-11-14 21:34:43,124 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: ea83b916b3f52eec32ae6d54d59b4453
2024-11-14 21:34:43,124 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:43,125 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:43,125 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:43,125 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:43,125 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:43,125 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:43,125 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:43,125 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: main
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Main entry point.
2024-11-14 21:34:43,126 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:44,514 - docstring_workflow - ERROR - logger - log_error - Error processing function main: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:44,514 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['signal_handler']
2024-11-14 21:34:44,515 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: c0fdebf656b89da65f8f76e2057774f7
2024-11-14 21:34:44,515 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: c0fdebf656b89da65f8f76e2057774f7 with key: docstring:v1:c0fdebf656b89da65f8f76e2057774f7
2024-11-14 21:34:44,515 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: c0fdebf656b89da65f8f76e2057774f7
2024-11-14 21:34:44,515 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:44,516 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:44,516 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:44,516 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:44,516 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:44,516 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:44,516 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:44,516 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: signal_handler
        Parameters: signum: Any, frame: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:34:44,516 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:45,875 - docstring_workflow - ERROR - logger - log_error - Error processing function signal_handler: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:45,881 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:34:45,881 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=6, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:34:45,881 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:34:45,881 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:34:45,881 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:34:45,881 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/main.py
2024-11-14 21:34:45,882 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/main.py'
2024-11-14 21:34:45,882 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpnr_h6iiz/simple/simple.py
2024-11-14 21:34:45,882 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpnr_h6iiz/simple/simple.py
2024-11-14 21:34:45,882 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpnr_h6iiz/simple/simple.py'
2024-11-14 21:34:45,903 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:34:45,903 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:34:45,904 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:34:45,904 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:34:45,904 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:34:45,905 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:34:45,905 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:34:45,911 - docstring_workflow - INFO - logger - log_info - Extracted 22 functions.
2024-11-14 21:34:45,911 - docstring_workflow - INFO - logger - log_info - Extracted 22 functions from source code.
2024-11-14 21:34:45,911 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['get_all_files', 'format_with_black', 'extract_classes_and_functions_from_ast', 'extract_functions', 'extract_basic_function_info']
2024-11-14 21:34:45,911 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 9610d0ae189c32fcfdbc93f452a8cd5c
2024-11-14 21:34:45,911 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 9610d0ae189c32fcfdbc93f452a8cd5c with key: docstring:v1:9610d0ae189c32fcfdbc93f452a8cd5c
2024-11-14 21:34:45,911 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 9610d0ae189c32fcfdbc93f452a8cd5c
2024-11-14 21:34:45,912 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:45,912 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:45,912 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:45,912 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:45,912 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:45,912 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:45,912 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:45,913 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_all_files
        Parameters: directory: Any, exclude_dirs: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:34:45,913 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:47,423 - docstring_workflow - ERROR - logger - log_error - Error processing function get_all_files: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:47,423 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f3960ab0d9879de8d2700df70f0eefad
2024-11-14 21:34:47,423 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f3960ab0d9879de8d2700df70f0eefad with key: docstring:v1:f3960ab0d9879de8d2700df70f0eefad
2024-11-14 21:34:47,423 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f3960ab0d9879de8d2700df70f0eefad
2024-11-14 21:34:47,424 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:47,424 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:47,424 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:47,424 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:47,424 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:47,424 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:47,424 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:47,425 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: format_with_black
        Parameters: file_content: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Attempt to format code using black.
2024-11-14 21:34:47,425 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:48,857 - docstring_workflow - ERROR - logger - log_error - Error processing function format_with_black: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:48,857 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 6918e3a706278e0511bffb7793e01115
2024-11-14 21:34:48,857 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 6918e3a706278e0511bffb7793e01115 with key: docstring:v1:6918e3a706278e0511bffb7793e01115
2024-11-14 21:34:48,857 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 6918e3a706278e0511bffb7793e01115
2024-11-14 21:34:48,858 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:48,858 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:48,858 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:48,858 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:48,858 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:48,859 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:48,859 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:48,859 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: extract_classes_and_functions_from_ast
        Parameters: tree: Any, content: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Extract class and function details from AST.
2024-11-14 21:34:48,859 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:50,159 - docstring_workflow - ERROR - logger - log_error - Error processing function extract_classes_and_functions_from_ast: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:50,159 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 05dd7bbf81a7ada1032a67a626d61cbf
2024-11-14 21:34:50,159 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 05dd7bbf81a7ada1032a67a626d61cbf with key: docstring:v1:05dd7bbf81a7ada1032a67a626d61cbf
2024-11-14 21:34:50,159 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 05dd7bbf81a7ada1032a67a626d61cbf
2024-11-14 21:34:50,162 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:50,162 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:50,162 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:50,162 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:50,162 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:50,162 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:50,163 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:50,163 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: extract_functions
        Parameters: file_content: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Extract functions and classes with enhanced error handling.
2024-11-14 21:34:50,163 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:51,448 - docstring_workflow - ERROR - logger - log_error - Error processing function extract_functions: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:51,448 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 0c78575d504034b425a62aa015b1133f
2024-11-14 21:34:51,448 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 0c78575d504034b425a62aa015b1133f with key: docstring:v1:0c78575d504034b425a62aa015b1133f
2024-11-14 21:34:51,449 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 0c78575d504034b425a62aa015b1133f
2024-11-14 21:34:51,449 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:51,449 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:51,449 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:51,450 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:51,450 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:51,450 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:51,450 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:51,450 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: extract_basic_function_info
        Parameters: content: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Extract basic function information when AST parsing fails.
2024-11-14 21:34:51,450 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:52,831 - docstring_workflow - ERROR - logger - log_error - Error processing function extract_basic_function_info: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:52,831 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['exponential_backoff_with_jitter', 'get_function_hash', 'format_parameters', 'create_error_response', 'analyze_function_with_openai']
2024-11-14 21:34:52,831 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 54790d96adb637ceae34829231632278
2024-11-14 21:34:52,831 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 54790d96adb637ceae34829231632278 with key: docstring:v1:54790d96adb637ceae34829231632278
2024-11-14 21:34:52,832 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 54790d96adb637ceae34829231632278
2024-11-14 21:34:52,832 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:52,832 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:52,832 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:52,833 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:52,833 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:52,833 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:52,833 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:52,833 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: exponential_backoff_with_jitter
        Parameters: func: Any, max_retries: Any, base_delay: Any, max_delay: Any
        Returns: Any
        Decorators: None
        Exceptions: e, Exception
        Existing docstring: None
2024-11-14 21:34:52,833 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:54,251 - docstring_workflow - ERROR - logger - log_error - Error processing function exponential_backoff_with_jitter: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:54,251 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 02887713b6a6cf450aa0a619726adff1
2024-11-14 21:34:54,252 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 02887713b6a6cf450aa0a619726adff1 with key: docstring:v1:02887713b6a6cf450aa0a619726adff1
2024-11-14 21:34:54,252 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 02887713b6a6cf450aa0a619726adff1
2024-11-14 21:34:54,252 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:54,252 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:54,253 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:54,253 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:54,253 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:54,253 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:54,253 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:54,253 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_function_hash
        Parameters: function_content: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:34:54,253 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:55,755 - docstring_workflow - ERROR - logger - log_error - Error processing function get_function_hash: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:55,755 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 3f61b8b0771d28c207efb36766f65b99
2024-11-14 21:34:55,755 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 3f61b8b0771d28c207efb36766f65b99 with key: docstring:v1:3f61b8b0771d28c207efb36766f65b99
2024-11-14 21:34:55,756 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 3f61b8b0771d28c207efb36766f65b99
2024-11-14 21:34:55,756 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:55,756 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:55,756 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:55,757 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:55,757 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:55,757 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:55,757 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:55,757 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: format_parameters
        Parameters: params: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:34:55,757 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:57,212 - docstring_workflow - ERROR - logger - log_error - Error processing function format_parameters: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:57,213 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 4743cf04df2ee6be40ccaf7e54be291a
2024-11-14 21:34:57,213 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 4743cf04df2ee6be40ccaf7e54be291a with key: docstring:v1:4743cf04df2ee6be40ccaf7e54be291a
2024-11-14 21:34:57,213 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 4743cf04df2ee6be40ccaf7e54be291a
2024-11-14 21:34:57,216 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:57,216 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:57,216 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:57,216 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:57,216 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:57,216 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:57,217 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:57,217 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: create_error_response
        Parameters: function_name: Any, error_message: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:34:57,217 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:34:58,550 - docstring_workflow - ERROR - logger - log_error - Error processing function create_error_response: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:34:58,551 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: ecddc6f4b5ee4385477b7b583e0296ab
2024-11-14 21:34:58,551 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: ecddc6f4b5ee4385477b7b583e0296ab with key: docstring:v1:ecddc6f4b5ee4385477b7b583e0296ab
2024-11-14 21:34:58,551 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: ecddc6f4b5ee4385477b7b583e0296ab
2024-11-14 21:34:58,554 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:34:58,554 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:34:58,554 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:34:58,554 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:34:58,554 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:34:58,554 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:34:58,554 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:34:58,555 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: analyze_function_with_openai
        Parameters: function_details: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:34:58,555 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:00,038 - docstring_workflow - ERROR - logger - log_error - Error processing function analyze_function_with_openai: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:35:00,038 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['parse_response', 'update_function_docstring', 'update_source_code', 'format_changelog', 'format_docstring']
2024-11-14 21:35:00,039 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: dd0c1eeaf4cb7be838657e244840da21
2024-11-14 21:35:00,039 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: dd0c1eeaf4cb7be838657e244840da21 with key: docstring:v1:dd0c1eeaf4cb7be838657e244840da21
2024-11-14 21:35:00,039 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: dd0c1eeaf4cb7be838657e244840da21
2024-11-14 21:35:00,039 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:00,040 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:00,040 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:00,040 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:00,040 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:00,040 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:00,040 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:00,041 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: parse_response
        Parameters: response_content: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:35:00,041 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:01,455 - docstring_workflow - ERROR - logger - log_error - Error processing function parse_response: SystemMonitor.log_request() got an unexpected keyword argument 'endpoint'
2024-11-14 21:35:01,456 - docstring_workflow - DEBUG - logger - log_debug - Cleaning up temporary directory: /tmp/tmpnr_h6iiz
2024-11-14 21:35:08,956 - docstring_workflow - DEBUG - logger - log_debug - Starting workflow for source path: https://github.com/henryperkins/auto-something
2024-11-14 21:35:08,978 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:35:08,978 - docstring_workflow - DEBUG - logger - log_debug - Cloning repository from URL: https://github.com/henryperkins/auto-something to temp directory: /tmp/tmpoo0pms30
2024-11-14 21:35:09,153 - docstring_workflow - DEBUG - logger - log_debug - Processing directory: /tmp/tmpoo0pms30
2024-11-14 21:35:09,153 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpoo0pms30/dependency_analyzer.py
2024-11-14 21:35:09,153 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpoo0pms30/dependency_analyzer.py
2024-11-14 21:35:09,153 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpoo0pms30/dependency_analyzer.py'
2024-11-14 21:35:09,175 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:35:09,175 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:35:09,175 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:35:09,176 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:35:09,177 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:35:09,177 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:35:09,177 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:35:09,179 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions.
2024-11-14 21:35:09,179 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions from source code.
2024-11-14 21:35:09,179 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__init__', '_extract_python_dependencies', '_extract_javascript_dependencies', 'get_module_dependencies', 'export_dependency_graph']
2024-11-14 21:35:09,179 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 92d525bbacb7d2bcc7a58bbe70ba5ad0
2024-11-14 21:35:09,179 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 92d525bbacb7d2bcc7a58bbe70ba5ad0 with key: docstring:v1:92d525bbacb7d2bcc7a58bbe70ba5ad0
2024-11-14 21:35:09,180 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 92d525bbacb7d2bcc7a58bbe70ba5ad0
2024-11-14 21:35:09,182 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:09,182 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:09,182 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:09,182 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:09,182 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:09,183 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:09,183 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:09,355 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, project_root: str, multilang_manager: Optional[MultiLanguageManager], hierarchy_manager: Optional[CodeHierarchy], context_manager: Optional[ContextManager]
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the DependencyAnalyzer.

Args:
    project_root: The root directory of the project
    multilang_manager: Optional multi-language support manager
    hierarchy_manager: Optional hierarchy management instance
    context_manager: Optional context management instance
2024-11-14 21:35:09,355 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:10,825 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:10,825 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 461c6439790fd423ac9dcc5f737b77d0
2024-11-14 21:35:10,825 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 461c6439790fd423ac9dcc5f737b77d0 with key: docstring:v1:461c6439790fd423ac9dcc5f737b77d0
2024-11-14 21:35:10,825 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 461c6439790fd423ac9dcc5f737b77d0
2024-11-14 21:35:10,826 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:10,826 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:10,826 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:10,826 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:10,827 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:10,827 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:10,827 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:10,827 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _extract_python_dependencies
        Parameters: self: Any, tree: ast.AST
        Returns: Dict[str, Set[str]]
        Decorators: None
        Exceptions: None
        Existing docstring: Extract dependencies from Python AST.
2024-11-14 21:35:10,827 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:12,246 - docstring_workflow - ERROR - logger - log_error - Error processing function _extract_python_dependencies: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:12,246 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f4857b58c1eae304f2012cb1931f40e0
2024-11-14 21:35:12,247 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f4857b58c1eae304f2012cb1931f40e0 with key: docstring:v1:f4857b58c1eae304f2012cb1931f40e0
2024-11-14 21:35:12,247 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f4857b58c1eae304f2012cb1931f40e0
2024-11-14 21:35:12,247 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:12,247 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:12,248 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:12,248 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:12,248 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:12,248 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:12,248 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:12,248 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _extract_javascript_dependencies
        Parameters: self: Any, content: str
        Returns: Dict[str, Set[str]]
        Decorators: None
        Exceptions: None
        Existing docstring: Extract dependencies from JavaScript code.
2024-11-14 21:35:12,248 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:13,530 - docstring_workflow - ERROR - logger - log_error - Error processing function _extract_javascript_dependencies: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:13,530 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 271e8811db99b7581b15bda400f5af39
2024-11-14 21:35:13,530 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 271e8811db99b7581b15bda400f5af39 with key: docstring:v1:271e8811db99b7581b15bda400f5af39
2024-11-14 21:35:13,530 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 271e8811db99b7581b15bda400f5af39
2024-11-14 21:35:13,531 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:13,531 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:13,531 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:13,531 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:13,531 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:13,531 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:13,531 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:13,532 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_module_dependencies
        Parameters: self: Any
        Returns: Dict[str, Set[str]]
        Decorators: None
        Exceptions: None
        Existing docstring: Get the mapping of modules to their dependencies.
2024-11-14 21:35:13,532 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:14,840 - docstring_workflow - ERROR - logger - log_error - Error processing function get_module_dependencies: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:14,840 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: d067fd84d5c99f70d4adaee2a2d7e310
2024-11-14 21:35:14,840 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: d067fd84d5c99f70d4adaee2a2d7e310 with key: docstring:v1:d067fd84d5c99f70d4adaee2a2d7e310
2024-11-14 21:35:14,840 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: d067fd84d5c99f70d4adaee2a2d7e310
2024-11-14 21:35:14,843 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:14,843 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:14,844 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:14,844 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:14,844 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:14,844 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:14,844 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:14,844 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: export_dependency_graph
        Parameters: self: Any, output_path: str
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Export dependency information as a JSON file.

Args:
    output_path: Path to save the dependency graph
2024-11-14 21:35:14,844 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:16,077 - docstring_workflow - ERROR - logger - log_error - Error processing function export_dependency_graph: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:16,077 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['merge_dependency_graphs']
2024-11-14 21:35:16,078 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 5daab0e4314b59dbbf9ef3186b246ff6
2024-11-14 21:35:16,078 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 5daab0e4314b59dbbf9ef3186b246ff6 with key: docstring:v1:5daab0e4314b59dbbf9ef3186b246ff6
2024-11-14 21:35:16,078 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 5daab0e4314b59dbbf9ef3186b246ff6
2024-11-14 21:35:16,078 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:16,079 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:16,079 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:16,079 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:16,079 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:16,079 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:16,079 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:16,079 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: merge_dependency_graphs
        Parameters: graphs: List[Dict[str, Any]]
        Returns: Dict[str, Any]
        Decorators: staticmethod
        Exceptions: None
        Existing docstring: Merge multiple dependency graphs.

Args:
    graphs: List of dependency graphs to merge
    
Returns:
    Merged dependency graph
2024-11-14 21:35:16,079 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:17,434 - docstring_workflow - ERROR - logger - log_error - Error processing function merge_dependency_graphs: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:17,438 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:35:17,438 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=6, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:35:17,438 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:35:17,438 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:35:17,438 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:35:17,438 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/dependency_analyzer.py
2024-11-14 21:35:17,438 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/dependency_analyzer.py'
2024-11-14 21:35:17,439 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpoo0pms30/utils.py
2024-11-14 21:35:17,439 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpoo0pms30/utils.py
2024-11-14 21:35:17,439 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpoo0pms30/utils.py'
2024-11-14 21:35:17,461 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:35:17,461 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:35:17,461 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:35:17,462 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:35:17,462 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:35:17,462 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:35:17,462 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:35:17,463 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions.
2024-11-14 21:35:17,464 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions from source code.
2024-11-14 21:35:17,464 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['get_all_files', 'format_with_black', 'get_function_hash', 'clone_repo', 'setup_logging']
2024-11-14 21:35:17,464 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 9610d0ae189c32fcfdbc93f452a8cd5c
2024-11-14 21:35:17,464 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 9610d0ae189c32fcfdbc93f452a8cd5c with key: docstring:v1:9610d0ae189c32fcfdbc93f452a8cd5c
2024-11-14 21:35:17,464 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 9610d0ae189c32fcfdbc93f452a8cd5c
2024-11-14 21:35:17,464 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:17,464 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:17,465 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:17,465 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:17,465 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:17,465 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:17,465 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:17,465 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_all_files
        Parameters: directory: Any, exclude_dirs: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Retrieve all Python files from a specified directory, excluding certain directories.

This function traverses the given directory recursively and collects paths to all Python
files, while excluding any directories specified in the `exclude_dirs` list.

Args:
    directory (str): The root directory to search for Python files.
    exclude_dirs (list, optional): A list of directory names to exclude from the search.
        Defaults to None, which means no directories are excluded.

Returns:
    list: A list of file paths to Python files found in the directory, excluding specified directories.

Raises:
    ValueError: If the provided directory does not exist or is not accessible.
2024-11-14 21:35:17,465 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:18,837 - docstring_workflow - ERROR - logger - log_error - Error processing function get_all_files: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:18,837 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f3960ab0d9879de8d2700df70f0eefad
2024-11-14 21:35:18,837 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f3960ab0d9879de8d2700df70f0eefad with key: docstring:v1:f3960ab0d9879de8d2700df70f0eefad
2024-11-14 21:35:18,838 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f3960ab0d9879de8d2700df70f0eefad
2024-11-14 21:35:18,838 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:18,838 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:18,838 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:18,838 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:18,839 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:18,839 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:18,839 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:18,839 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: format_with_black
        Parameters: file_content: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Format Python code using the Black code formatter.

This function attempts to format the provided Python source code string using Black,
a popular code formatter. If formatting is successful, the formatted code is returned.

Args:
    file_content (str): The Python source code to format.

Returns:
    tuple: A tuple containing a boolean indicating success and the formatted content.
        If formatting fails, the original content is returned.

Raises:
    ImportError: If the Black library is not installed.
    Exception: If any other error occurs during formatting.
2024-11-14 21:35:18,839 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:20,243 - docstring_workflow - ERROR - logger - log_error - Error processing function format_with_black: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:20,243 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 02887713b6a6cf450aa0a619726adff1
2024-11-14 21:35:20,243 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 02887713b6a6cf450aa0a619726adff1 with key: docstring:v1:02887713b6a6cf450aa0a619726adff1
2024-11-14 21:35:20,243 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 02887713b6a6cf450aa0a619726adff1
2024-11-14 21:35:20,244 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:20,244 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:20,244 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:20,244 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:20,244 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:20,245 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:20,245 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:20,245 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_function_hash
        Parameters: function_content: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Generate a SHA-256 hash for a function's content.

This function computes a SHA-256 hash of the provided function content string,
which can be used to uniquely identify the function based on its code.

Args:
    function_content (str): The content of the function to hash.

Returns:
    str: A SHA-256 hash of the function content.
2024-11-14 21:35:20,245 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:21,554 - docstring_workflow - ERROR - logger - log_error - Error processing function get_function_hash: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:21,554 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 019e46eae53ebe366160639c2df73b27
2024-11-14 21:35:21,554 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 019e46eae53ebe366160639c2df73b27 with key: docstring:v1:019e46eae53ebe366160639c2df73b27
2024-11-14 21:35:21,554 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 019e46eae53ebe366160639c2df73b27
2024-11-14 21:35:21,555 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:21,555 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:21,555 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:21,555 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:21,556 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:21,556 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:21,556 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:21,556 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: clone_repo
        Parameters: repo_url: Any, clone_dir: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Clone a Git repository to a specified local directory.

This function uses the Git command-line tool to clone a repository from the given URL
into the specified local directory. If the directory already exists, it is removed before cloning.

Args:
    repo_url (str): The URL of the Git repository to clone.
    clone_dir (str): The local directory to clone the repository into.

Raises:
    SystemExit: If the cloning process fails due to a Git error or other issues.
2024-11-14 21:35:21,556 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:22,871 - docstring_workflow - ERROR - logger - log_error - Error processing function clone_repo: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:22,871 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 9f7c2ab305c57d577dedbb6e0cfd7a2e
2024-11-14 21:35:22,871 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 9f7c2ab305c57d577dedbb6e0cfd7a2e with key: docstring:v1:9f7c2ab305c57d577dedbb6e0cfd7a2e
2024-11-14 21:35:22,871 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 9f7c2ab305c57d577dedbb6e0cfd7a2e
2024-11-14 21:35:22,874 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:22,874 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:22,874 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:22,874 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:22,874 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:22,874 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:22,874 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:22,875 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: setup_logging
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Configure logging settings for the application.

This function sets up the logging configuration to output log messages to both
the console and a log file named 'error.log'. The log level is set to INFO, and
the log format includes the timestamp, log level, and message.

Returns:
    None
2024-11-14 21:35:22,875 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:24,255 - docstring_workflow - ERROR - logger - log_error - Error processing function setup_logging: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:24,255 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['create_complexity_indicator']
2024-11-14 21:35:24,255 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 3b090873ab175dcc7d97c5b687ed0eb0
2024-11-14 21:35:24,256 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 3b090873ab175dcc7d97c5b687ed0eb0 with key: docstring:v1:3b090873ab175dcc7d97c5b687ed0eb0
2024-11-14 21:35:24,256 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 3b090873ab175dcc7d97c5b687ed0eb0
2024-11-14 21:35:24,256 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:24,256 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:24,257 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:24,257 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:24,257 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:24,257 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:24,257 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:24,257 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: create_complexity_indicator
        Parameters: complexity: Optional[int]
        Returns: str
        Decorators: None
        Exceptions: None
        Existing docstring: Create a visual indicator for code complexity.

Args:
    complexity (Optional[int]): An optional integer representing complexity.

Returns:
    str: A string representing the complexity level with an emoji.
2024-11-14 21:35:24,257 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:25,529 - docstring_workflow - ERROR - logger - log_error - Error processing function create_complexity_indicator: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:25,531 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:35:25,531 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=6, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:35:25,532 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:35:25,532 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:35:25,532 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:35:25,532 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/utils.py
2024-11-14 21:35:25,532 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/utils.py'
2024-11-14 21:35:25,532 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpoo0pms30/validation.py
2024-11-14 21:35:25,532 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpoo0pms30/validation.py
2024-11-14 21:35:25,532 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpoo0pms30/validation.py'
2024-11-14 21:35:25,553 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:35:25,553 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:35:25,553 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:35:25,554 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:35:25,554 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:35:25,554 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:35:25,554 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:35:25,557 - docstring_workflow - INFO - logger - log_info - Extracted 18 functions.
2024-11-14 21:35:25,557 - docstring_workflow - INFO - logger - log_info - Extracted 18 functions from source code.
2024-11-14 21:35:25,558 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['validate_input_files', 'validate_git_repository', 'validate_function_analysis_input', 'validate_docstring_content', 'validate_analysis_config']
2024-11-14 21:35:25,558 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 00f1db43d8d4427d2bee33e88d9c59ee
2024-11-14 21:35:25,558 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 00f1db43d8d4427d2bee33e88d9c59ee with key: docstring:v1:00f1db43d8d4427d2bee33e88d9c59ee
2024-11-14 21:35:25,558 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 00f1db43d8d4427d2bee33e88d9c59ee
2024-11-14 21:35:25,558 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:25,558 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:25,559 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:25,559 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:25,559 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:25,559 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:25,559 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:25,559 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_input_files
        Parameters: files: List[str]
        Returns: List[str]
        Decorators: None
        Exceptions: ValidationError
        Existing docstring: Validate a list of input files.

Args:
    files: List of file paths to validate
    
Returns:
    List of validated absolute file paths
    
Raises:
    ValidationError: If any file is invalid
2024-11-14 21:35:25,559 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:26,898 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_input_files: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:26,899 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 7c6feea887ee01fa771bfb4bb6c890d6
2024-11-14 21:35:26,899 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 7c6feea887ee01fa771bfb4bb6c890d6 with key: docstring:v1:7c6feea887ee01fa771bfb4bb6c890d6
2024-11-14 21:35:26,899 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 7c6feea887ee01fa771bfb4bb6c890d6
2024-11-14 21:35:26,899 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:26,900 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:26,900 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:26,900 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:26,900 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:26,900 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:26,900 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:26,901 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_git_repository
        Parameters: url: str, branch: Optional[str]
        Returns: GitRepoValidation
        Decorators: None
        Exceptions: ValidationError
        Existing docstring: Validate a Git repository URL and branch.

Args:
    url: Repository URL to validate
    branch: Optional branch name
    
Returns:
    Validated GitRepoValidation instance
    
Raises:
    ValidationError: If the repository URL or branch is invalid
2024-11-14 21:35:26,901 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:28,267 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_git_repository: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:28,267 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 7003c9b5e83b8a6feb581b52e1c6ad94
2024-11-14 21:35:28,267 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 7003c9b5e83b8a6feb581b52e1c6ad94 with key: docstring:v1:7003c9b5e83b8a6feb581b52e1c6ad94
2024-11-14 21:35:28,267 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 7003c9b5e83b8a6feb581b52e1c6ad94
2024-11-14 21:35:28,268 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:28,268 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:28,268 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:28,268 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:28,268 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:28,268 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:28,268 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:28,269 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_function_analysis_input
        Parameters: func_data: Dict[str, Any]
        Returns: FunctionAnalysisInput
        Decorators: None
        Exceptions: ValidationError
        Existing docstring: Validate function analysis input data.

Args:
    func_data: Dictionary containing function data to validate
    
Returns:
    Validated FunctionAnalysisInput instance
    
Raises:
    ValidationError: If the input data is invalid
2024-11-14 21:35:28,269 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:29,658 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_function_analysis_input: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:29,658 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 4b450775414601e2325c1f23891ae615
2024-11-14 21:35:29,658 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 4b450775414601e2325c1f23891ae615 with key: docstring:v1:4b450775414601e2325c1f23891ae615
2024-11-14 21:35:29,659 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 4b450775414601e2325c1f23891ae615
2024-11-14 21:35:29,659 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:29,659 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:29,659 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:29,660 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:29,660 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:29,660 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:29,660 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:29,660 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_docstring_content
        Parameters: content: Dict[str, Any]
        Returns: DocstringValidation
        Decorators: None
        Exceptions: ValidationError
        Existing docstring: Validate docstring content.

Args:
    content: Dictionary containing docstring content to validate
    
Returns:
    Validated DocstringValidation instance
    
Raises:
    ValidationError: If the docstring content is invalid
2024-11-14 21:35:29,660 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:31,075 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_docstring_content: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:31,076 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 15981ffc90779b324885d50b6b995499
2024-11-14 21:35:31,076 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 15981ffc90779b324885d50b6b995499 with key: docstring:v1:15981ffc90779b324885d50b6b995499
2024-11-14 21:35:31,076 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 15981ffc90779b324885d50b6b995499
2024-11-14 21:35:31,079 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:31,079 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:31,079 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:31,079 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:31,079 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:31,079 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:31,079 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:31,080 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_analysis_config
        Parameters: config: Dict[str, Any]
        Returns: AnalysisConfiguration
        Decorators: None
        Exceptions: ValidationError
        Existing docstring: Validate analysis configuration.

Args:
    config: Dictionary containing configuration settings to validate
    
Returns:
    Validated AnalysisConfiguration instance
    
Raises:
    ValidationError: If the configuration is invalid
2024-11-14 21:35:31,080 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:32,403 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_analysis_config: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:32,403 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['validate_service_configuration', 'validate_context_code_segments', 'validate_metadata', 'validate_token_limits', 'validate_path']
2024-11-14 21:35:32,403 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 96de3999ae8c2f0756e8dc20bdc9758a
2024-11-14 21:35:32,403 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 96de3999ae8c2f0756e8dc20bdc9758a with key: docstring:v1:96de3999ae8c2f0756e8dc20bdc9758a
2024-11-14 21:35:32,404 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 96de3999ae8c2f0756e8dc20bdc9758a
2024-11-14 21:35:32,404 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:32,404 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:32,405 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:32,405 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:32,405 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:32,405 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:32,405 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:32,405 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_service_configuration
        Parameters: service: str
        Returns: None
        Decorators: None
        Exceptions: ValidationError
        Existing docstring: Validate that required environment variables are set for the selected service.
2024-11-14 21:35:32,405 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:33,671 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_service_configuration: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:33,671 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 43e0742a9da0cccb6716cc1e08e27205
2024-11-14 21:35:33,671 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 43e0742a9da0cccb6716cc1e08e27205 with key: docstring:v1:43e0742a9da0cccb6716cc1e08e27205
2024-11-14 21:35:33,672 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 43e0742a9da0cccb6716cc1e08e27205
2024-11-14 21:35:33,672 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:33,672 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:33,673 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:33,673 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:33,673 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:33,673 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:33,673 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:33,673 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_context_code_segments
        Parameters: context_code_segments: List[str], max_context_tokens: int, model_name: str
        Returns: List[str]
        Decorators: None
        Exceptions: None
        Existing docstring: Validate and select context code segments within token limits.
2024-11-14 21:35:33,673 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:35,004 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_context_code_segments: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:35,004 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 94c829edb0e4a03b6a390ea627c72df7
2024-11-14 21:35:35,004 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 94c829edb0e4a03b6a390ea627c72df7 with key: docstring:v1:94c829edb0e4a03b6a390ea627c72df7
2024-11-14 21:35:35,004 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 94c829edb0e4a03b6a390ea627c72df7
2024-11-14 21:35:35,005 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:35,005 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:35,005 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:35,005 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:35,006 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:35,006 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:35,006 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:35,006 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_metadata
        Parameters: metadata: Dict[str, Any]
        Returns: str
        Decorators: None
        Exceptions: ValidationError
        Existing docstring: Validate and format metadata for inclusion in prompts.
2024-11-14 21:35:35,006 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:36,385 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_metadata: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:36,385 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: e2cbc6373908dbdeafb97132f1a5d834
2024-11-14 21:35:36,385 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: e2cbc6373908dbdeafb97132f1a5d834 with key: docstring:v1:e2cbc6373908dbdeafb97132f1a5d834
2024-11-14 21:35:36,385 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: e2cbc6373908dbdeafb97132f1a5d834
2024-11-14 21:35:36,386 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:36,386 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:36,386 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:36,386 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:36,386 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:36,387 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:36,387 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:36,387 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_token_limits
        Parameters: context_window: int, max_response_tokens: int, system_prompt_tokens: int
        Returns: int
        Decorators: None
        Exceptions: None
        Existing docstring: Validate and calculate available prompt tokens.
2024-11-14 21:35:36,387 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:37,710 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_token_limits: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:37,710 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: dd145893cf5857b2d33efe26bedceed7
2024-11-14 21:35:37,710 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: dd145893cf5857b2d33efe26bedceed7 with key: docstring:v1:dd145893cf5857b2d33efe26bedceed7
2024-11-14 21:35:37,710 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: dd145893cf5857b2d33efe26bedceed7
2024-11-14 21:35:37,711 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:37,711 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:37,712 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:37,713 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:37,713 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:37,713 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:37,713 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:37,713 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_path
        Parameters: self: Any
        Returns: str
        Decorators: property
        Exceptions: ValidationError
        Existing docstring: Validate that the path exists and return its absolute path.

Returns:
    str: The absolute path if valid.

Raises:
    ValidationError: If the path does not exist.
2024-11-14 21:35:37,713 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:39,190 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_path: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:39,190 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['validate_git_url', 'validate_module_name', 'validate_dict_list', 'validate_code', 'validate_params']
2024-11-14 21:35:39,191 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 988308cbc58e2ec6bca1b8a25241f0a2
2024-11-14 21:35:39,191 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 988308cbc58e2ec6bca1b8a25241f0a2 with key: docstring:v1:988308cbc58e2ec6bca1b8a25241f0a2
2024-11-14 21:35:39,191 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 988308cbc58e2ec6bca1b8a25241f0a2
2024-11-14 21:35:39,194 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:39,194 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:39,194 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:39,194 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:39,194 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:39,195 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:39,195 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:39,195 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_git_url
        Parameters: self: Any
        Returns: HttpUrl
        Decorators: property
        Exceptions: ValidationError
        Existing docstring: Validate that the URL is a valid Git repository URL.

Returns:
    HttpUrl: The validated Git repository URL.

Raises:
    ValidationError: If the URL is not a valid Git repository URL.
2024-11-14 21:35:39,195 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:40,529 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_git_url: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:40,529 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: bfe78a2471a17ff0218ff2565f950e18
2024-11-14 21:35:40,529 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: bfe78a2471a17ff0218ff2565f950e18 with key: docstring:v1:bfe78a2471a17ff0218ff2565f950e18
2024-11-14 21:35:40,529 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: bfe78a2471a17ff0218ff2565f950e18
2024-11-14 21:35:40,530 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:40,530 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:40,530 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:40,531 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:40,531 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:40,531 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:40,531 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:40,531 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_module_name
        Parameters: cls: Any, v: Any
        Returns: Any
        Decorators: validator('module')
        Exceptions: ValidationError
        Existing docstring: Validate module name format.
2024-11-14 21:35:40,531 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:41,941 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_module_name: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:41,941 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 40dabbcdd1380e6284fbe4265d1503ff
2024-11-14 21:35:41,941 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 40dabbcdd1380e6284fbe4265d1503ff with key: docstring:v1:40dabbcdd1380e6284fbe4265d1503ff
2024-11-14 21:35:41,941 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 40dabbcdd1380e6284fbe4265d1503ff
2024-11-14 21:35:41,942 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:41,942 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:41,942 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:41,942 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:41,942 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:41,942 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:41,943 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:41,943 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_dict_list
        Parameters: cls: Any, v: Any
        Returns: Any
        Decorators: validator('raises', 'affects', 'uses')
        Exceptions: ValidationError
        Existing docstring: Validate dictionary lists have required keys.
2024-11-14 21:35:41,943 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:43,270 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_dict_list: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:43,271 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: afcd76d2b53d9728da21f47ed0c6ad4b
2024-11-14 21:35:43,271 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: afcd76d2b53d9728da21f47ed0c6ad4b with key: docstring:v1:afcd76d2b53d9728da21f47ed0c6ad4b
2024-11-14 21:35:43,271 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: afcd76d2b53d9728da21f47ed0c6ad4b
2024-11-14 21:35:43,271 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:43,272 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:43,272 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:43,272 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:43,272 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:43,272 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:43,272 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:43,273 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_code
        Parameters: self: Any
        Returns: str
        Decorators: property
        Exceptions: ValidationError
        Existing docstring: Validate that the code is not empty.
2024-11-14 21:35:43,273 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:44,703 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_code: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:44,703 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: ae1627da380e0fd27bac274fa578672e
2024-11-14 21:35:44,704 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: ae1627da380e0fd27bac274fa578672e with key: docstring:v1:ae1627da380e0fd27bac274fa578672e
2024-11-14 21:35:44,704 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: ae1627da380e0fd27bac274fa578672e
2024-11-14 21:35:44,704 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:44,705 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:44,705 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:44,705 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:44,705 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:44,705 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:44,705 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:44,705 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_params
        Parameters: self: Any
        Returns: List[Tuple[str, str]]
        Decorators: property
        Exceptions: ValidationError
        Existing docstring: Validate parameter format.
2024-11-14 21:35:44,706 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:46,091 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_params: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:46,092 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['validate_output_file', 'validate_args', 'validate_patterns']
2024-11-14 21:35:46,092 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 7d32779bdce1117e0c5ebb6174d123bc
2024-11-14 21:35:46,092 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 7d32779bdce1117e0c5ebb6174d123bc with key: docstring:v1:7d32779bdce1117e0c5ebb6174d123bc
2024-11-14 21:35:46,092 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 7d32779bdce1117e0c5ebb6174d123bc
2024-11-14 21:35:46,095 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:46,095 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:46,095 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:46,095 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:46,095 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:46,095 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:46,095 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:46,096 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_output_file
        Parameters: self: Any
        Returns: str
        Decorators: property
        Exceptions: ValidationError
        Existing docstring: Validate output file path is writable.
2024-11-14 21:35:46,096 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:47,448 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_output_file: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:47,449 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: b829e915da401dca02e3fb2cd20d7f74
2024-11-14 21:35:47,449 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: b829e915da401dca02e3fb2cd20d7f74 with key: docstring:v1:b829e915da401dca02e3fb2cd20d7f74
2024-11-14 21:35:47,449 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: b829e915da401dca02e3fb2cd20d7f74
2024-11-14 21:35:47,450 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:47,450 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:47,450 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:47,450 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:47,450 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:47,450 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:47,451 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:47,451 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_args
        Parameters: self: Any
        Returns: Dict[str, str]
        Decorators: property
        Exceptions: ValidationError
        Existing docstring: Validate argument descriptions.
2024-11-14 21:35:47,451 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:48,958 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_args: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:48,958 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 2d67323c9969a7fe5a56210482882757
2024-11-14 21:35:48,958 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 2d67323c9969a7fe5a56210482882757 with key: docstring:v1:2d67323c9969a7fe5a56210482882757
2024-11-14 21:35:48,959 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 2d67323c9969a7fe5a56210482882757
2024-11-14 21:35:48,959 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:48,959 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:48,960 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:48,960 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:48,960 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:48,960 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:48,960 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:48,960 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_patterns
        Parameters: self: Any
        Returns: List[str]
        Decorators: property
        Exceptions: ValidationError
        Existing docstring: Validate regex patterns are valid.
2024-11-14 21:35:48,960 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:50,386 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_patterns: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:50,392 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:35:50,392 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=18, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:35:50,392 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:35:50,393 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:35:50,393 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:35:50,393 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/validation.py
2024-11-14 21:35:50,393 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/validation.py'
2024-11-14 21:35:50,393 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpoo0pms30/context_optimizer.py
2024-11-14 21:35:50,393 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpoo0pms30/context_optimizer.py
2024-11-14 21:35:50,393 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpoo0pms30/context_optimizer.py'
2024-11-14 21:35:50,416 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:35:50,416 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:35:50,416 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:35:50,417 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:35:50,417 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:35:50,417 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:35:50,417 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:35:50,420 - docstring_workflow - INFO - logger - log_info - Extracted 3 functions.
2024-11-14 21:35:50,420 - docstring_workflow - INFO - logger - log_info - Extracted 3 functions from source code.
2024-11-14 21:35:50,420 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__init__', '__init__', '__init__']
2024-11-14 21:35:50,420 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: c2493567ec1213cfa3fcc0cbf2ce42c1
2024-11-14 21:35:50,420 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: c2493567ec1213cfa3fcc0cbf2ce42c1 with key: docstring:v1:c2493567ec1213cfa3fcc0cbf2ce42c1
2024-11-14 21:35:50,420 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: c2493567ec1213cfa3fcc0cbf2ce42c1
2024-11-14 21:35:50,421 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:50,421 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:50,421 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:50,421 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:50,421 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:50,421 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:50,421 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:50,421 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, model_name: str
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the token predictor.
2024-11-14 21:35:50,422 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:51,888 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:51,888 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 74784b5204978384eb3ee3f65036a1c7
2024-11-14 21:35:51,888 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 74784b5204978384eb3ee3f65036a1c7 with key: docstring:v1:74784b5204978384eb3ee3f65036a1c7
2024-11-14 21:35:51,888 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 74784b5204978384eb3ee3f65036a1c7
2024-11-14 21:35:51,889 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:51,889 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:51,889 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:51,889 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:51,889 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:51,889 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:51,889 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:51,890 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the context prioritizer.
2024-11-14 21:35:51,890 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:53,306 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:53,306 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 28bdb886cdb568a4843dc437f72f4873
2024-11-14 21:35:53,306 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 28bdb886cdb568a4843dc437f72f4873 with key: docstring:v1:28bdb886cdb568a4843dc437f72f4873
2024-11-14 21:35:53,306 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 28bdb886cdb568a4843dc437f72f4873
2024-11-14 21:35:53,307 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:53,307 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:53,307 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:53,307 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:53,307 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:53,308 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:53,308 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:53,308 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, model_name: str, max_tokens: int, target_token_usage: float
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the context window manager.

Args:
    model_name: Name of the model for tokenization
    max_tokens: Maximum tokens allowed in context
    target_token_usage: Target proportion of max_tokens to use
2024-11-14 21:35:53,308 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:54,548 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:54,552 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:35:54,552 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=3, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:35:54,552 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:35:54,553 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:35:54,553 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:35:54,553 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/context_optimizer.py
2024-11-14 21:35:54,553 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/context_optimizer.py'
2024-11-14 21:35:54,553 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpoo0pms30/exceptions.py
2024-11-14 21:35:54,553 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpoo0pms30/exceptions.py
2024-11-14 21:35:54,553 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpoo0pms30/exceptions.py'
2024-11-14 21:35:54,575 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:35:54,575 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:35:54,575 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:35:54,576 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:35:54,576 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:35:54,576 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:35:54,576 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:35:54,576 - docstring_workflow - INFO - logger - log_info - Extracted 0 functions.
2024-11-14 21:35:54,576 - docstring_workflow - INFO - logger - log_info - Extracted 0 functions from source code.
2024-11-14 21:35:54,576 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:35:54,577 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=0, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:35:54,577 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:35:54,577 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:35:54,577 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:35:54,577 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/exceptions.py
2024-11-14 21:35:54,577 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/exceptions.py'
2024-11-14 21:35:54,577 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpoo0pms30/metadata_manager.py
2024-11-14 21:35:54,577 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpoo0pms30/metadata_manager.py
2024-11-14 21:35:54,577 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpoo0pms30/metadata_manager.py'
2024-11-14 21:35:54,599 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:35:54,599 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:35:54,599 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:35:54,600 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:35:54,600 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:35:54,600 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:35:54,600 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:35:54,604 - docstring_workflow - INFO - logger - log_info - Extracted 14 functions.
2024-11-14 21:35:54,604 - docstring_workflow - INFO - logger - log_info - Extracted 14 functions from source code.
2024-11-14 21:35:54,604 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__post_init__', '__init__', '_init_db', '_get_connection', '_start_background_flush']
2024-11-14 21:35:54,604 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: c0e8002f3d69f901bc40bdc1d4a1b239
2024-11-14 21:35:54,604 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: c0e8002f3d69f901bc40bdc1d4a1b239 with key: docstring:v1:c0e8002f3d69f901bc40bdc1d4a1b239
2024-11-14 21:35:54,605 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: c0e8002f3d69f901bc40bdc1d4a1b239
2024-11-14 21:35:54,607 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:54,607 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:54,608 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:54,608 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:54,608 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:54,608 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:54,608 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:54,608 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __post_init__
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize default values.
2024-11-14 21:35:54,608 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:55,994 - docstring_workflow - ERROR - logger - log_error - Error processing function __post_init__: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:55,994 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: cb99e304d1a8b88301f95a4b38537105
2024-11-14 21:35:55,994 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: cb99e304d1a8b88301f95a4b38537105 with key: docstring:v1:cb99e304d1a8b88301f95a4b38537105
2024-11-14 21:35:55,994 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: cb99e304d1a8b88301f95a4b38537105
2024-11-14 21:35:55,995 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:55,995 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:55,995 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:55,995 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:55,995 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:55,995 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:55,995 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:55,996 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, db_path: str, batch_size: int
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the metadata manager.

Args:
    db_path: Path to SQLite database
    batch_size: Size of batch operations
2024-11-14 21:35:55,996 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:57,182 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:57,183 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 0ce7f2a2711e92611e8391b2f99432d4
2024-11-14 21:35:57,183 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 0ce7f2a2711e92611e8391b2f99432d4 with key: docstring:v1:0ce7f2a2711e92611e8391b2f99432d4
2024-11-14 21:35:57,183 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 0ce7f2a2711e92611e8391b2f99432d4
2024-11-14 21:35:57,184 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:57,184 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:57,184 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:57,184 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:57,184 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:57,184 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:57,184 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:57,185 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _init_db
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize database schema.
2024-11-14 21:35:57,185 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:58,545 - docstring_workflow - ERROR - logger - log_error - Error processing function _init_db: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:58,545 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: c2a498d09c49c0fb33483ffec219b59d
2024-11-14 21:35:58,545 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: c2a498d09c49c0fb33483ffec219b59d with key: docstring:v1:c2a498d09c49c0fb33483ffec219b59d
2024-11-14 21:35:58,545 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: c2a498d09c49c0fb33483ffec219b59d
2024-11-14 21:35:58,546 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:58,546 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:58,546 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:58,546 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:58,546 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:58,547 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:58,547 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:58,547 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _get_connection
        Parameters: self: Any
        Returns: Any
        Decorators: contextmanager
        Exceptions: None
        Existing docstring: Context manager for database connections.
2024-11-14 21:35:58,547 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:35:59,782 - docstring_workflow - ERROR - logger - log_error - Error processing function _get_connection: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:35:59,782 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f17fab3f55ae675925815c68d68ecb9f
2024-11-14 21:35:59,782 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f17fab3f55ae675925815c68d68ecb9f with key: docstring:v1:f17fab3f55ae675925815c68d68ecb9f
2024-11-14 21:35:59,782 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f17fab3f55ae675925815c68d68ecb9f
2024-11-14 21:35:59,783 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:35:59,783 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:35:59,783 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:35:59,783 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:35:59,783 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:35:59,783 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:35:59,783 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:35:59,784 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _start_background_flush
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Start background thread for flushing updates.
2024-11-14 21:35:59,784 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:01,085 - docstring_workflow - ERROR - logger - log_error - Error processing function _start_background_flush: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:01,085 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['_background_flush', 'add_or_update_entry', 'get_entry', '_row_to_entry', 'flush']
2024-11-14 21:36:01,085 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 7b7f586d3dc6c7ced049414a9b2fe7b6
2024-11-14 21:36:01,085 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 7b7f586d3dc6c7ced049414a9b2fe7b6 with key: docstring:v1:7b7f586d3dc6c7ced049414a9b2fe7b6
2024-11-14 21:36:01,085 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 7b7f586d3dc6c7ced049414a9b2fe7b6
2024-11-14 21:36:01,086 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:01,086 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:01,086 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:01,086 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:01,086 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:01,086 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:01,086 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:01,087 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _background_flush
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Background thread for periodic flushing of updates.
2024-11-14 21:36:01,087 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:02,434 - docstring_workflow - ERROR - logger - log_error - Error processing function _background_flush: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:02,434 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 241cded7b15503e5723124feba33a277
2024-11-14 21:36:02,434 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 241cded7b15503e5723124feba33a277 with key: docstring:v1:241cded7b15503e5723124feba33a277
2024-11-14 21:36:02,435 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 241cded7b15503e5723124feba33a277
2024-11-14 21:36:02,437 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:02,438 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:02,438 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:02,438 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:02,438 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:02,438 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:02,438 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:02,438 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: add_or_update_entry
        Parameters: self: Any, entry: MetadataEntry
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Add or update a metadata entry.
2024-11-14 21:36:02,439 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:03,754 - docstring_workflow - ERROR - logger - log_error - Error processing function add_or_update_entry: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:03,754 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 5bf00a1140aeaaaa7f78f697edbb2c77
2024-11-14 21:36:03,754 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 5bf00a1140aeaaaa7f78f697edbb2c77 with key: docstring:v1:5bf00a1140aeaaaa7f78f697edbb2c77
2024-11-14 21:36:03,754 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 5bf00a1140aeaaaa7f78f697edbb2c77
2024-11-14 21:36:03,755 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:03,755 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:03,755 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:03,755 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:03,755 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:03,756 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:03,756 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:03,756 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_entry
        Parameters: self: Any, segment_id: str
        Returns: Optional[MetadataEntry]
        Decorators: None
        Exceptions: None
        Existing docstring: Retrieve a metadata entry.
2024-11-14 21:36:03,756 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:05,202 - docstring_workflow - ERROR - logger - log_error - Error processing function get_entry: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:05,202 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 90323cd2cf32fd1c82d0cce15721690a
2024-11-14 21:36:05,202 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 90323cd2cf32fd1c82d0cce15721690a with key: docstring:v1:90323cd2cf32fd1c82d0cce15721690a
2024-11-14 21:36:05,202 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 90323cd2cf32fd1c82d0cce15721690a
2024-11-14 21:36:05,203 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:05,203 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:05,203 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:05,203 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:05,203 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:05,203 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:05,204 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:05,204 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _row_to_entry
        Parameters: self: Any, row: Any
        Returns: MetadataEntry
        Decorators: None
        Exceptions: None
        Existing docstring: Convert database row to MetadataEntry.
2024-11-14 21:36:05,204 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:06,585 - docstring_workflow - ERROR - logger - log_error - Error processing function _row_to_entry: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:06,585 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: be146677d6c196849c9707da5f5a7403
2024-11-14 21:36:06,585 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: be146677d6c196849c9707da5f5a7403 with key: docstring:v1:be146677d6c196849c9707da5f5a7403
2024-11-14 21:36:06,585 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: be146677d6c196849c9707da5f5a7403
2024-11-14 21:36:06,586 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:06,586 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:06,586 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:06,586 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:06,586 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:06,587 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:06,587 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:06,587 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: flush
        Parameters: self: Any
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Flush pending updates to database.
2024-11-14 21:36:06,587 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:08,042 - docstring_workflow - ERROR - logger - log_error - Error processing function flush: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:08,043 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['cleanup', 'query_by_language', 'query_by_hierarchy', '_recover_corrupted_entry']
2024-11-14 21:36:08,043 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: a778db16896e59fa010f0452110dd7c7
2024-11-14 21:36:08,043 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: a778db16896e59fa010f0452110dd7c7 with key: docstring:v1:a778db16896e59fa010f0452110dd7c7
2024-11-14 21:36:08,043 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: a778db16896e59fa010f0452110dd7c7
2024-11-14 21:36:08,044 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:08,044 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:08,044 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:08,044 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:08,044 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:08,045 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:08,045 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:08,045 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: cleanup
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Clean up resources.
2024-11-14 21:36:08,045 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:09,495 - docstring_workflow - ERROR - logger - log_error - Error processing function cleanup: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:09,496 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 4f19055b4ae9d830eb8501b1496e9b86
2024-11-14 21:36:09,496 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 4f19055b4ae9d830eb8501b1496e9b86 with key: docstring:v1:4f19055b4ae9d830eb8501b1496e9b86
2024-11-14 21:36:09,496 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 4f19055b4ae9d830eb8501b1496e9b86
2024-11-14 21:36:09,497 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:09,497 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:09,497 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:09,497 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:09,497 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:09,497 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:09,497 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:09,498 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: query_by_language
        Parameters: self: Any, language: str
        Returns: List[MetadataEntry]
        Decorators: None
        Exceptions: None
        Existing docstring: Query entries by programming language.
2024-11-14 21:36:09,498 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:10,771 - docstring_workflow - ERROR - logger - log_error - Error processing function query_by_language: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:10,771 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 73336407ad38aa159010aeed6073ca18
2024-11-14 21:36:10,771 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 73336407ad38aa159010aeed6073ca18 with key: docstring:v1:73336407ad38aa159010aeed6073ca18
2024-11-14 21:36:10,772 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 73336407ad38aa159010aeed6073ca18
2024-11-14 21:36:10,775 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:10,775 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:10,775 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:10,775 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:10,775 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:10,775 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:10,775 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:10,776 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: query_by_hierarchy
        Parameters: self: Any, path_prefix: str
        Returns: List[MetadataEntry]
        Decorators: None
        Exceptions: None
        Existing docstring: Query entries by hierarchy path prefix.
2024-11-14 21:36:10,776 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:12,135 - docstring_workflow - ERROR - logger - log_error - Error processing function query_by_hierarchy: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:12,135 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 6a0726d59caf18df8aef39dee4e86883
2024-11-14 21:36:12,135 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 6a0726d59caf18df8aef39dee4e86883 with key: docstring:v1:6a0726d59caf18df8aef39dee4e86883
2024-11-14 21:36:12,136 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 6a0726d59caf18df8aef39dee4e86883
2024-11-14 21:36:12,136 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:12,136 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:12,137 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:12,137 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:12,137 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:12,137 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:12,137 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:12,137 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _recover_corrupted_entry
        Parameters: self: Any, segment_id: str
        Returns: Optional[MetadataEntry]
        Decorators: None
        Exceptions: None
        Existing docstring: Attempt to recover corrupted metadata entry.
2024-11-14 21:36:12,138 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:13,497 - docstring_workflow - ERROR - logger - log_error - Error processing function _recover_corrupted_entry: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:13,501 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:36:13,501 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=14, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:36:13,502 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:36:13,502 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:36:13,502 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:36:13,502 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/metadata_manager.py
2024-11-14 21:36:13,502 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/metadata_manager.py'
2024-11-14 21:36:13,502 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpoo0pms30/workflow.py
2024-11-14 21:36:13,502 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpoo0pms30/workflow.py
2024-11-14 21:36:13,502 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpoo0pms30/workflow.py'
2024-11-14 21:36:13,524 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:36:13,524 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:36:13,524 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:36:13,525 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:36:13,525 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:36:13,525 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:36:13,525 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:36:13,527 - docstring_workflow - INFO - logger - log_info - Extracted 1 functions.
2024-11-14 21:36:13,527 - docstring_workflow - INFO - logger - log_info - Extracted 1 functions from source code.
2024-11-14 21:36:13,527 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['write_analysis_to_markdown']
2024-11-14 21:36:13,527 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 66d79e58d6d0b47733ce51758ebd7900
2024-11-14 21:36:13,527 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 66d79e58d6d0b47733ce51758ebd7900 with key: docstring:v1:66d79e58d6d0b47733ce51758ebd7900
2024-11-14 21:36:13,527 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 66d79e58d6d0b47733ce51758ebd7900
2024-11-14 21:36:13,528 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:13,528 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:13,528 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:13,528 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:13,528 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:13,528 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:13,529 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:13,529 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: write_analysis_to_markdown
        Parameters: results: Dict[str, Dict], output_file_path: str, repo_dir: str
        Returns: None
        Decorators: None
        Exceptions: WorkflowError
        Existing docstring: Write analysis results to a markdown file.

Args:
    results: Analysis results to write
    output_file_path: Path to output file
    repo_dir: Repository directory path

Raises:
    WorkflowError: If writing fails
2024-11-14 21:36:13,529 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:14,942 - docstring_workflow - ERROR - logger - log_error - Error processing function write_analysis_to_markdown: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:14,945 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:36:14,945 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=1, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:36:14,945 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:36:14,946 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:36:14,946 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:36:14,946 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/workflow.py
2024-11-14 21:36:14,946 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/workflow.py'
2024-11-14 21:36:14,946 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpoo0pms30/config.py
2024-11-14 21:36:14,946 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpoo0pms30/config.py
2024-11-14 21:36:14,946 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpoo0pms30/config.py'
2024-11-14 21:36:14,967 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:36:14,967 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:36:14,968 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:36:14,968 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:36:14,968 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:36:14,968 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:36:14,968 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:36:14,972 - docstring_workflow - INFO - logger - log_info - Extracted 11 functions.
2024-11-14 21:36:14,972 - docstring_workflow - INFO - logger - log_info - Extracted 11 functions from source code.
2024-11-14 21:36:14,972 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['resolve_env_variables', 'create_default_config', 'from_dict', 'validate_dsn_if_enabled', 'validate_model']
2024-11-14 21:36:14,972 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: dd9fa54f51a0c254c6f4dbe61098d6a7
2024-11-14 21:36:14,973 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: dd9fa54f51a0c254c6f4dbe61098d6a7 with key: docstring:v1:dd9fa54f51a0c254c6f4dbe61098d6a7
2024-11-14 21:36:14,973 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: dd9fa54f51a0c254c6f4dbe61098d6a7
2024-11-14 21:36:14,973 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:14,973 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:14,973 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:14,974 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:14,974 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:14,974 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:14,974 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:14,974 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: resolve_env_variables
        Parameters: config_dict: dict
        Returns: dict
        Decorators: None
        Exceptions: None
        Existing docstring: Recursively resolve environment variables in the configuration dictionary.

Replaces placeholders like ${VAR_NAME} with the actual environment variable values.
2024-11-14 21:36:14,974 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:16,398 - docstring_workflow - ERROR - logger - log_error - Error processing function resolve_env_variables: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:16,398 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 0653540e388bcedfa427a8997823248a
2024-11-14 21:36:16,398 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 0653540e388bcedfa427a8997823248a with key: docstring:v1:0653540e388bcedfa427a8997823248a
2024-11-14 21:36:16,398 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 0653540e388bcedfa427a8997823248a
2024-11-14 21:36:16,399 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:16,399 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:16,399 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:16,399 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:16,400 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:16,400 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:16,400 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:16,400 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: create_default_config
        Parameters: path: str
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Create a default configuration file.

Args:
    path: Path where to create the configuration file
2024-11-14 21:36:16,400 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:17,677 - docstring_workflow - ERROR - logger - log_error - Error processing function create_default_config: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:17,678 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 61065229154bef3ffa8e61dc58e630b1
2024-11-14 21:36:17,678 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 61065229154bef3ffa8e61dc58e630b1 with key: docstring:v1:61065229154bef3ffa8e61dc58e630b1
2024-11-14 21:36:17,678 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 61065229154bef3ffa8e61dc58e630b1
2024-11-14 21:36:17,679 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:17,679 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:17,679 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:17,679 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:17,679 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:17,680 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:17,680 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:17,680 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: from_dict
        Parameters: cls: Any, data: Dict[str, Any], env_prefix: str
        Returns: 'BaseConfigModel'
        Decorators: classmethod
        Exceptions: None
        Existing docstring: Create an instance from a dictionary, supporting environment variables.

Args:
    data: Configuration dictionary
    env_prefix: Prefix for environment variables
    
Returns:
    Instance of the configuration model
2024-11-14 21:36:17,680 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:18,955 - docstring_workflow - ERROR - logger - log_error - Error processing function from_dict: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:18,955 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: d2cae472b82ef6dad547e7ead8f3fd3e
2024-11-14 21:36:18,955 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: d2cae472b82ef6dad547e7ead8f3fd3e with key: docstring:v1:d2cae472b82ef6dad547e7ead8f3fd3e
2024-11-14 21:36:18,956 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: d2cae472b82ef6dad547e7ead8f3fd3e
2024-11-14 21:36:18,958 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:18,958 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:18,960 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:18,961 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:18,961 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:18,961 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:18,961 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:18,961 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_dsn_if_enabled
        Parameters: cls: Any, v: Any, values: Any
        Returns: Any
        Decorators: validator('dsn', always=True)
        Exceptions: ValueError
        Existing docstring: Validate DSN is provided when Sentry is enabled.
2024-11-14 21:36:18,962 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:20,314 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_dsn_if_enabled: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:20,314 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 82ca95d39683fbc1de0acc8905629224
2024-11-14 21:36:20,314 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 82ca95d39683fbc1de0acc8905629224 with key: docstring:v1:82ca95d39683fbc1de0acc8905629224
2024-11-14 21:36:20,315 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 82ca95d39683fbc1de0acc8905629224
2024-11-14 21:36:20,315 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:20,316 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:20,316 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:20,316 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:20,316 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:20,316 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:20,316 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:20,316 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_model
        Parameters: cls: Any, v: Any
        Returns: Any
        Decorators: validator('model')
        Exceptions: ValueError
        Existing docstring: Validate model identifier format.
2024-11-14 21:36:20,317 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:21,531 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_model: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:21,531 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['validate_deployment_name', 'validate_directory', 'validate_level', 'validate_max_workers', 'load']
2024-11-14 21:36:21,532 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 7f3b0dea115c8d0c7a4e94836a26a67f
2024-11-14 21:36:21,532 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 7f3b0dea115c8d0c7a4e94836a26a67f with key: docstring:v1:7f3b0dea115c8d0c7a4e94836a26a67f
2024-11-14 21:36:21,532 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 7f3b0dea115c8d0c7a4e94836a26a67f
2024-11-14 21:36:21,533 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:21,533 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:21,533 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:21,533 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:21,533 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:21,533 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:21,533 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:21,534 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_deployment_name
        Parameters: cls: Any, v: Any
        Returns: Any
        Decorators: validator('deployment_name')
        Exceptions: ValueError
        Existing docstring: Validate deployment name format.
2024-11-14 21:36:21,534 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:22,809 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_deployment_name: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:22,810 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: c8b304f4094faed4d12762ec7b80d5ae
2024-11-14 21:36:22,810 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: c8b304f4094faed4d12762ec7b80d5ae with key: docstring:v1:c8b304f4094faed4d12762ec7b80d5ae
2024-11-14 21:36:22,810 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: c8b304f4094faed4d12762ec7b80d5ae
2024-11-14 21:36:22,811 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:22,811 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:22,811 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:22,811 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:22,811 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:22,811 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:22,811 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:22,812 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_directory
        Parameters: cls: Any, v: Any
        Returns: Any
        Decorators: validator('directory')
        Exceptions: ValueError
        Existing docstring: Validate cache directory path.
2024-11-14 21:36:22,812 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:24,287 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_directory: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:24,287 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f922ef9ffffa8e6821d26a4ccb433b48
2024-11-14 21:36:24,287 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f922ef9ffffa8e6821d26a4ccb433b48 with key: docstring:v1:f922ef9ffffa8e6821d26a4ccb433b48
2024-11-14 21:36:24,288 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f922ef9ffffa8e6821d26a4ccb433b48
2024-11-14 21:36:24,288 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:24,288 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:24,288 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:24,289 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:24,289 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:24,289 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:24,289 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:24,289 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_level
        Parameters: cls: Any, v: Any
        Returns: Any
        Decorators: validator('level')
        Exceptions: ValueError
        Existing docstring: Validate logging level.
2024-11-14 21:36:24,289 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:25,634 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_level: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:25,634 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: a8aec98ede34268900dcaff28d74e9e0
2024-11-14 21:36:25,634 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: a8aec98ede34268900dcaff28d74e9e0 with key: docstring:v1:a8aec98ede34268900dcaff28d74e9e0
2024-11-14 21:36:25,634 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: a8aec98ede34268900dcaff28d74e9e0
2024-11-14 21:36:25,635 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:25,635 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:25,635 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:25,636 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:25,636 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:25,636 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:25,636 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:25,636 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_max_workers
        Parameters: cls: Any, v: Any, values: Any
        Returns: Any
        Decorators: validator('max_workers')
        Exceptions: ValueError
        Existing docstring: Validate max_workers does not exceed concurrency limit.
2024-11-14 21:36:25,636 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:27,039 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_max_workers: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:27,039 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: aa6d8b53f68a2b4bb602410b118475a5
2024-11-14 21:36:27,039 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: aa6d8b53f68a2b4bb602410b118475a5 with key: docstring:v1:aa6d8b53f68a2b4bb602410b118475a5
2024-11-14 21:36:27,039 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: aa6d8b53f68a2b4bb602410b118475a5
2024-11-14 21:36:27,042 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:27,042 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:27,042 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:27,043 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:27,043 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:27,043 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:27,043 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:27,043 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: load
        Parameters: cls: Any, config_path: Optional[str]
        Returns: Optional['Config']
        Decorators: classmethod
        Exceptions: None
        Existing docstring: Load configuration from a YAML file and environment variables.
2024-11-14 21:36:27,043 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:28,308 - docstring_workflow - ERROR - logger - log_error - Error processing function load: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:28,308 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['validate_configuration']
2024-11-14 21:36:28,308 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: de5624fa1edc50a1303eb6e7e2543442
2024-11-14 21:36:28,308 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: de5624fa1edc50a1303eb6e7e2543442 with key: docstring:v1:de5624fa1edc50a1303eb6e7e2543442
2024-11-14 21:36:28,308 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: de5624fa1edc50a1303eb6e7e2543442
2024-11-14 21:36:28,309 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:28,309 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:28,309 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:28,309 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:28,310 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:28,310 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:28,310 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:28,310 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_configuration
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: ValueError
        Existing docstring: Perform cross-field validation of the configuration.

Raises:
    ValueError: If validation fails
2024-11-14 21:36:28,310 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:29,778 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_configuration: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:29,784 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:36:29,784 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=11, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:36:29,784 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:36:29,784 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:36:29,784 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:36:29,784 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/config.py
2024-11-14 21:36:29,785 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/config.py'
2024-11-14 21:36:29,785 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpoo0pms30/context_manager.py
2024-11-14 21:36:29,785 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpoo0pms30/context_manager.py
2024-11-14 21:36:29,785 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpoo0pms30/context_manager.py'
2024-11-14 21:36:29,806 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:36:29,806 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:36:29,806 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:36:29,807 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:36:29,807 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:36:29,807 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:36:29,807 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:36:29,809 - docstring_workflow - INFO - logger - log_info - Extracted 3 functions.
2024-11-14 21:36:29,809 - docstring_workflow - INFO - logger - log_info - Extracted 3 functions from source code.
2024-11-14 21:36:29,809 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__init__', '_add_to_language_tracking', '_serialize_segment_id']
2024-11-14 21:36:29,809 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: ef55483cda42eac02a3059deab6cb738
2024-11-14 21:36:29,810 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: ef55483cda42eac02a3059deab6cb738 with key: docstring:v1:ef55483cda42eac02a3059deab6cb738
2024-11-14 21:36:29,810 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: ef55483cda42eac02a3059deab6cb738
2024-11-14 21:36:29,810 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:29,810 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:29,810 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:29,810 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:29,810 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:29,811 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:29,811 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:29,811 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, context_size_limit: int, max_tokens: int, model_name: str, embedding_batch_size: int
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the context manager.

Args:
    context_size_limit: Maximum number of segments in context
    max_tokens: Maximum tokens allowed
    model_name: Model name for tokenization
    embedding_batch_size: Batch size for embedding generation
2024-11-14 21:36:29,811 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:31,309 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:31,309 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f76eeb3cd0cc1d3bb7f4fba77e78e715
2024-11-14 21:36:31,309 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f76eeb3cd0cc1d3bb7f4fba77e78e715 with key: docstring:v1:f76eeb3cd0cc1d3bb7f4fba77e78e715
2024-11-14 21:36:31,310 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f76eeb3cd0cc1d3bb7f4fba77e78e715
2024-11-14 21:36:31,310 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:31,310 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:31,310 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:31,311 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:31,311 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:31,311 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:31,311 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:31,311 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _add_to_language_tracking
        Parameters: self: Any, segment_id: str, language: str
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Add a segment to language-specific tracking.
2024-11-14 21:36:31,311 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:32,752 - docstring_workflow - ERROR - logger - log_error - Error processing function _add_to_language_tracking: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:32,752 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 312cd43c94ba3f32ab31031c4df76d52
2024-11-14 21:36:32,752 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 312cd43c94ba3f32ab31031c4df76d52 with key: docstring:v1:312cd43c94ba3f32ab31031c4df76d52
2024-11-14 21:36:32,752 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 312cd43c94ba3f32ab31031c4df76d52
2024-11-14 21:36:32,753 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:32,753 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:32,753 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:32,753 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:32,753 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:32,753 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:32,754 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:32,754 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _serialize_segment_id
        Parameters: self: Any, segment_id: Any
        Returns: str
        Decorators: None
        Exceptions: None
        Existing docstring: Serialize segment_id to a string.
2024-11-14 21:36:32,754 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:34,053 - docstring_workflow - ERROR - logger - log_error - Error processing function _serialize_segment_id: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:34,057 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:36:34,057 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=3, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:36:34,057 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:36:34,057 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:36:34,057 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:36:34,057 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/context_manager.py
2024-11-14 21:36:34,057 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/context_manager.py'
2024-11-14 21:36:34,058 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpoo0pms30/documentation.py
2024-11-14 21:36:34,058 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpoo0pms30/documentation.py
2024-11-14 21:36:34,058 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpoo0pms30/documentation.py'
2024-11-14 21:36:34,078 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:36:34,079 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:36:34,079 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:36:34,079 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:36:34,079 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:36:34,079 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:36:34,079 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:36:34,083 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions.
2024-11-14 21:36:34,083 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions from source code.
2024-11-14 21:36:34,083 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['parse_response', '__init__', '_get_function_schema', '_create_prompt', '__init__']
2024-11-14 21:36:34,084 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 370223d059a68f8c31f572cb9eed0ba4
2024-11-14 21:36:34,084 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 370223d059a68f8c31f572cb9eed0ba4 with key: docstring:v1:370223d059a68f8c31f572cb9eed0ba4
2024-11-14 21:36:34,084 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 370223d059a68f8c31f572cb9eed0ba4
2024-11-14 21:36:34,086 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:34,086 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:34,086 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:34,086 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:34,086 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:34,087 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:34,087 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:34,087 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: parse_response
        Parameters: response: Dict[str, Any]
        Returns: Dict[str, Any]
        Decorators: staticmethod
        Exceptions: AIServiceResponseError
        Existing docstring: Parse and validate an AI service response.

Args:
    response: Raw response from the AI service

Returns:
    Dictionary containing parsed response data

Raises:
    AIServiceResponseError: If parsing fails
2024-11-14 21:36:34,087 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:35,557 - docstring_workflow - ERROR - logger - log_error - Error processing function parse_response: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:35,557 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: e5ee9b8da56ee9a3763abe6ec535d285
2024-11-14 21:36:35,557 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: e5ee9b8da56ee9a3763abe6ec535d285 with key: docstring:v1:e5ee9b8da56ee9a3763abe6ec535d285
2024-11-14 21:36:35,558 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: e5ee9b8da56ee9a3763abe6ec535d285
2024-11-14 21:36:35,558 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:35,558 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:35,559 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:35,559 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:35,559 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:35,559 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:35,559 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:35,559 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, api_key: str, model: str
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:36:35,559 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:36,964 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:36,964 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: d207a452780e464ccdc06f54097af08b
2024-11-14 21:36:36,964 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: d207a452780e464ccdc06f54097af08b with key: docstring:v1:d207a452780e464ccdc06f54097af08b
2024-11-14 21:36:36,965 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: d207a452780e464ccdc06f54097af08b
2024-11-14 21:36:36,965 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:36,965 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:36,965 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:36,965 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:36,966 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:36,966 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:36,966 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:36,966 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _get_function_schema
        Parameters: self: Any
        Returns: Dict[str, Any]
        Decorators: None
        Exceptions: None
        Existing docstring: Get the function schema for the API.
2024-11-14 21:36:36,966 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:38,411 - docstring_workflow - ERROR - logger - log_error - Error processing function _get_function_schema: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:38,411 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: dc93b864873de376c8078c49fbe88675
2024-11-14 21:36:38,411 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: dc93b864873de376c8078c49fbe88675 with key: docstring:v1:dc93b864873de376c8078c49fbe88675
2024-11-14 21:36:38,411 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: dc93b864873de376c8078c49fbe88675
2024-11-14 21:36:38,412 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:38,412 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:38,412 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:38,412 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:38,412 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:38,412 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:38,412 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:38,413 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _create_prompt
        Parameters: self: Any, function_details: Dict[str, Any], context_segments: Optional[List[str]], metadata: Optional[Dict[str, Any]]
        Returns: str
        Decorators: None
        Exceptions: None
        Existing docstring: Create the prompt for the AI service.
2024-11-14 21:36:38,413 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:39,884 - docstring_workflow - ERROR - logger - log_error - Error processing function _create_prompt: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:39,884 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 232ed7015fb09aa9e7e21804de05ffb3
2024-11-14 21:36:39,884 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 232ed7015fb09aa9e7e21804de05ffb3 with key: docstring:v1:232ed7015fb09aa9e7e21804de05ffb3
2024-11-14 21:36:39,885 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 232ed7015fb09aa9e7e21804de05ffb3
2024-11-14 21:36:39,885 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:39,885 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:39,885 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:39,886 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:39,886 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:39,886 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:39,886 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:39,886 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, api_key: str, endpoint: str, deployment_name: str
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:36:39,886 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:41,136 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:41,136 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__init__']
2024-11-14 21:36:41,136 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 1ea577c4b2a7d5d9c92ff795bca1b568
2024-11-14 21:36:41,137 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 1ea577c4b2a7d5d9c92ff795bca1b568 with key: docstring:v1:1ea577c4b2a7d5d9c92ff795bca1b568
2024-11-14 21:36:41,137 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 1ea577c4b2a7d5d9c92ff795bca1b568
2024-11-14 21:36:41,137 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:41,137 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:41,137 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:41,137 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:41,138 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:41,138 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:41,138 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:41,138 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, service: AIServiceInterface, context_manager: ContextManager, hierarchy_manager: CodeHierarchy, multilang_manager: MultiLanguageManager, metadata_manager: MetadataManager
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the documentation generator.

Args:
    service: AI service interface
    context_manager: Context management instance
    hierarchy_manager: Hierarchy management instance
    multilang_manager: Multi-language support instance
    metadata_manager: Metadata management instance
2024-11-14 21:36:41,138 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:42,488 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:42,493 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:36:42,494 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=6, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:36:42,494 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:36:42,494 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:36:42,494 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:36:42,494 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/documentation.py
2024-11-14 21:36:42,494 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/documentation.py'
2024-11-14 21:36:42,494 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpoo0pms30/cache.py
2024-11-14 21:36:42,494 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpoo0pms30/cache.py
2024-11-14 21:36:42,494 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpoo0pms30/cache.py'
2024-11-14 21:36:42,515 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:36:42,516 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:36:42,516 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:36:42,516 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:36:42,516 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:36:42,516 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:36:42,516 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:36:42,520 - docstring_workflow - INFO - logger - log_info - Extracted 13 functions.
2024-11-14 21:36:42,520 - docstring_workflow - INFO - logger - log_info - Extracted 13 functions from source code.
2024-11-14 21:36:42,520 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__init__', '_init_db', '_cleanup_old_entries', '_cleanup_by_size', 'fetch']
2024-11-14 21:36:42,520 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 2103f4c4562d0cb9c49fbbbe137908f4
2024-11-14 21:36:42,520 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 2103f4c4562d0cb9c49fbbbe137908f4 with key: docstring:v1:2103f4c4562d0cb9c49fbbbe137908f4
2024-11-14 21:36:42,520 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 2103f4c4562d0cb9c49fbbbe137908f4
2024-11-14 21:36:42,523 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:42,523 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:42,523 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:42,523 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:42,523 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:42,523 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:42,523 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:42,523 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, config: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the cache with configuration.
2024-11-14 21:36:42,523 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:43,879 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:43,879 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 0ce7f2a2711e92611e8391b2f99432d4
2024-11-14 21:36:43,879 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 0ce7f2a2711e92611e8391b2f99432d4 with key: docstring:v1:0ce7f2a2711e92611e8391b2f99432d4
2024-11-14 21:36:43,880 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 0ce7f2a2711e92611e8391b2f99432d4
2024-11-14 21:36:43,880 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:43,880 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:43,880 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:43,881 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:43,881 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:43,881 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:43,881 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:43,881 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _init_db
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the SQLite database schema.
2024-11-14 21:36:43,881 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:45,227 - docstring_workflow - ERROR - logger - log_error - Error processing function _init_db: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:45,228 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 7920b0933ebe40a799360073209d1c30
2024-11-14 21:36:45,228 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 7920b0933ebe40a799360073209d1c30 with key: docstring:v1:7920b0933ebe40a799360073209d1c30
2024-11-14 21:36:45,228 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 7920b0933ebe40a799360073209d1c30
2024-11-14 21:36:45,228 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:45,228 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:45,229 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:45,229 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:45,229 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:45,229 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:45,229 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:45,229 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _cleanup_old_entries
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Remove entries older than TTL.
2024-11-14 21:36:45,229 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:46,545 - docstring_workflow - ERROR - logger - log_error - Error processing function _cleanup_old_entries: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:46,545 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 178b48134376f15faa3ace401f49b605
2024-11-14 21:36:46,545 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 178b48134376f15faa3ace401f49b605 with key: docstring:v1:178b48134376f15faa3ace401f49b605
2024-11-14 21:36:46,545 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 178b48134376f15faa3ace401f49b605
2024-11-14 21:36:46,546 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:46,546 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:46,546 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:46,546 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:46,546 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:46,546 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:46,546 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:46,547 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _cleanup_by_size
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Remove oldest entries if cache size exceeds limit.
2024-11-14 21:36:46,547 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:47,922 - docstring_workflow - ERROR - logger - log_error - Error processing function _cleanup_by_size: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:47,923 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f7eea7adbf0588d9eac47420cd63f831
2024-11-14 21:36:47,923 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f7eea7adbf0588d9eac47420cd63f831 with key: docstring:v1:f7eea7adbf0588d9eac47420cd63f831
2024-11-14 21:36:47,923 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f7eea7adbf0588d9eac47420cd63f831
2024-11-14 21:36:47,923 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:47,924 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:47,924 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:47,924 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:47,924 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:47,924 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:47,924 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:47,924 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: fetch
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:36:47,924 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:49,328 - docstring_workflow - ERROR - logger - log_error - Error processing function fetch: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:49,328 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['insert', 'fetch_module', 'insert_module', 'clear_all', 'fetch_stats']
2024-11-14 21:36:49,329 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: ea737e664d79da120ae38e457a5fca68
2024-11-14 21:36:49,329 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: ea737e664d79da120ae38e457a5fca68 with key: docstring:v1:ea737e664d79da120ae38e457a5fca68
2024-11-14 21:36:49,329 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: ea737e664d79da120ae38e457a5fca68
2024-11-14 21:36:49,329 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:49,330 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:49,330 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:49,330 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:49,330 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:49,330 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:49,330 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:49,330 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: insert
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:36:49,330 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:50,606 - docstring_workflow - ERROR - logger - log_error - Error processing function insert: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:50,606 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 387d4de0234fa8fbe0516ca567bf3b53
2024-11-14 21:36:50,607 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 387d4de0234fa8fbe0516ca567bf3b53 with key: docstring:v1:387d4de0234fa8fbe0516ca567bf3b53
2024-11-14 21:36:50,607 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 387d4de0234fa8fbe0516ca567bf3b53
2024-11-14 21:36:50,609 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:50,610 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:50,610 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:50,610 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:50,610 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:50,610 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:50,610 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:50,610 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: fetch_module
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:36:50,610 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:52,076 - docstring_workflow - ERROR - logger - log_error - Error processing function fetch_module: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:52,076 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 3599b934576579fd9b00ada7a7debd5c
2024-11-14 21:36:52,076 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 3599b934576579fd9b00ada7a7debd5c with key: docstring:v1:3599b934576579fd9b00ada7a7debd5c
2024-11-14 21:36:52,076 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 3599b934576579fd9b00ada7a7debd5c
2024-11-14 21:36:52,077 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:52,077 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:52,077 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:52,077 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:52,077 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:52,077 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:52,077 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:52,078 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: insert_module
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:36:52,078 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:53,363 - docstring_workflow - ERROR - logger - log_error - Error processing function insert_module: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:53,363 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 2f342b62230c3936b9ae8ddb92478766
2024-11-14 21:36:53,364 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 2f342b62230c3936b9ae8ddb92478766 with key: docstring:v1:2f342b62230c3936b9ae8ddb92478766
2024-11-14 21:36:53,364 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 2f342b62230c3936b9ae8ddb92478766
2024-11-14 21:36:53,364 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:53,365 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:53,365 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:53,365 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:53,365 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:53,365 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:53,365 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:53,366 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: clear_all
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:36:53,366 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:54,716 - docstring_workflow - ERROR - logger - log_error - Error processing function clear_all: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:54,716 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 3f88260a356b0ffcb70ec627376d1c79
2024-11-14 21:36:54,716 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 3f88260a356b0ffcb70ec627376d1c79 with key: docstring:v1:3f88260a356b0ffcb70ec627376d1c79
2024-11-14 21:36:54,716 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 3f88260a356b0ffcb70ec627376d1c79
2024-11-14 21:36:54,717 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:54,717 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:54,717 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:54,717 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:54,718 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:54,718 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:54,718 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:54,718 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: fetch_stats
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:36:54,718 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:56,203 - docstring_workflow - ERROR - logger - log_error - Error processing function fetch_stats: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:56,203 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['delete_entry', 'delete_module', 'delete_expired_module']
2024-11-14 21:36:56,203 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f92bc01a3543e77b048ddebfb01b4e13
2024-11-14 21:36:56,203 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f92bc01a3543e77b048ddebfb01b4e13 with key: docstring:v1:f92bc01a3543e77b048ddebfb01b4e13
2024-11-14 21:36:56,204 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f92bc01a3543e77b048ddebfb01b4e13
2024-11-14 21:36:56,204 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:56,204 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:56,205 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:56,205 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:56,205 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:56,205 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:56,205 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:56,205 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: delete_entry
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:36:56,205 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:57,538 - docstring_workflow - ERROR - logger - log_error - Error processing function delete_entry: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:57,538 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 4714fc3cbcb760bbbc574bb3cb0e2571
2024-11-14 21:36:57,538 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 4714fc3cbcb760bbbc574bb3cb0e2571 with key: docstring:v1:4714fc3cbcb760bbbc574bb3cb0e2571
2024-11-14 21:36:57,538 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 4714fc3cbcb760bbbc574bb3cb0e2571
2024-11-14 21:36:57,539 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:57,539 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:57,539 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:57,539 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:57,539 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:57,539 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:57,540 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:57,540 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: delete_module
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:36:57,540 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:36:59,006 - docstring_workflow - ERROR - logger - log_error - Error processing function delete_module: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:36:59,006 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: a8a632ab10ef264b9aeeec0693a7b893
2024-11-14 21:36:59,006 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: a8a632ab10ef264b9aeeec0693a7b893 with key: docstring:v1:a8a632ab10ef264b9aeeec0693a7b893
2024-11-14 21:36:59,006 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: a8a632ab10ef264b9aeeec0693a7b893
2024-11-14 21:36:59,009 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:36:59,009 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:36:59,009 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:36:59,009 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:36:59,009 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:36:59,010 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:36:59,010 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:36:59,010 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: delete_expired_module
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:36:59,010 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:37:00,337 - docstring_workflow - ERROR - logger - log_error - Error processing function delete_expired_module: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:37:00,343 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:37:00,343 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=13, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:37:00,343 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:37:00,344 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:37:00,344 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:37:00,344 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/cache.py
2024-11-14 21:37:00,344 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/cache.py'
2024-11-14 21:37:00,344 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpoo0pms30/hierarchy.py
2024-11-14 21:37:00,344 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpoo0pms30/hierarchy.py
2024-11-14 21:37:00,344 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpoo0pms30/hierarchy.py'
2024-11-14 21:37:00,365 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:37:00,365 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:37:00,365 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:37:00,366 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:37:00,366 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:37:00,366 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:37:00,366 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:37:00,369 - docstring_workflow - INFO - logger - log_info - Extracted 22 functions.
2024-11-14 21:37:00,369 - docstring_workflow - INFO - logger - log_info - Extracted 22 functions from source code.
2024-11-14 21:37:00,369 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['add_child', 'remove_child', 'find_child', 'get_path', 'to_dict']
2024-11-14 21:37:00,369 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 0eacc6c0ed3c8bda141e0b43fc7cea5f
2024-11-14 21:37:00,369 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 0eacc6c0ed3c8bda141e0b43fc7cea5f with key: docstring:v1:0eacc6c0ed3c8bda141e0b43fc7cea5f
2024-11-14 21:37:00,369 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 0eacc6c0ed3c8bda141e0b43fc7cea5f
2024-11-14 21:37:00,370 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:37:00,370 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:37:00,370 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:37:00,370 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:37:00,370 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:37:00,370 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:37:00,370 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:37:00,371 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: add_child
        Parameters: self: Any, child: 'HierarchyNode'
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Add a child node to this node.
2024-11-14 21:37:00,371 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:37:01,737 - docstring_workflow - ERROR - logger - log_error - Error processing function add_child: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:37:01,737 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: abc3866720ac42829f1062a9523e58e4
2024-11-14 21:37:01,737 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: abc3866720ac42829f1062a9523e58e4 with key: docstring:v1:abc3866720ac42829f1062a9523e58e4
2024-11-14 21:37:01,737 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: abc3866720ac42829f1062a9523e58e4
2024-11-14 21:37:01,738 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:37:01,738 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:37:01,738 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:37:01,738 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:37:01,738 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:37:01,738 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:37:01,738 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:37:01,739 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: remove_child
        Parameters: self: Any, child: 'HierarchyNode'
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Remove a child node from this node.
2024-11-14 21:37:01,739 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:37:03,035 - docstring_workflow - ERROR - logger - log_error - Error processing function remove_child: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:37:03,035 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 009bef259c4c17691c2731440293412b
2024-11-14 21:37:03,035 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 009bef259c4c17691c2731440293412b with key: docstring:v1:009bef259c4c17691c2731440293412b
2024-11-14 21:37:03,035 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 009bef259c4c17691c2731440293412b
2024-11-14 21:37:03,036 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:37:03,036 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:37:03,036 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:37:03,036 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:37:03,036 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:37:03,037 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:37:03,037 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:37:03,037 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: find_child
        Parameters: self: Any, name: str
        Returns: Optional['HierarchyNode']
        Decorators: None
        Exceptions: None
        Existing docstring: Find a direct child node by name.
2024-11-14 21:37:03,037 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:37:04,457 - docstring_workflow - ERROR - logger - log_error - Error processing function find_child: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:37:04,458 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 8d17fb148161ae647849d7a92b67b9d6
2024-11-14 21:37:04,458 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 8d17fb148161ae647849d7a92b67b9d6 with key: docstring:v1:8d17fb148161ae647849d7a92b67b9d6
2024-11-14 21:37:04,458 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 8d17fb148161ae647849d7a92b67b9d6
2024-11-14 21:37:04,458 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:37:04,459 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:37:04,459 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:37:04,459 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:37:04,459 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:37:04,459 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:37:04,459 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:37:04,460 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_path
        Parameters: self: Any
        Returns: str
        Decorators: None
        Exceptions: None
        Existing docstring: Get the full path from root to this node.
2024-11-14 21:37:04,460 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:37:05,820 - docstring_workflow - ERROR - logger - log_error - Error processing function get_path: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:37:05,820 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 72f8dd248ec0dacb24ffc8e53d032a75
2024-11-14 21:37:05,820 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 72f8dd248ec0dacb24ffc8e53d032a75 with key: docstring:v1:72f8dd248ec0dacb24ffc8e53d032a75
2024-11-14 21:37:05,820 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 72f8dd248ec0dacb24ffc8e53d032a75
2024-11-14 21:37:05,821 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:37:05,821 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:37:05,821 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:37:05,821 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:37:05,821 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:37:05,822 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:37:05,822 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:37:05,822 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: to_dict
        Parameters: self: Any
        Returns: Dict[str, Any]
        Decorators: None
        Exceptions: None
        Existing docstring: Convert the node to a dictionary representation.
2024-11-14 21:37:05,822 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:37:07,189 - docstring_workflow - ERROR - logger - log_error - Error processing function to_dict: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:37:07,189 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__repr__', '__init__', 'add_node', 'get_node', 'remove_node']
2024-11-14 21:37:07,189 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f742e20d2b4f414f60540138600187b9
2024-11-14 21:37:07,189 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f742e20d2b4f414f60540138600187b9 with key: docstring:v1:f742e20d2b4f414f60540138600187b9
2024-11-14 21:37:07,190 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f742e20d2b4f414f60540138600187b9
2024-11-14 21:37:07,192 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:37:07,193 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:37:07,193 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:37:07,193 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:37:07,193 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:37:07,193 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:37:07,193 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:37:07,193 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __repr__
        Parameters: self: Any
        Returns: str
        Decorators: None
        Exceptions: None
        Existing docstring: None
2024-11-14 21:37:07,193 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:37:08,487 - docstring_workflow - ERROR - logger - log_error - Error processing function __repr__: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:37:08,487 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 74784b5204978384eb3ee3f65036a1c7
2024-11-14 21:37:08,487 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 74784b5204978384eb3ee3f65036a1c7 with key: docstring:v1:74784b5204978384eb3ee3f65036a1c7
2024-11-14 21:37:08,488 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 74784b5204978384eb3ee3f65036a1c7
2024-11-14 21:37:08,488 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:37:08,488 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:37:08,488 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:37:08,489 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:37:08,489 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:37:08,489 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:37:08,489 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:37:08,489 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the code hierarchy.
2024-11-14 21:37:08,489 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:37:10,008 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:37:10,008 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: b3796a540848c83cffdb46892ef32060
2024-11-14 21:37:10,008 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: b3796a540848c83cffdb46892ef32060 with key: docstring:v1:b3796a540848c83cffdb46892ef32060
2024-11-14 21:37:10,009 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: b3796a540848c83cffdb46892ef32060
2024-11-14 21:37:10,009 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:37:10,009 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:37:10,010 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:37:10,010 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:37:10,010 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:37:10,010 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:37:10,010 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:37:10,010 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: add_node
        Parameters: self: Any, path: str, node_type: str, documentation: str, metadata: Dict[str, Any]
        Returns: HierarchyNode
        Decorators: None
        Exceptions: ValueError
        Existing docstring: Add a new node to the hierarchy.

Args:
    path: Dot-separated path to the node (e.g., 'module.class.function')
    node_type: Type of the code element
    documentation: Optional documentation string
    metadata: Optional metadata dictionary
    
Returns:
    The created node
    
Raises:
    ValueError: If the path is invalid
2024-11-14 21:37:10,010 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:37:11,359 - docstring_workflow - ERROR - logger - log_error - Error processing function add_node: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:37:11,360 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: e8fb6a0d9f0f355d6b1de882aba7c705
2024-11-14 21:37:11,360 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: e8fb6a0d9f0f355d6b1de882aba7c705 with key: docstring:v1:e8fb6a0d9f0f355d6b1de882aba7c705
2024-11-14 21:37:11,360 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: e8fb6a0d9f0f355d6b1de882aba7c705
2024-11-14 21:37:11,360 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:37:11,361 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:37:11,361 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:37:11,361 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:37:11,361 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:37:11,361 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:37:11,361 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:37:11,361 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_node
        Parameters: self: Any, path: str
        Returns: Optional[HierarchyNode]
        Decorators: None
        Exceptions: None
        Existing docstring: Get a node by its path.
2024-11-14 21:37:11,361 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:37:12,708 - docstring_workflow - ERROR - logger - log_error - Error processing function get_node: SystemMonitor.log_request() got an unexpected keyword argument 'tokens'
2024-11-14 21:37:12,708 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 0f39e33e0bfa5020af9cb08b46e030d3
2024-11-14 21:37:12,709 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 0f39e33e0bfa5020af9cb08b46e030d3 with key: docstring:v1:0f39e33e0bfa5020af9cb08b46e030d3
2024-11-14 21:37:12,709 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 0f39e33e0bfa5020af9cb08b46e030d3
2024-11-14 21:37:12,709 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:37:12,709 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:37:12,710 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:37:12,710 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:37:12,710 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:37:12,710 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:37:12,710 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:37:12,710 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: remove_node
        Parameters: self: Any, path: str
        Returns: bool
        Decorators: None
        Exceptions: None
        Existing docstring: Remove a node and its children from the hierarchy.

Args:
    path: Path to the node to remove
    
Returns:
    True if the node was removed, False if not found
2024-11-14 21:37:12,710 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:37:13,347 - docstring_workflow - DEBUG - logger - log_debug - Cleaning up temporary directory: /tmp/tmpoo0pms30
2024-11-14 21:40:31,061 - docstring_workflow - DEBUG - logger - log_debug - Starting workflow for source path: https://github.com/henryperkins/auto-something
2024-11-14 21:40:31,083 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:40:31,084 - docstring_workflow - DEBUG - logger - log_debug - Cloning repository from URL: https://github.com/henryperkins/auto-something to temp directory: /tmp/tmpwk8f5_vq
2024-11-14 21:40:31,285 - docstring_workflow - DEBUG - logger - log_debug - Processing directory: /tmp/tmpwk8f5_vq
2024-11-14 21:40:31,285 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpwk8f5_vq/dependency_analyzer.py
2024-11-14 21:40:31,285 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpwk8f5_vq/dependency_analyzer.py
2024-11-14 21:40:31,285 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpwk8f5_vq/dependency_analyzer.py'
2024-11-14 21:40:31,308 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:40:31,308 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:40:31,308 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:40:31,310 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:40:31,310 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:40:31,310 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:40:31,310 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:40:31,312 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions.
2024-11-14 21:40:31,312 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions from source code.
2024-11-14 21:40:31,312 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__init__', '_extract_python_dependencies', '_extract_javascript_dependencies', 'get_module_dependencies', 'export_dependency_graph']
2024-11-14 21:40:31,313 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 92d525bbacb7d2bcc7a58bbe70ba5ad0
2024-11-14 21:40:31,313 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 92d525bbacb7d2bcc7a58bbe70ba5ad0 with key: docstring:v1:92d525bbacb7d2bcc7a58bbe70ba5ad0
2024-11-14 21:40:31,313 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 92d525bbacb7d2bcc7a58bbe70ba5ad0
2024-11-14 21:40:31,315 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:40:31,315 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:40:31,315 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:40:31,316 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:40:31,316 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:40:31,316 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:40:31,316 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:40:31,483 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, project_root: str, multilang_manager: Optional[MultiLanguageManager], hierarchy_manager: Optional[CodeHierarchy], context_manager: Optional[ContextManager]
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the DependencyAnalyzer.

Args:
    project_root: The root directory of the project
    multilang_manager: Optional multi-language support manager
    hierarchy_manager: Optional hierarchy management instance
    context_manager: Optional context management instance
2024-11-14 21:40:31,484 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:40:32,813 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:40:32,813 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 461c6439790fd423ac9dcc5f737b77d0
2024-11-14 21:40:32,813 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 461c6439790fd423ac9dcc5f737b77d0 with key: docstring:v1:461c6439790fd423ac9dcc5f737b77d0
2024-11-14 21:40:32,813 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 461c6439790fd423ac9dcc5f737b77d0
2024-11-14 21:40:32,814 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:40:32,814 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:40:32,814 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:40:32,814 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:40:32,814 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:40:32,814 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:40:32,814 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:40:32,815 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _extract_python_dependencies
        Parameters: self: Any, tree: ast.AST
        Returns: Dict[str, Set[str]]
        Decorators: None
        Exceptions: None
        Existing docstring: Extract dependencies from Python AST.
2024-11-14 21:40:32,815 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:40:34,133 - docstring_workflow - ERROR - logger - log_error - Error processing function _extract_python_dependencies: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:40:34,134 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f4857b58c1eae304f2012cb1931f40e0
2024-11-14 21:40:34,134 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f4857b58c1eae304f2012cb1931f40e0 with key: docstring:v1:f4857b58c1eae304f2012cb1931f40e0
2024-11-14 21:40:34,134 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f4857b58c1eae304f2012cb1931f40e0
2024-11-14 21:40:34,135 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:40:34,135 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:40:34,135 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:40:34,135 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:40:34,135 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:40:34,135 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:40:34,135 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:40:34,136 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _extract_javascript_dependencies
        Parameters: self: Any, content: str
        Returns: Dict[str, Set[str]]
        Decorators: None
        Exceptions: None
        Existing docstring: Extract dependencies from JavaScript code.
2024-11-14 21:40:34,136 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:40:35,538 - docstring_workflow - ERROR - logger - log_error - Error processing function _extract_javascript_dependencies: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:40:35,538 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 271e8811db99b7581b15bda400f5af39
2024-11-14 21:40:35,538 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 271e8811db99b7581b15bda400f5af39 with key: docstring:v1:271e8811db99b7581b15bda400f5af39
2024-11-14 21:40:35,538 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 271e8811db99b7581b15bda400f5af39
2024-11-14 21:40:35,539 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:40:35,539 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:40:35,539 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:40:35,539 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:40:35,539 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:40:35,539 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:40:35,539 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:40:35,540 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_module_dependencies
        Parameters: self: Any
        Returns: Dict[str, Set[str]]
        Decorators: None
        Exceptions: None
        Existing docstring: Get the mapping of modules to their dependencies.
2024-11-14 21:40:35,540 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:40:36,912 - docstring_workflow - ERROR - logger - log_error - Error processing function get_module_dependencies: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:40:36,912 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: d067fd84d5c99f70d4adaee2a2d7e310
2024-11-14 21:40:36,912 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: d067fd84d5c99f70d4adaee2a2d7e310 with key: docstring:v1:d067fd84d5c99f70d4adaee2a2d7e310
2024-11-14 21:40:36,912 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: d067fd84d5c99f70d4adaee2a2d7e310
2024-11-14 21:40:36,913 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:40:36,913 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:40:36,913 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:40:36,913 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:40:36,913 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:40:36,914 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:40:36,914 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:40:36,914 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: export_dependency_graph
        Parameters: self: Any, output_path: str
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Export dependency information as a JSON file.

Args:
    output_path: Path to save the dependency graph
2024-11-14 21:40:36,914 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:40:38,387 - docstring_workflow - ERROR - logger - log_error - Error processing function export_dependency_graph: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:40:38,387 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['merge_dependency_graphs']
2024-11-14 21:40:38,387 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 5daab0e4314b59dbbf9ef3186b246ff6
2024-11-14 21:40:38,387 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 5daab0e4314b59dbbf9ef3186b246ff6 with key: docstring:v1:5daab0e4314b59dbbf9ef3186b246ff6
2024-11-14 21:40:38,388 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 5daab0e4314b59dbbf9ef3186b246ff6
2024-11-14 21:40:38,391 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:40:38,391 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:40:38,391 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:40:38,391 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:40:38,391 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:40:38,391 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:40:38,391 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:40:38,392 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: merge_dependency_graphs
        Parameters: graphs: List[Dict[str, Any]]
        Returns: Dict[str, Any]
        Decorators: staticmethod
        Exceptions: None
        Existing docstring: Merge multiple dependency graphs.

Args:
    graphs: List of dependency graphs to merge
    
Returns:
    Merged dependency graph
2024-11-14 21:40:38,392 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:40:39,799 - docstring_workflow - ERROR - logger - log_error - Error processing function merge_dependency_graphs: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:40:39,803 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:40:39,803 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=6, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:40:39,803 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:40:39,803 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:40:39,803 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:40:39,803 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/dependency_analyzer.py
2024-11-14 21:40:39,803 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/dependency_analyzer.py'
2024-11-14 21:40:39,803 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpwk8f5_vq/utils.py
2024-11-14 21:40:39,803 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpwk8f5_vq/utils.py
2024-11-14 21:40:39,803 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpwk8f5_vq/utils.py'
2024-11-14 21:40:39,825 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:40:39,825 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:40:39,825 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:40:39,826 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:40:39,826 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:40:39,826 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:40:39,826 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:40:39,828 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions.
2024-11-14 21:40:39,828 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions from source code.
2024-11-14 21:40:39,828 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['get_all_files', 'format_with_black', 'get_function_hash', 'clone_repo', 'setup_logging']
2024-11-14 21:40:39,828 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 9610d0ae189c32fcfdbc93f452a8cd5c
2024-11-14 21:40:39,828 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 9610d0ae189c32fcfdbc93f452a8cd5c with key: docstring:v1:9610d0ae189c32fcfdbc93f452a8cd5c
2024-11-14 21:40:39,828 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 9610d0ae189c32fcfdbc93f452a8cd5c
2024-11-14 21:40:39,829 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:40:39,829 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:40:39,829 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:40:39,829 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:40:39,829 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:40:39,829 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:40:39,829 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:40:39,830 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_all_files
        Parameters: directory: Any, exclude_dirs: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Retrieve all Python files from a specified directory, excluding certain directories.

This function traverses the given directory recursively and collects paths to all Python
files, while excluding any directories specified in the `exclude_dirs` list.

Args:
    directory (str): The root directory to search for Python files.
    exclude_dirs (list, optional): A list of directory names to exclude from the search.
        Defaults to None, which means no directories are excluded.

Returns:
    list: A list of file paths to Python files found in the directory, excluding specified directories.

Raises:
    ValueError: If the provided directory does not exist or is not accessible.
2024-11-14 21:40:39,830 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:40:41,173 - docstring_workflow - ERROR - logger - log_error - Error processing function get_all_files: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:40:41,173 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f3960ab0d9879de8d2700df70f0eefad
2024-11-14 21:40:41,174 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f3960ab0d9879de8d2700df70f0eefad with key: docstring:v1:f3960ab0d9879de8d2700df70f0eefad
2024-11-14 21:40:41,174 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f3960ab0d9879de8d2700df70f0eefad
2024-11-14 21:40:41,174 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:40:41,174 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:40:41,176 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:40:41,176 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:40:41,176 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:40:41,176 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:40:41,176 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:40:41,177 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: format_with_black
        Parameters: file_content: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Format Python code using the Black code formatter.

This function attempts to format the provided Python source code string using Black,
a popular code formatter. If formatting is successful, the formatted code is returned.

Args:
    file_content (str): The Python source code to format.

Returns:
    tuple: A tuple containing a boolean indicating success and the formatted content.
        If formatting fails, the original content is returned.

Raises:
    ImportError: If the Black library is not installed.
    Exception: If any other error occurs during formatting.
2024-11-14 21:40:41,177 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:40:42,458 - docstring_workflow - ERROR - logger - log_error - Error processing function format_with_black: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:40:42,458 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 02887713b6a6cf450aa0a619726adff1
2024-11-14 21:40:42,459 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 02887713b6a6cf450aa0a619726adff1 with key: docstring:v1:02887713b6a6cf450aa0a619726adff1
2024-11-14 21:40:42,459 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 02887713b6a6cf450aa0a619726adff1
2024-11-14 21:40:42,459 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:40:42,459 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:40:42,460 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:40:42,460 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:40:42,460 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:40:42,460 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:40:42,460 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:40:42,460 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_function_hash
        Parameters: function_content: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Generate a SHA-256 hash for a function's content.

This function computes a SHA-256 hash of the provided function content string,
which can be used to uniquely identify the function based on its code.

Args:
    function_content (str): The content of the function to hash.

Returns:
    str: A SHA-256 hash of the function content.
2024-11-14 21:40:42,460 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:40:43,819 - docstring_workflow - ERROR - logger - log_error - Error processing function get_function_hash: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:40:43,819 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 019e46eae53ebe366160639c2df73b27
2024-11-14 21:40:43,819 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 019e46eae53ebe366160639c2df73b27 with key: docstring:v1:019e46eae53ebe366160639c2df73b27
2024-11-14 21:40:43,819 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 019e46eae53ebe366160639c2df73b27
2024-11-14 21:40:43,820 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:40:43,820 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:40:43,820 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:40:43,820 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:40:43,820 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:40:43,820 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:40:43,820 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:40:43,821 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: clone_repo
        Parameters: repo_url: Any, clone_dir: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Clone a Git repository to a specified local directory.

This function uses the Git command-line tool to clone a repository from the given URL
into the specified local directory. If the directory already exists, it is removed before cloning.

Args:
    repo_url (str): The URL of the Git repository to clone.
    clone_dir (str): The local directory to clone the repository into.

Raises:
    SystemExit: If the cloning process fails due to a Git error or other issues.
2024-11-14 21:40:43,821 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:40:45,093 - docstring_workflow - ERROR - logger - log_error - Error processing function clone_repo: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:40:45,094 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 9f7c2ab305c57d577dedbb6e0cfd7a2e
2024-11-14 21:40:45,094 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 9f7c2ab305c57d577dedbb6e0cfd7a2e with key: docstring:v1:9f7c2ab305c57d577dedbb6e0cfd7a2e
2024-11-14 21:40:45,094 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 9f7c2ab305c57d577dedbb6e0cfd7a2e
2024-11-14 21:40:45,094 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:40:45,095 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:40:45,095 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:40:45,095 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:40:45,095 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:40:45,095 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:40:45,095 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:40:45,095 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: setup_logging
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Configure logging settings for the application.

This function sets up the logging configuration to output log messages to both
the console and a log file named 'error.log'. The log level is set to INFO, and
the log format includes the timestamp, log level, and message.

Returns:
    None
2024-11-14 21:40:45,095 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:40:46,489 - docstring_workflow - ERROR - logger - log_error - Error processing function setup_logging: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:40:46,489 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['create_complexity_indicator']
2024-11-14 21:40:46,489 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 3b090873ab175dcc7d97c5b687ed0eb0
2024-11-14 21:40:46,489 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 3b090873ab175dcc7d97c5b687ed0eb0 with key: docstring:v1:3b090873ab175dcc7d97c5b687ed0eb0
2024-11-14 21:40:46,489 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 3b090873ab175dcc7d97c5b687ed0eb0
2024-11-14 21:40:46,492 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:40:46,492 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:40:46,492 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:40:46,493 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:40:46,493 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:40:46,493 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:40:46,493 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:40:46,493 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: create_complexity_indicator
        Parameters: complexity: Optional[int]
        Returns: str
        Decorators: None
        Exceptions: None
        Existing docstring: Create a visual indicator for code complexity.

Args:
    complexity (Optional[int]): An optional integer representing complexity.

Returns:
    str: A string representing the complexity level with an emoji.
2024-11-14 21:40:46,493 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:40:47,917 - docstring_workflow - ERROR - logger - log_error - Error processing function create_complexity_indicator: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:40:47,919 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:40:47,919 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=6, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:40:47,919 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:40:47,920 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:40:47,920 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:40:47,920 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/utils.py
2024-11-14 21:40:47,920 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/utils.py'
2024-11-14 21:40:47,920 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpwk8f5_vq/validation.py
2024-11-14 21:40:47,920 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpwk8f5_vq/validation.py
2024-11-14 21:40:47,920 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpwk8f5_vq/validation.py'
2024-11-14 21:40:47,941 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:40:47,941 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:40:47,941 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:40:47,942 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:40:47,942 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:40:47,942 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:40:47,942 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:40:47,945 - docstring_workflow - INFO - logger - log_info - Extracted 18 functions.
2024-11-14 21:40:47,945 - docstring_workflow - INFO - logger - log_info - Extracted 18 functions from source code.
2024-11-14 21:40:47,945 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['validate_input_files', 'validate_git_repository', 'validate_function_analysis_input', 'validate_docstring_content', 'validate_analysis_config']
2024-11-14 21:40:47,945 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 00f1db43d8d4427d2bee33e88d9c59ee
2024-11-14 21:40:47,946 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 00f1db43d8d4427d2bee33e88d9c59ee with key: docstring:v1:00f1db43d8d4427d2bee33e88d9c59ee
2024-11-14 21:40:47,946 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 00f1db43d8d4427d2bee33e88d9c59ee
2024-11-14 21:40:47,946 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:40:47,946 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:40:47,946 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:40:47,946 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:40:47,947 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:40:47,947 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:40:47,947 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:40:47,947 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_input_files
        Parameters: files: List[str]
        Returns: List[str]
        Decorators: None
        Exceptions: ValidationError
        Existing docstring: Validate a list of input files.

Args:
    files: List of file paths to validate
    
Returns:
    List of validated absolute file paths
    
Raises:
    ValidationError: If any file is invalid
2024-11-14 21:40:47,947 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:40:49,445 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_input_files: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:40:49,445 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 7c6feea887ee01fa771bfb4bb6c890d6
2024-11-14 21:40:49,445 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 7c6feea887ee01fa771bfb4bb6c890d6 with key: docstring:v1:7c6feea887ee01fa771bfb4bb6c890d6
2024-11-14 21:40:49,445 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 7c6feea887ee01fa771bfb4bb6c890d6
2024-11-14 21:40:49,446 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:40:49,446 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:40:49,446 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:40:49,446 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:40:49,447 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:40:49,447 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:40:49,447 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:40:49,447 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_git_repository
        Parameters: url: str, branch: Optional[str]
        Returns: GitRepoValidation
        Decorators: None
        Exceptions: ValidationError
        Existing docstring: Validate a Git repository URL and branch.

Args:
    url: Repository URL to validate
    branch: Optional branch name
    
Returns:
    Validated GitRepoValidation instance
    
Raises:
    ValidationError: If the repository URL or branch is invalid
2024-11-14 21:40:49,447 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:40:50,586 - docstring_workflow - DEBUG - logger - log_debug - Cleaning up temporary directory: /tmp/tmpwk8f5_vq
2024-11-14 21:42:41,406 - docstring_workflow - DEBUG - logger - log_debug - Starting workflow for source path: https://github.com/henryperkins/auto-something
2024-11-14 21:42:41,428 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:42:41,428 - docstring_workflow - DEBUG - logger - log_debug - Cloning repository from URL: https://github.com/henryperkins/auto-something to temp directory: /tmp/tmptbrj5vym
2024-11-14 21:42:41,603 - docstring_workflow - DEBUG - logger - log_debug - Processing directory: /tmp/tmptbrj5vym
2024-11-14 21:42:41,603 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmptbrj5vym/dependency_analyzer.py
2024-11-14 21:42:41,603 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmptbrj5vym/dependency_analyzer.py
2024-11-14 21:42:41,603 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmptbrj5vym/dependency_analyzer.py'
2024-11-14 21:42:41,625 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:42:41,625 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:42:41,625 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:42:41,626 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:42:41,626 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:42:41,626 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:42:41,626 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:42:41,629 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions.
2024-11-14 21:42:41,629 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions from source code.
2024-11-14 21:42:41,629 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__init__', '_extract_python_dependencies', '_extract_javascript_dependencies', 'get_module_dependencies', 'export_dependency_graph']
2024-11-14 21:42:41,629 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 92d525bbacb7d2bcc7a58bbe70ba5ad0
2024-11-14 21:42:41,629 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 92d525bbacb7d2bcc7a58bbe70ba5ad0 with key: docstring:v1:92d525bbacb7d2bcc7a58bbe70ba5ad0
2024-11-14 21:42:41,629 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 92d525bbacb7d2bcc7a58bbe70ba5ad0
2024-11-14 21:42:41,632 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:42:41,632 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:42:41,632 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:42:41,632 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:42:41,632 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:42:41,632 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:42:41,633 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:42:41,802 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, project_root: str, multilang_manager: Optional[MultiLanguageManager], hierarchy_manager: Optional[CodeHierarchy], context_manager: Optional[ContextManager]
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the DependencyAnalyzer.

Args:
    project_root: The root directory of the project
    multilang_manager: Optional multi-language support manager
    hierarchy_manager: Optional hierarchy management instance
    context_manager: Optional context management instance
2024-11-14 21:42:41,802 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:42:43,229 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:42:43,229 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 461c6439790fd423ac9dcc5f737b77d0
2024-11-14 21:42:43,229 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 461c6439790fd423ac9dcc5f737b77d0 with key: docstring:v1:461c6439790fd423ac9dcc5f737b77d0
2024-11-14 21:42:43,229 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 461c6439790fd423ac9dcc5f737b77d0
2024-11-14 21:42:43,230 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:42:43,230 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:42:43,230 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:42:43,230 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:42:43,230 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:42:43,230 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:42:43,230 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:42:43,231 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _extract_python_dependencies
        Parameters: self: Any, tree: ast.AST
        Returns: Dict[str, Set[str]]
        Decorators: None
        Exceptions: None
        Existing docstring: Extract dependencies from Python AST.
2024-11-14 21:42:43,231 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:42:44,687 - docstring_workflow - ERROR - logger - log_error - Error processing function _extract_python_dependencies: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:42:44,687 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f4857b58c1eae304f2012cb1931f40e0
2024-11-14 21:42:44,687 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f4857b58c1eae304f2012cb1931f40e0 with key: docstring:v1:f4857b58c1eae304f2012cb1931f40e0
2024-11-14 21:42:44,687 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f4857b58c1eae304f2012cb1931f40e0
2024-11-14 21:42:44,688 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:42:44,688 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:42:44,688 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:42:44,688 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:42:44,688 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:42:44,688 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:42:44,688 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:42:44,689 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _extract_javascript_dependencies
        Parameters: self: Any, content: str
        Returns: Dict[str, Set[str]]
        Decorators: None
        Exceptions: None
        Existing docstring: Extract dependencies from JavaScript code.
2024-11-14 21:42:44,689 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:42:46,114 - docstring_workflow - ERROR - logger - log_error - Error processing function _extract_javascript_dependencies: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:42:46,115 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 271e8811db99b7581b15bda400f5af39
2024-11-14 21:42:46,115 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 271e8811db99b7581b15bda400f5af39 with key: docstring:v1:271e8811db99b7581b15bda400f5af39
2024-11-14 21:42:46,115 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 271e8811db99b7581b15bda400f5af39
2024-11-14 21:42:46,115 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:42:46,116 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:42:46,116 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:42:46,116 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:42:46,116 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:42:46,116 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:42:46,116 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:42:46,116 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_module_dependencies
        Parameters: self: Any
        Returns: Dict[str, Set[str]]
        Decorators: None
        Exceptions: None
        Existing docstring: Get the mapping of modules to their dependencies.
2024-11-14 21:42:46,116 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:42:47,489 - docstring_workflow - ERROR - logger - log_error - Error processing function get_module_dependencies: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:42:47,489 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: d067fd84d5c99f70d4adaee2a2d7e310
2024-11-14 21:42:47,489 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: d067fd84d5c99f70d4adaee2a2d7e310 with key: docstring:v1:d067fd84d5c99f70d4adaee2a2d7e310
2024-11-14 21:42:47,489 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: d067fd84d5c99f70d4adaee2a2d7e310
2024-11-14 21:42:47,490 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:42:47,490 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:42:47,490 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:42:47,490 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:42:47,490 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:42:47,490 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:42:47,490 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:42:47,491 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: export_dependency_graph
        Parameters: self: Any, output_path: str
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Export dependency information as a JSON file.

Args:
    output_path: Path to save the dependency graph
2024-11-14 21:42:47,491 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:42:48,788 - docstring_workflow - ERROR - logger - log_error - Error processing function export_dependency_graph: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:42:48,789 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['merge_dependency_graphs']
2024-11-14 21:42:48,789 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 5daab0e4314b59dbbf9ef3186b246ff6
2024-11-14 21:42:48,789 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 5daab0e4314b59dbbf9ef3186b246ff6 with key: docstring:v1:5daab0e4314b59dbbf9ef3186b246ff6
2024-11-14 21:42:48,789 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 5daab0e4314b59dbbf9ef3186b246ff6
2024-11-14 21:42:48,792 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:42:48,792 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:42:48,792 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:42:48,792 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:42:48,792 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:42:48,793 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:42:48,793 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:42:48,793 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: merge_dependency_graphs
        Parameters: graphs: List[Dict[str, Any]]
        Returns: Dict[str, Any]
        Decorators: staticmethod
        Exceptions: None
        Existing docstring: Merge multiple dependency graphs.

Args:
    graphs: List of dependency graphs to merge
    
Returns:
    Merged dependency graph
2024-11-14 21:42:48,793 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:42:50,222 - docstring_workflow - ERROR - logger - log_error - Error processing function merge_dependency_graphs: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:42:50,226 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:42:50,226 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=6, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:42:50,226 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:42:50,226 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:42:50,226 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:42:50,226 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/dependency_analyzer.py
2024-11-14 21:42:50,226 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/dependency_analyzer.py'
2024-11-14 21:42:50,226 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmptbrj5vym/utils.py
2024-11-14 21:42:50,227 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmptbrj5vym/utils.py
2024-11-14 21:42:50,227 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmptbrj5vym/utils.py'
2024-11-14 21:42:50,247 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:42:50,248 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:42:50,248 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:42:50,248 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:42:50,249 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:42:50,249 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:42:50,249 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:42:50,250 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions.
2024-11-14 21:42:50,250 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions from source code.
2024-11-14 21:42:50,250 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['get_all_files', 'format_with_black', 'get_function_hash', 'clone_repo', 'setup_logging']
2024-11-14 21:42:50,250 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 9610d0ae189c32fcfdbc93f452a8cd5c
2024-11-14 21:42:50,250 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 9610d0ae189c32fcfdbc93f452a8cd5c with key: docstring:v1:9610d0ae189c32fcfdbc93f452a8cd5c
2024-11-14 21:42:50,250 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 9610d0ae189c32fcfdbc93f452a8cd5c
2024-11-14 21:42:50,251 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:42:50,251 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:42:50,251 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:42:50,251 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:42:50,251 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:42:50,251 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:42:50,251 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:42:50,252 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_all_files
        Parameters: directory: Any, exclude_dirs: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Retrieve all Python files from a specified directory, excluding certain directories.

This function traverses the given directory recursively and collects paths to all Python
files, while excluding any directories specified in the `exclude_dirs` list.

Args:
    directory (str): The root directory to search for Python files.
    exclude_dirs (list, optional): A list of directory names to exclude from the search.
        Defaults to None, which means no directories are excluded.

Returns:
    list: A list of file paths to Python files found in the directory, excluding specified directories.

Raises:
    ValueError: If the provided directory does not exist or is not accessible.
2024-11-14 21:42:50,252 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:42:51,567 - docstring_workflow - ERROR - logger - log_error - Error processing function get_all_files: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:42:51,567 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f3960ab0d9879de8d2700df70f0eefad
2024-11-14 21:42:51,567 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f3960ab0d9879de8d2700df70f0eefad with key: docstring:v1:f3960ab0d9879de8d2700df70f0eefad
2024-11-14 21:42:51,567 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f3960ab0d9879de8d2700df70f0eefad
2024-11-14 21:42:51,568 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:42:51,568 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:42:51,569 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:42:51,570 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:42:51,570 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:42:51,570 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:42:51,570 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:42:51,570 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: format_with_black
        Parameters: file_content: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Format Python code using the Black code formatter.

This function attempts to format the provided Python source code string using Black,
a popular code formatter. If formatting is successful, the formatted code is returned.

Args:
    file_content (str): The Python source code to format.

Returns:
    tuple: A tuple containing a boolean indicating success and the formatted content.
        If formatting fails, the original content is returned.

Raises:
    ImportError: If the Black library is not installed.
    Exception: If any other error occurs during formatting.
2024-11-14 21:42:51,570 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:42:52,935 - docstring_workflow - ERROR - logger - log_error - Error processing function format_with_black: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:42:52,936 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 02887713b6a6cf450aa0a619726adff1
2024-11-14 21:42:52,936 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 02887713b6a6cf450aa0a619726adff1 with key: docstring:v1:02887713b6a6cf450aa0a619726adff1
2024-11-14 21:42:52,936 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 02887713b6a6cf450aa0a619726adff1
2024-11-14 21:42:52,936 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:42:52,937 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:42:52,937 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:42:52,937 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:42:52,937 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:42:52,937 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:42:52,937 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:42:52,937 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_function_hash
        Parameters: function_content: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Generate a SHA-256 hash for a function's content.

This function computes a SHA-256 hash of the provided function content string,
which can be used to uniquely identify the function based on its code.

Args:
    function_content (str): The content of the function to hash.

Returns:
    str: A SHA-256 hash of the function content.
2024-11-14 21:42:52,937 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:42:54,322 - docstring_workflow - ERROR - logger - log_error - Error processing function get_function_hash: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:42:54,322 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 019e46eae53ebe366160639c2df73b27
2024-11-14 21:42:54,322 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 019e46eae53ebe366160639c2df73b27 with key: docstring:v1:019e46eae53ebe366160639c2df73b27
2024-11-14 21:42:54,322 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 019e46eae53ebe366160639c2df73b27
2024-11-14 21:42:54,323 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:42:54,323 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:42:54,323 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:42:54,323 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:42:54,324 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:42:54,324 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:42:54,324 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:42:54,324 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: clone_repo
        Parameters: repo_url: Any, clone_dir: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Clone a Git repository to a specified local directory.

This function uses the Git command-line tool to clone a repository from the given URL
into the specified local directory. If the directory already exists, it is removed before cloning.

Args:
    repo_url (str): The URL of the Git repository to clone.
    clone_dir (str): The local directory to clone the repository into.

Raises:
    SystemExit: If the cloning process fails due to a Git error or other issues.
2024-11-14 21:42:54,324 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:42:55,735 - docstring_workflow - ERROR - logger - log_error - Error processing function clone_repo: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:42:55,735 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 9f7c2ab305c57d577dedbb6e0cfd7a2e
2024-11-14 21:42:55,735 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 9f7c2ab305c57d577dedbb6e0cfd7a2e with key: docstring:v1:9f7c2ab305c57d577dedbb6e0cfd7a2e
2024-11-14 21:42:55,735 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 9f7c2ab305c57d577dedbb6e0cfd7a2e
2024-11-14 21:42:55,736 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:42:55,736 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:42:55,736 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:42:55,736 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:42:55,736 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:42:55,736 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:42:55,736 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:42:55,737 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: setup_logging
        Parameters: None
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Configure logging settings for the application.

This function sets up the logging configuration to output log messages to both
the console and a log file named 'error.log'. The log level is set to INFO, and
the log format includes the timestamp, log level, and message.

Returns:
    None
2024-11-14 21:42:55,737 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:42:57,068 - docstring_workflow - ERROR - logger - log_error - Error processing function setup_logging: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:42:57,068 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['create_complexity_indicator']
2024-11-14 21:42:57,068 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 3b090873ab175dcc7d97c5b687ed0eb0
2024-11-14 21:42:57,068 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 3b090873ab175dcc7d97c5b687ed0eb0 with key: docstring:v1:3b090873ab175dcc7d97c5b687ed0eb0
2024-11-14 21:42:57,069 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 3b090873ab175dcc7d97c5b687ed0eb0
2024-11-14 21:42:57,071 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:42:57,072 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:42:57,072 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:42:57,072 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:42:57,072 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:42:57,072 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:42:57,072 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:42:57,072 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: create_complexity_indicator
        Parameters: complexity: Optional[int]
        Returns: str
        Decorators: None
        Exceptions: None
        Existing docstring: Create a visual indicator for code complexity.

Args:
    complexity (Optional[int]): An optional integer representing complexity.

Returns:
    str: A string representing the complexity level with an emoji.
2024-11-14 21:42:57,072 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:42:58,481 - docstring_workflow - ERROR - logger - log_error - Error processing function create_complexity_indicator: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:42:58,484 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:42:58,484 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=6, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:42:58,484 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:42:58,484 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:42:58,484 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:42:58,484 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/utils.py
2024-11-14 21:42:58,484 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/utils.py'
2024-11-14 21:42:58,484 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmptbrj5vym/validation.py
2024-11-14 21:42:58,484 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmptbrj5vym/validation.py
2024-11-14 21:42:58,485 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmptbrj5vym/validation.py'
2024-11-14 21:42:58,505 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:42:58,506 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:42:58,506 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:42:58,506 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:42:58,506 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:42:58,507 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:42:58,507 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:42:58,510 - docstring_workflow - INFO - logger - log_info - Extracted 18 functions.
2024-11-14 21:42:58,510 - docstring_workflow - INFO - logger - log_info - Extracted 18 functions from source code.
2024-11-14 21:42:58,510 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['validate_input_files', 'validate_git_repository', 'validate_function_analysis_input', 'validate_docstring_content', 'validate_analysis_config']
2024-11-14 21:42:58,510 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 00f1db43d8d4427d2bee33e88d9c59ee
2024-11-14 21:42:58,510 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 00f1db43d8d4427d2bee33e88d9c59ee with key: docstring:v1:00f1db43d8d4427d2bee33e88d9c59ee
2024-11-14 21:42:58,510 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 00f1db43d8d4427d2bee33e88d9c59ee
2024-11-14 21:42:58,511 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:42:58,511 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:42:58,511 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:42:58,511 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:42:58,511 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:42:58,511 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:42:58,511 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:42:58,511 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_input_files
        Parameters: files: List[str]
        Returns: List[str]
        Decorators: None
        Exceptions: ValidationError
        Existing docstring: Validate a list of input files.

Args:
    files: List of file paths to validate
    
Returns:
    List of validated absolute file paths
    
Raises:
    ValidationError: If any file is invalid
2024-11-14 21:42:58,511 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:42:59,851 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_input_files: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:42:59,851 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 7c6feea887ee01fa771bfb4bb6c890d6
2024-11-14 21:42:59,851 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 7c6feea887ee01fa771bfb4bb6c890d6 with key: docstring:v1:7c6feea887ee01fa771bfb4bb6c890d6
2024-11-14 21:42:59,852 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 7c6feea887ee01fa771bfb4bb6c890d6
2024-11-14 21:42:59,852 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:42:59,853 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:42:59,853 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:42:59,853 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:42:59,853 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:42:59,853 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:42:59,853 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:42:59,853 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_git_repository
        Parameters: url: str, branch: Optional[str]
        Returns: GitRepoValidation
        Decorators: None
        Exceptions: ValidationError
        Existing docstring: Validate a Git repository URL and branch.

Args:
    url: Repository URL to validate
    branch: Optional branch name
    
Returns:
    Validated GitRepoValidation instance
    
Raises:
    ValidationError: If the repository URL or branch is invalid
2024-11-14 21:42:59,854 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:01,096 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_git_repository: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:01,096 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 7003c9b5e83b8a6feb581b52e1c6ad94
2024-11-14 21:43:01,096 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 7003c9b5e83b8a6feb581b52e1c6ad94 with key: docstring:v1:7003c9b5e83b8a6feb581b52e1c6ad94
2024-11-14 21:43:01,096 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 7003c9b5e83b8a6feb581b52e1c6ad94
2024-11-14 21:43:01,097 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:01,097 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:01,097 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:01,097 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:01,097 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:01,097 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:01,097 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:01,098 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_function_analysis_input
        Parameters: func_data: Dict[str, Any]
        Returns: FunctionAnalysisInput
        Decorators: None
        Exceptions: ValidationError
        Existing docstring: Validate function analysis input data.

Args:
    func_data: Dictionary containing function data to validate
    
Returns:
    Validated FunctionAnalysisInput instance
    
Raises:
    ValidationError: If the input data is invalid
2024-11-14 21:43:01,098 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:02,385 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_function_analysis_input: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:02,386 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 4b450775414601e2325c1f23891ae615
2024-11-14 21:43:02,386 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 4b450775414601e2325c1f23891ae615 with key: docstring:v1:4b450775414601e2325c1f23891ae615
2024-11-14 21:43:02,386 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 4b450775414601e2325c1f23891ae615
2024-11-14 21:43:02,386 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:02,387 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:02,387 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:02,387 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:02,387 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:02,387 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:02,387 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:02,387 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_docstring_content
        Parameters: content: Dict[str, Any]
        Returns: DocstringValidation
        Decorators: None
        Exceptions: ValidationError
        Existing docstring: Validate docstring content.

Args:
    content: Dictionary containing docstring content to validate
    
Returns:
    Validated DocstringValidation instance
    
Raises:
    ValidationError: If the docstring content is invalid
2024-11-14 21:43:02,388 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:03,666 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_docstring_content: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:03,667 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 15981ffc90779b324885d50b6b995499
2024-11-14 21:43:03,667 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 15981ffc90779b324885d50b6b995499 with key: docstring:v1:15981ffc90779b324885d50b6b995499
2024-11-14 21:43:03,667 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 15981ffc90779b324885d50b6b995499
2024-11-14 21:43:03,668 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:03,668 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:03,668 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:03,668 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:03,668 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:03,668 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:03,668 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:03,669 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_analysis_config
        Parameters: config: Dict[str, Any]
        Returns: AnalysisConfiguration
        Decorators: None
        Exceptions: ValidationError
        Existing docstring: Validate analysis configuration.

Args:
    config: Dictionary containing configuration settings to validate
    
Returns:
    Validated AnalysisConfiguration instance
    
Raises:
    ValidationError: If the configuration is invalid
2024-11-14 21:43:03,669 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:05,095 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_analysis_config: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:05,095 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['validate_service_configuration', 'validate_context_code_segments', 'validate_metadata', 'validate_token_limits', 'validate_path']
2024-11-14 21:43:05,095 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 96de3999ae8c2f0756e8dc20bdc9758a
2024-11-14 21:43:05,095 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 96de3999ae8c2f0756e8dc20bdc9758a with key: docstring:v1:96de3999ae8c2f0756e8dc20bdc9758a
2024-11-14 21:43:05,096 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 96de3999ae8c2f0756e8dc20bdc9758a
2024-11-14 21:43:05,099 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:05,099 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:05,099 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:05,099 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:05,099 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:05,099 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:05,099 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:05,099 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_service_configuration
        Parameters: service: str
        Returns: None
        Decorators: None
        Exceptions: ValidationError
        Existing docstring: Validate that required environment variables are set for the selected service.
2024-11-14 21:43:05,100 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:06,379 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_service_configuration: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:06,379 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 43e0742a9da0cccb6716cc1e08e27205
2024-11-14 21:43:06,380 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 43e0742a9da0cccb6716cc1e08e27205 with key: docstring:v1:43e0742a9da0cccb6716cc1e08e27205
2024-11-14 21:43:06,380 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 43e0742a9da0cccb6716cc1e08e27205
2024-11-14 21:43:06,380 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:06,380 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:06,381 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:06,381 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:06,381 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:06,381 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:06,381 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:06,381 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_context_code_segments
        Parameters: context_code_segments: List[str], max_context_tokens: int, model_name: str
        Returns: List[str]
        Decorators: None
        Exceptions: None
        Existing docstring: Validate and select context code segments within token limits.
2024-11-14 21:43:06,381 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:07,767 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_context_code_segments: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:07,768 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 94c829edb0e4a03b6a390ea627c72df7
2024-11-14 21:43:07,768 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 94c829edb0e4a03b6a390ea627c72df7 with key: docstring:v1:94c829edb0e4a03b6a390ea627c72df7
2024-11-14 21:43:07,768 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 94c829edb0e4a03b6a390ea627c72df7
2024-11-14 21:43:07,768 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:07,769 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:07,769 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:07,769 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:07,769 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:07,769 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:07,769 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:07,769 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_metadata
        Parameters: metadata: Dict[str, Any]
        Returns: str
        Decorators: None
        Exceptions: ValidationError
        Existing docstring: Validate and format metadata for inclusion in prompts.
2024-11-14 21:43:07,769 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:09,109 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_metadata: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:09,109 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: e2cbc6373908dbdeafb97132f1a5d834
2024-11-14 21:43:09,109 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: e2cbc6373908dbdeafb97132f1a5d834 with key: docstring:v1:e2cbc6373908dbdeafb97132f1a5d834
2024-11-14 21:43:09,109 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: e2cbc6373908dbdeafb97132f1a5d834
2024-11-14 21:43:09,110 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:09,110 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:09,110 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:09,110 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:09,111 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:09,111 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:09,111 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:09,111 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_token_limits
        Parameters: context_window: int, max_response_tokens: int, system_prompt_tokens: int
        Returns: int
        Decorators: None
        Exceptions: None
        Existing docstring: Validate and calculate available prompt tokens.
2024-11-14 21:43:09,111 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:10,402 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_token_limits: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:10,402 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: dd145893cf5857b2d33efe26bedceed7
2024-11-14 21:43:10,402 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: dd145893cf5857b2d33efe26bedceed7 with key: docstring:v1:dd145893cf5857b2d33efe26bedceed7
2024-11-14 21:43:10,402 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: dd145893cf5857b2d33efe26bedceed7
2024-11-14 21:43:10,403 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:10,403 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:10,404 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:10,404 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:10,404 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:10,405 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:10,405 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:10,405 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_path
        Parameters: self: Any
        Returns: str
        Decorators: property
        Exceptions: ValidationError
        Existing docstring: Validate that the path exists and return its absolute path.

Returns:
    str: The absolute path if valid.

Raises:
    ValidationError: If the path does not exist.
2024-11-14 21:43:10,405 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:11,701 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_path: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:11,701 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['validate_git_url', 'validate_module_name', 'validate_dict_list', 'validate_code', 'validate_params']
2024-11-14 21:43:11,701 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 988308cbc58e2ec6bca1b8a25241f0a2
2024-11-14 21:43:11,701 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 988308cbc58e2ec6bca1b8a25241f0a2 with key: docstring:v1:988308cbc58e2ec6bca1b8a25241f0a2
2024-11-14 21:43:11,701 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 988308cbc58e2ec6bca1b8a25241f0a2
2024-11-14 21:43:11,702 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:11,702 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:11,702 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:11,702 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:11,702 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:11,702 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:11,703 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:11,703 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_git_url
        Parameters: self: Any
        Returns: HttpUrl
        Decorators: property
        Exceptions: ValidationError
        Existing docstring: Validate that the URL is a valid Git repository URL.

Returns:
    HttpUrl: The validated Git repository URL.

Raises:
    ValidationError: If the URL is not a valid Git repository URL.
2024-11-14 21:43:11,703 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:13,048 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_git_url: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:13,048 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: bfe78a2471a17ff0218ff2565f950e18
2024-11-14 21:43:13,048 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: bfe78a2471a17ff0218ff2565f950e18 with key: docstring:v1:bfe78a2471a17ff0218ff2565f950e18
2024-11-14 21:43:13,049 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: bfe78a2471a17ff0218ff2565f950e18
2024-11-14 21:43:13,051 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:13,052 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:13,052 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:13,052 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:13,052 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:13,052 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:13,052 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:13,052 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_module_name
        Parameters: cls: Any, v: Any
        Returns: Any
        Decorators: validator('module')
        Exceptions: ValidationError
        Existing docstring: Validate module name format.
2024-11-14 21:43:13,052 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:14,485 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_module_name: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:14,485 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 40dabbcdd1380e6284fbe4265d1503ff
2024-11-14 21:43:14,485 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 40dabbcdd1380e6284fbe4265d1503ff with key: docstring:v1:40dabbcdd1380e6284fbe4265d1503ff
2024-11-14 21:43:14,485 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 40dabbcdd1380e6284fbe4265d1503ff
2024-11-14 21:43:14,486 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:14,486 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:14,486 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:14,486 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:14,487 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:14,487 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:14,487 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:14,487 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_dict_list
        Parameters: cls: Any, v: Any
        Returns: Any
        Decorators: validator('raises', 'affects', 'uses')
        Exceptions: ValidationError
        Existing docstring: Validate dictionary lists have required keys.
2024-11-14 21:43:14,487 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:15,715 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_dict_list: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:15,715 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: afcd76d2b53d9728da21f47ed0c6ad4b
2024-11-14 21:43:15,715 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: afcd76d2b53d9728da21f47ed0c6ad4b with key: docstring:v1:afcd76d2b53d9728da21f47ed0c6ad4b
2024-11-14 21:43:15,715 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: afcd76d2b53d9728da21f47ed0c6ad4b
2024-11-14 21:43:15,716 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:15,716 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:15,716 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:15,716 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:15,716 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:15,716 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:15,716 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:15,717 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_code
        Parameters: self: Any
        Returns: str
        Decorators: property
        Exceptions: ValidationError
        Existing docstring: Validate that the code is not empty.
2024-11-14 21:43:15,717 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:17,258 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_code: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:17,258 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: ae1627da380e0fd27bac274fa578672e
2024-11-14 21:43:17,258 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: ae1627da380e0fd27bac274fa578672e with key: docstring:v1:ae1627da380e0fd27bac274fa578672e
2024-11-14 21:43:17,259 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: ae1627da380e0fd27bac274fa578672e
2024-11-14 21:43:17,259 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:17,259 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:17,259 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:17,260 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:17,260 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:17,260 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:17,260 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:17,260 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_params
        Parameters: self: Any
        Returns: List[Tuple[str, str]]
        Decorators: property
        Exceptions: ValidationError
        Existing docstring: Validate parameter format.
2024-11-14 21:43:17,260 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:18,664 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_params: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:18,664 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['validate_output_file', 'validate_args', 'validate_patterns']
2024-11-14 21:43:18,664 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 7d32779bdce1117e0c5ebb6174d123bc
2024-11-14 21:43:18,664 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 7d32779bdce1117e0c5ebb6174d123bc with key: docstring:v1:7d32779bdce1117e0c5ebb6174d123bc
2024-11-14 21:43:18,664 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 7d32779bdce1117e0c5ebb6174d123bc
2024-11-14 21:43:18,665 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:18,665 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:18,665 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:18,665 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:18,666 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:18,666 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:18,666 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:18,666 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_output_file
        Parameters: self: Any
        Returns: str
        Decorators: property
        Exceptions: ValidationError
        Existing docstring: Validate output file path is writable.
2024-11-14 21:43:18,666 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:19,932 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_output_file: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:19,932 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: b829e915da401dca02e3fb2cd20d7f74
2024-11-14 21:43:19,932 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: b829e915da401dca02e3fb2cd20d7f74 with key: docstring:v1:b829e915da401dca02e3fb2cd20d7f74
2024-11-14 21:43:19,932 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: b829e915da401dca02e3fb2cd20d7f74
2024-11-14 21:43:19,933 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:19,933 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:19,933 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:19,933 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:19,934 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:19,934 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:19,934 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:19,934 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_args
        Parameters: self: Any
        Returns: Dict[str, str]
        Decorators: property
        Exceptions: ValidationError
        Existing docstring: Validate argument descriptions.
2024-11-14 21:43:19,934 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:21,280 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_args: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:21,281 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 2d67323c9969a7fe5a56210482882757
2024-11-14 21:43:21,281 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 2d67323c9969a7fe5a56210482882757 with key: docstring:v1:2d67323c9969a7fe5a56210482882757
2024-11-14 21:43:21,281 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 2d67323c9969a7fe5a56210482882757
2024-11-14 21:43:21,284 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:21,284 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:21,284 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:21,284 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:21,284 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:21,284 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:21,284 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:21,284 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_patterns
        Parameters: self: Any
        Returns: List[str]
        Decorators: property
        Exceptions: ValidationError
        Existing docstring: Validate regex patterns are valid.
2024-11-14 21:43:21,285 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:22,721 - docstring_workflow - ERROR - logger - log_error - Error processing function validate_patterns: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:22,726 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:43:22,726 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=18, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:43:22,726 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:43:22,727 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:43:22,727 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:43:22,727 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/validation.py
2024-11-14 21:43:22,727 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/validation.py'
2024-11-14 21:43:22,727 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmptbrj5vym/context_optimizer.py
2024-11-14 21:43:22,727 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmptbrj5vym/context_optimizer.py
2024-11-14 21:43:22,727 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmptbrj5vym/context_optimizer.py'
2024-11-14 21:43:22,748 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:43:22,748 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:43:22,748 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:43:22,749 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:43:22,749 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:43:22,749 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:43:22,749 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:43:22,751 - docstring_workflow - INFO - logger - log_info - Extracted 3 functions.
2024-11-14 21:43:22,751 - docstring_workflow - INFO - logger - log_info - Extracted 3 functions from source code.
2024-11-14 21:43:22,751 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__init__', '__init__', '__init__']
2024-11-14 21:43:22,752 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: c2493567ec1213cfa3fcc0cbf2ce42c1
2024-11-14 21:43:22,752 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: c2493567ec1213cfa3fcc0cbf2ce42c1 with key: docstring:v1:c2493567ec1213cfa3fcc0cbf2ce42c1
2024-11-14 21:43:22,752 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: c2493567ec1213cfa3fcc0cbf2ce42c1
2024-11-14 21:43:22,752 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:22,752 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:22,752 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:22,752 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:22,752 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:22,753 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:22,753 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:22,753 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, model_name: str
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the token predictor.
2024-11-14 21:43:22,753 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:24,135 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:24,136 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 74784b5204978384eb3ee3f65036a1c7
2024-11-14 21:43:24,136 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 74784b5204978384eb3ee3f65036a1c7 with key: docstring:v1:74784b5204978384eb3ee3f65036a1c7
2024-11-14 21:43:24,136 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 74784b5204978384eb3ee3f65036a1c7
2024-11-14 21:43:24,136 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:24,137 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:24,137 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:24,137 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:24,137 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:24,137 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:24,137 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:24,137 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the context prioritizer.
2024-11-14 21:43:24,137 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:25,551 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:25,551 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 28bdb886cdb568a4843dc437f72f4873
2024-11-14 21:43:25,551 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 28bdb886cdb568a4843dc437f72f4873 with key: docstring:v1:28bdb886cdb568a4843dc437f72f4873
2024-11-14 21:43:25,552 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 28bdb886cdb568a4843dc437f72f4873
2024-11-14 21:43:25,552 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:25,552 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:25,553 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:25,553 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:25,553 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:25,553 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:25,553 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:25,553 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, model_name: str, max_tokens: int, target_token_usage: float
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the context window manager.

Args:
    model_name: Name of the model for tokenization
    max_tokens: Maximum tokens allowed in context
    target_token_usage: Target proportion of max_tokens to use
2024-11-14 21:43:25,553 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:26,831 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:26,835 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:43:26,835 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=3, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:43:26,835 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:43:26,835 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:43:26,835 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:43:26,835 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/context_optimizer.py
2024-11-14 21:43:26,836 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/context_optimizer.py'
2024-11-14 21:43:26,836 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmptbrj5vym/exceptions.py
2024-11-14 21:43:26,836 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmptbrj5vym/exceptions.py
2024-11-14 21:43:26,836 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmptbrj5vym/exceptions.py'
2024-11-14 21:43:26,857 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:43:26,857 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:43:26,857 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:43:26,857 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:43:26,857 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:43:26,857 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:43:26,858 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:43:26,858 - docstring_workflow - INFO - logger - log_info - Extracted 0 functions.
2024-11-14 21:43:26,858 - docstring_workflow - INFO - logger - log_info - Extracted 0 functions from source code.
2024-11-14 21:43:26,858 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:43:26,858 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=0, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:43:26,858 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:43:26,858 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:43:26,858 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:43:26,858 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/exceptions.py
2024-11-14 21:43:26,858 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/exceptions.py'
2024-11-14 21:43:26,858 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmptbrj5vym/metadata_manager.py
2024-11-14 21:43:26,859 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmptbrj5vym/metadata_manager.py
2024-11-14 21:43:26,859 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmptbrj5vym/metadata_manager.py'
2024-11-14 21:43:26,880 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:43:26,880 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:43:26,880 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:43:26,880 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:43:26,880 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:43:26,880 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:43:26,880 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:43:26,884 - docstring_workflow - INFO - logger - log_info - Extracted 14 functions.
2024-11-14 21:43:26,884 - docstring_workflow - INFO - logger - log_info - Extracted 14 functions from source code.
2024-11-14 21:43:26,884 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__post_init__', '__init__', '_init_db', '_get_connection', '_start_background_flush']
2024-11-14 21:43:26,884 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: c0e8002f3d69f901bc40bdc1d4a1b239
2024-11-14 21:43:26,884 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: c0e8002f3d69f901bc40bdc1d4a1b239 with key: docstring:v1:c0e8002f3d69f901bc40bdc1d4a1b239
2024-11-14 21:43:26,884 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: c0e8002f3d69f901bc40bdc1d4a1b239
2024-11-14 21:43:26,885 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:26,885 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:26,885 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:26,885 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:26,885 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:26,885 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:26,885 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:26,886 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __post_init__
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize default values.
2024-11-14 21:43:26,886 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:28,245 - docstring_workflow - ERROR - logger - log_error - Error processing function __post_init__: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:28,245 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: cb99e304d1a8b88301f95a4b38537105
2024-11-14 21:43:28,246 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: cb99e304d1a8b88301f95a4b38537105 with key: docstring:v1:cb99e304d1a8b88301f95a4b38537105
2024-11-14 21:43:28,246 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: cb99e304d1a8b88301f95a4b38537105
2024-11-14 21:43:28,246 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:28,246 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:28,247 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:28,247 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:28,247 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:28,247 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:28,247 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:28,247 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: __init__
        Parameters: self: Any, db_path: str, batch_size: int
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the metadata manager.

Args:
    db_path: Path to SQLite database
    batch_size: Size of batch operations
2024-11-14 21:43:28,247 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:29,614 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:29,615 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 0ce7f2a2711e92611e8391b2f99432d4
2024-11-14 21:43:29,615 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 0ce7f2a2711e92611e8391b2f99432d4 with key: docstring:v1:0ce7f2a2711e92611e8391b2f99432d4
2024-11-14 21:43:29,615 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 0ce7f2a2711e92611e8391b2f99432d4
2024-11-14 21:43:29,615 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:29,616 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:29,616 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:29,616 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:29,616 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:29,616 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:29,616 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:29,617 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _init_db
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize database schema.
2024-11-14 21:43:29,617 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:31,018 - docstring_workflow - ERROR - logger - log_error - Error processing function _init_db: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:31,018 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: c2a498d09c49c0fb33483ffec219b59d
2024-11-14 21:43:31,018 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: c2a498d09c49c0fb33483ffec219b59d with key: docstring:v1:c2a498d09c49c0fb33483ffec219b59d
2024-11-14 21:43:31,019 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: c2a498d09c49c0fb33483ffec219b59d
2024-11-14 21:43:31,019 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:31,019 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:31,020 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:31,020 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:31,020 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:31,020 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:31,020 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:31,020 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _get_connection
        Parameters: self: Any
        Returns: Any
        Decorators: contextmanager
        Exceptions: None
        Existing docstring: Context manager for database connections.
2024-11-14 21:43:31,021 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:32,312 - docstring_workflow - ERROR - logger - log_error - Error processing function _get_connection: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:32,312 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f17fab3f55ae675925815c68d68ecb9f
2024-11-14 21:43:32,312 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f17fab3f55ae675925815c68d68ecb9f with key: docstring:v1:f17fab3f55ae675925815c68d68ecb9f
2024-11-14 21:43:32,312 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f17fab3f55ae675925815c68d68ecb9f
2024-11-14 21:43:32,313 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:32,313 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:32,313 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:32,313 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:32,313 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:32,313 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:32,314 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:32,314 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _start_background_flush
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Start background thread for flushing updates.
2024-11-14 21:43:32,314 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:33,679 - docstring_workflow - ERROR - logger - log_error - Error processing function _start_background_flush: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:33,679 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['_background_flush', 'add_or_update_entry', 'get_entry', '_row_to_entry', 'flush']
2024-11-14 21:43:33,679 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 7b7f586d3dc6c7ced049414a9b2fe7b6
2024-11-14 21:43:33,679 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 7b7f586d3dc6c7ced049414a9b2fe7b6 with key: docstring:v1:7b7f586d3dc6c7ced049414a9b2fe7b6
2024-11-14 21:43:33,679 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 7b7f586d3dc6c7ced049414a9b2fe7b6
2024-11-14 21:43:33,680 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:33,680 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:33,680 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:33,680 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:33,681 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:33,681 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:33,681 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:33,681 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _background_flush
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Background thread for periodic flushing of updates.
2024-11-14 21:43:33,681 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:35,059 - docstring_workflow - ERROR - logger - log_error - Error processing function _background_flush: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:35,059 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 241cded7b15503e5723124feba33a277
2024-11-14 21:43:35,059 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 241cded7b15503e5723124feba33a277 with key: docstring:v1:241cded7b15503e5723124feba33a277
2024-11-14 21:43:35,059 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 241cded7b15503e5723124feba33a277
2024-11-14 21:43:35,060 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:35,060 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:35,060 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:35,061 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:35,061 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:35,061 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:35,061 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:35,061 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: add_or_update_entry
        Parameters: self: Any, entry: MetadataEntry
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Add or update a metadata entry.
2024-11-14 21:43:35,061 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:36,293 - docstring_workflow - ERROR - logger - log_error - Error processing function add_or_update_entry: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:36,293 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 5bf00a1140aeaaaa7f78f697edbb2c77
2024-11-14 21:43:36,293 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 5bf00a1140aeaaaa7f78f697edbb2c77 with key: docstring:v1:5bf00a1140aeaaaa7f78f697edbb2c77
2024-11-14 21:43:36,293 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 5bf00a1140aeaaaa7f78f697edbb2c77
2024-11-14 21:43:36,296 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:36,296 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:36,297 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:36,297 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:36,297 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:36,297 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:36,297 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:36,297 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_entry
        Parameters: self: Any, segment_id: str
        Returns: Optional[MetadataEntry]
        Decorators: None
        Exceptions: None
        Existing docstring: Retrieve a metadata entry.
2024-11-14 21:43:36,297 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:37,776 - docstring_workflow - ERROR - logger - log_error - Error processing function get_entry: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:37,776 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 90323cd2cf32fd1c82d0cce15721690a
2024-11-14 21:43:37,776 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 90323cd2cf32fd1c82d0cce15721690a with key: docstring:v1:90323cd2cf32fd1c82d0cce15721690a
2024-11-14 21:43:37,776 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 90323cd2cf32fd1c82d0cce15721690a
2024-11-14 21:43:37,777 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:37,777 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:37,777 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:37,777 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:37,777 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:37,777 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:37,778 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:37,778 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _row_to_entry
        Parameters: self: Any, row: Any
        Returns: MetadataEntry
        Decorators: None
        Exceptions: None
        Existing docstring: Convert database row to MetadataEntry.
2024-11-14 21:43:37,778 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:38,980 - docstring_workflow - ERROR - logger - log_error - Error processing function _row_to_entry: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:38,981 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: be146677d6c196849c9707da5f5a7403
2024-11-14 21:43:38,981 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: be146677d6c196849c9707da5f5a7403 with key: docstring:v1:be146677d6c196849c9707da5f5a7403
2024-11-14 21:43:38,981 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: be146677d6c196849c9707da5f5a7403
2024-11-14 21:43:38,982 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:38,982 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:38,982 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:38,982 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:38,982 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:38,982 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:38,982 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:38,982 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: flush
        Parameters: self: Any
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Flush pending updates to database.
2024-11-14 21:43:38,983 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:40,447 - docstring_workflow - ERROR - logger - log_error - Error processing function flush: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:40,447 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['cleanup', 'query_by_language', 'query_by_hierarchy', '_recover_corrupted_entry']
2024-11-14 21:43:40,447 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: a778db16896e59fa010f0452110dd7c7
2024-11-14 21:43:40,448 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: a778db16896e59fa010f0452110dd7c7 with key: docstring:v1:a778db16896e59fa010f0452110dd7c7
2024-11-14 21:43:40,448 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: a778db16896e59fa010f0452110dd7c7
2024-11-14 21:43:40,448 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:40,448 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:40,449 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:40,449 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:40,449 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:40,449 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:40,449 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:40,449 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: cleanup
        Parameters: self: Any
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Clean up resources.
2024-11-14 21:43:40,449 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:41,650 - docstring_workflow - ERROR - logger - log_error - Error processing function cleanup: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:41,650 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 4f19055b4ae9d830eb8501b1496e9b86
2024-11-14 21:43:41,650 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 4f19055b4ae9d830eb8501b1496e9b86 with key: docstring:v1:4f19055b4ae9d830eb8501b1496e9b86
2024-11-14 21:43:41,650 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 4f19055b4ae9d830eb8501b1496e9b86
2024-11-14 21:43:41,651 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:41,651 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:41,651 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:41,651 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:41,651 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:41,651 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:41,651 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:41,652 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: query_by_language
        Parameters: self: Any, language: str
        Returns: List[MetadataEntry]
        Decorators: None
        Exceptions: None
        Existing docstring: Query entries by programming language.
2024-11-14 21:43:41,652 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:43,094 - docstring_workflow - ERROR - logger - log_error - Error processing function query_by_language: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:43,094 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 73336407ad38aa159010aeed6073ca18
2024-11-14 21:43:43,094 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 73336407ad38aa159010aeed6073ca18 with key: docstring:v1:73336407ad38aa159010aeed6073ca18
2024-11-14 21:43:43,094 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 73336407ad38aa159010aeed6073ca18
2024-11-14 21:43:43,095 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:43,095 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:43,095 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:43,095 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:43,095 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:43,095 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:43,096 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:43,096 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: query_by_hierarchy
        Parameters: self: Any, path_prefix: str
        Returns: List[MetadataEntry]
        Decorators: None
        Exceptions: None
        Existing docstring: Query entries by hierarchy path prefix.
2024-11-14 21:43:43,096 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:44,470 - docstring_workflow - ERROR - logger - log_error - Error processing function query_by_hierarchy: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:44,470 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 6a0726d59caf18df8aef39dee4e86883
2024-11-14 21:43:44,470 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 6a0726d59caf18df8aef39dee4e86883 with key: docstring:v1:6a0726d59caf18df8aef39dee4e86883
2024-11-14 21:43:44,470 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 6a0726d59caf18df8aef39dee4e86883
2024-11-14 21:43:44,474 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:44,474 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:44,475 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:44,475 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:44,475 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:44,475 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:44,475 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:44,475 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _recover_corrupted_entry
        Parameters: self: Any, segment_id: str
        Returns: Optional[MetadataEntry]
        Decorators: None
        Exceptions: None
        Existing docstring: Attempt to recover corrupted metadata entry.
2024-11-14 21:43:44,476 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:45,867 - docstring_workflow - ERROR - logger - log_error - Error processing function _recover_corrupted_entry: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:45,871 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:43:45,871 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=14, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:43:45,871 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:43:45,871 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:43:45,871 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:43:45,871 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/metadata_manager.py
2024-11-14 21:43:45,871 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/metadata_manager.py'
2024-11-14 21:43:45,872 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmptbrj5vym/workflow.py
2024-11-14 21:43:45,872 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmptbrj5vym/workflow.py
2024-11-14 21:43:45,872 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmptbrj5vym/workflow.py'
2024-11-14 21:43:45,893 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:43:45,893 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:43:45,893 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:43:45,894 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:43:45,894 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:43:45,894 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:43:45,894 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:43:45,896 - docstring_workflow - INFO - logger - log_info - Extracted 1 functions.
2024-11-14 21:43:45,896 - docstring_workflow - INFO - logger - log_info - Extracted 1 functions from source code.
2024-11-14 21:43:45,896 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['write_analysis_to_markdown']
2024-11-14 21:43:45,896 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 66d79e58d6d0b47733ce51758ebd7900
2024-11-14 21:43:45,896 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 66d79e58d6d0b47733ce51758ebd7900 with key: docstring:v1:66d79e58d6d0b47733ce51758ebd7900
2024-11-14 21:43:45,896 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 66d79e58d6d0b47733ce51758ebd7900
2024-11-14 21:43:45,896 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:45,897 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:45,897 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:45,897 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:45,897 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:45,897 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:45,897 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:45,898 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: write_analysis_to_markdown
        Parameters: results: Dict[str, Dict], output_file_path: str, repo_dir: str
        Returns: None
        Decorators: None
        Exceptions: WorkflowError
        Existing docstring: Write analysis results to a markdown file.

Args:
    results: Analysis results to write
    output_file_path: Path to output file
    repo_dir: Repository directory path

Raises:
    WorkflowError: If writing fails
2024-11-14 21:43:45,898 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:47,330 - docstring_workflow - ERROR - logger - log_error - Error processing function write_analysis_to_markdown: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:47,334 - docstring_workflow - DEBUG - logger - log_debug - Logging batch completion
2024-11-14 21:43:47,334 - docstring_workflow - INFO - logger - log_info - Batch processing completed: BatchMetrics(total_functions=1, successful=0, failed=0, total_tokens=0, total_time=0.0, average_time_per_function=0.0)
2024-11-14 21:43:47,334 - docstring_workflow - INFO - logger - log_info - Batch processing completed successfully.
2024-11-14 21:43:47,334 - docstring_workflow - DEBUG - logger - log_debug - Ensuring directory exists: output
2024-11-14 21:43:47,334 - docstring_workflow - INFO - logger - log_info - Directory ensured: output
2024-11-14 21:43:47,334 - docstring_workflow - DEBUG - logger - log_debug - Attempting to save updated source code to: output/workflow.py
2024-11-14 21:43:47,334 - docstring_workflow - INFO - logger - log_info - Successfully saved updated source code to 'output/workflow.py'
2024-11-14 21:43:47,335 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmptbrj5vym/config.py
2024-11-14 21:43:47,335 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmptbrj5vym/config.py
2024-11-14 21:43:47,335 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmptbrj5vym/config.py'
2024-11-14 21:43:47,356 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:43:47,356 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:43:47,356 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:43:47,356 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:43:47,357 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:43:47,357 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:43:47,357 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:43:47,360 - docstring_workflow - INFO - logger - log_info - Extracted 11 functions.
2024-11-14 21:43:47,360 - docstring_workflow - INFO - logger - log_info - Extracted 11 functions from source code.
2024-11-14 21:43:47,360 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['resolve_env_variables', 'create_default_config', 'from_dict', 'validate_dsn_if_enabled', 'validate_model']
2024-11-14 21:43:47,361 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: dd9fa54f51a0c254c6f4dbe61098d6a7
2024-11-14 21:43:47,361 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: dd9fa54f51a0c254c6f4dbe61098d6a7 with key: docstring:v1:dd9fa54f51a0c254c6f4dbe61098d6a7
2024-11-14 21:43:47,361 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: dd9fa54f51a0c254c6f4dbe61098d6a7
2024-11-14 21:43:47,361 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:47,361 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:47,361 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:47,362 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:47,362 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:47,362 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:47,362 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:47,362 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: resolve_env_variables
        Parameters: config_dict: dict
        Returns: dict
        Decorators: None
        Exceptions: None
        Existing docstring: Recursively resolve environment variables in the configuration dictionary.

Replaces placeholders like ${VAR_NAME} with the actual environment variable values.
2024-11-14 21:43:47,362 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:48,661 - docstring_workflow - ERROR - logger - log_error - Error processing function resolve_env_variables: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:48,661 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 0653540e388bcedfa427a8997823248a
2024-11-14 21:43:48,661 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 0653540e388bcedfa427a8997823248a with key: docstring:v1:0653540e388bcedfa427a8997823248a
2024-11-14 21:43:48,662 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 0653540e388bcedfa427a8997823248a
2024-11-14 21:43:48,662 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:48,662 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:48,662 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:48,663 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:48,663 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:48,663 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:48,663 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:48,663 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: create_default_config
        Parameters: path: str
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Create a default configuration file.

Args:
    path: Path where to create the configuration file
2024-11-14 21:43:48,663 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:49,972 - docstring_workflow - ERROR - logger - log_error - Error processing function create_default_config: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:49,973 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 61065229154bef3ffa8e61dc58e630b1
2024-11-14 21:43:49,973 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 61065229154bef3ffa8e61dc58e630b1 with key: docstring:v1:61065229154bef3ffa8e61dc58e630b1
2024-11-14 21:43:49,973 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 61065229154bef3ffa8e61dc58e630b1
2024-11-14 21:43:49,973 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:49,974 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:49,974 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:49,974 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:49,974 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:49,974 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:49,974 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:49,974 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: from_dict
        Parameters: cls: Any, data: Dict[str, Any], env_prefix: str
        Returns: 'BaseConfigModel'
        Decorators: classmethod
        Exceptions: None
        Existing docstring: Create an instance from a dictionary, supporting environment variables.

Args:
    data: Configuration dictionary
    env_prefix: Prefix for environment variables
    
Returns:
    Instance of the configuration model
2024-11-14 21:43:49,974 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:51,177 - docstring_workflow - ERROR - logger - log_error - Error processing function from_dict: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:43:51,178 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: d2cae472b82ef6dad547e7ead8f3fd3e
2024-11-14 21:43:51,178 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: d2cae472b82ef6dad547e7ead8f3fd3e with key: docstring:v1:d2cae472b82ef6dad547e7ead8f3fd3e
2024-11-14 21:43:51,178 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: d2cae472b82ef6dad547e7ead8f3fd3e
2024-11-14 21:43:51,178 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:51,178 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:51,179 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:51,179 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:51,179 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:51,179 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:43:51,179 - docstring_workflow - ERROR - logger - log_error - Error calculating complexity: Expected 5, got 4
2024-11-14 21:43:51,179 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: validate_dsn_if_enabled
        Parameters: cls: Any, v: Any, values: Any
        Returns: Any
        Decorators: validator('dsn', always=True)
        Exceptions: ValueError
        Existing docstring: Validate DSN is provided when Sentry is enabled.
2024-11-14 21:43:51,179 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:43:51,688 - docstring_workflow - DEBUG - logger - log_debug - Cleaning up temporary directory: /tmp/tmptbrj5vym
2024-11-14 21:43:54,340 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:43:54,340 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:43:54,341 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:43:54,341 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:43:54,341 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:43:54,341 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:48:39,336 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:48:39,336 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:48:39,336 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:48:39,336 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:48:39,337 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:48:39,337 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:50:41,106 - docstring_workflow - INFO - logger - log_info - Starting test_metrics.
2024-11-14 21:50:41,106 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: example_function
2024-11-14 21:50:41,106 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:50:41,106 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:50:41,106 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:50:41,106 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'example_function' is 4
2024-11-14 21:50:41,106 - docstring_workflow - DEBUG - logger - log_debug - Calculating cognitive complexity for function: example_function
2024-11-14 21:50:41,106 - docstring_workflow - DEBUG - logger - log_debug - Node FunctionDef(name='example_function', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))]), Return(value=Constant(value=0))], decorator_list=[], type_params=[]) is not a nesting construct.
2024-11-14 21:50:41,106 - docstring_workflow - DEBUG - logger - log_debug - Node arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]) is not a nesting construct.
2024-11-14 21:50:41,106 - docstring_workflow - DEBUG - logger - log_debug - Node arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]) does not increment complexity.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))]) is a nesting construct.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Nesting depth increased to 1 at node: If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node Return(value=Constant(value=0)) is not a nesting construct.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node Return(value=Constant(value=0)) increments complexity.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Incremented cognitive complexity at node: Return(value=Constant(value=0))
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node arg(arg='x') is not a nesting construct.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node arg(arg='x') does not increment complexity.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]) is not a nesting construct.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]) increments complexity.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Incremented cognitive complexity at node: Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)])
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[]) is a nesting construct.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Nesting depth increased to 2 at node: For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])], orelse=[])
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node Return(value=UnaryOp(op=USub(), operand=Constant(value=1))) is not a nesting construct.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node Return(value=UnaryOp(op=USub(), operand=Constant(value=1))) increments complexity.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Incremented cognitive complexity at node: Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node Constant(value=0) is not a nesting construct.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node Constant(value=0) does not increment complexity.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node Name(id='x', ctx=Load()) is not a nesting construct.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node Name(id='x', ctx=Load()) does not increment complexity.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node Gt() is not a nesting construct.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node Gt() does not increment complexity.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node Constant(value=0) is not a nesting construct.
2024-11-14 21:50:41,107 - docstring_workflow - DEBUG - logger - log_debug - Node Constant(value=0) does not increment complexity.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Name(id='i', ctx=Store()) is not a nesting construct.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Name(id='i', ctx=Store()) does not increment complexity.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]) is not a nesting construct.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Call(func=Name(id='range', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]) does not increment complexity.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()]) is a nesting construct.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Nesting depth increased to 3 at node: If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[Continue()])
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node UnaryOp(op=USub(), operand=Constant(value=1)) is not a nesting construct.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node UnaryOp(op=USub(), operand=Constant(value=1)) does not increment complexity.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Load() is not a nesting construct.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Load() does not increment complexity.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Store() is not a nesting construct.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Store() does not increment complexity.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Name(id='range', ctx=Load()) is not a nesting construct.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Name(id='range', ctx=Load()) does not increment complexity.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Name(id='x', ctx=Load()) is not a nesting construct.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Name(id='x', ctx=Load()) does not increment complexity.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]) is not a nesting construct.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]) increments complexity.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Incremented cognitive complexity at node: Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)])
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])) is not a nesting construct.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])) does not increment complexity.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Continue() is not a nesting construct.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Node Continue() increments complexity.
2024-11-14 21:50:41,108 - docstring_workflow - DEBUG - logger - log_debug - Incremented cognitive complexity at node: Continue()
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node USub() is not a nesting construct.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node USub() does not increment complexity.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Constant(value=1) is not a nesting construct.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Constant(value=1) does not increment complexity.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Load() is not a nesting construct.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Load() does not increment complexity.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Load() is not a nesting construct.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Load() does not increment complexity.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)) is not a nesting construct.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)) does not increment complexity.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Eq() is not a nesting construct.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Eq() does not increment complexity.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Constant(value=0) is not a nesting construct.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Constant(value=0) does not increment complexity.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]) is not a nesting construct.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Call(func=Name(id='print', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]) does not increment complexity.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Name(id='i', ctx=Load()) is not a nesting construct.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Name(id='i', ctx=Load()) does not increment complexity.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Mod() is not a nesting construct.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Mod() does not increment complexity.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Constant(value=2) is not a nesting construct.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Constant(value=2) does not increment complexity.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Name(id='print', ctx=Load()) is not a nesting construct.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Name(id='print', ctx=Load()) does not increment complexity.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Name(id='i', ctx=Load()) is not a nesting construct.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Name(id='i', ctx=Load()) does not increment complexity.
2024-11-14 21:50:41,109 - docstring_workflow - DEBUG - logger - log_debug - Node Load() is not a nesting construct.
2024-11-14 21:50:41,110 - docstring_workflow - DEBUG - logger - log_debug - Node Load() does not increment complexity.
2024-11-14 21:50:41,110 - docstring_workflow - DEBUG - logger - log_debug - Node Load() is not a nesting construct.
2024-11-14 21:50:41,110 - docstring_workflow - DEBUG - logger - log_debug - Node Load() does not increment complexity.
2024-11-14 21:50:41,110 - docstring_workflow - DEBUG - logger - log_debug - Node Load() is not a nesting construct.
2024-11-14 21:50:41,110 - docstring_workflow - DEBUG - logger - log_debug - Node Load() does not increment complexity.
2024-11-14 21:50:41,110 - docstring_workflow - INFO - logger - log_info - Calculated cognitive complexity for function 'example_function' is 11
2024-11-14 21:53:30,761 - docstring_workflow - DEBUG - logger - log_debug - Starting workflow for source path: https://github.com/henryperkins/auto-something
2024-11-14 21:53:30,783 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:53:30,783 - docstring_workflow - DEBUG - logger - log_debug - Cloning repository from URL: https://github.com/henryperkins/auto-something to temp directory: /tmp/tmpf310fumb
2024-11-14 21:53:30,959 - docstring_workflow - DEBUG - logger - log_debug - Processing directory: /tmp/tmpf310fumb
2024-11-14 21:53:30,959 - docstring_workflow - DEBUG - logger - log_debug - Processing file: /tmp/tmpf310fumb/dependency_analyzer.py
2024-11-14 21:53:30,959 - docstring_workflow - DEBUG - logger - log_debug - Attempting to load source file: /tmp/tmpf310fumb/dependency_analyzer.py
2024-11-14 21:53:30,959 - docstring_workflow - INFO - logger - log_info - Successfully loaded source code from '/tmp/tmpf310fumb/dependency_analyzer.py'
2024-11-14 21:53:30,981 - docstring_workflow - INFO - logger - log_info - Azure OpenAI client initialized successfully
2024-11-14 21:53:30,981 - docstring_workflow - DEBUG - logger - log_debug - Initializing Cache with host=localhost, port=6379, db=0, max_retries=3
2024-11-14 21:53:30,981 - docstring_workflow - DEBUG - logger - log_debug - Attempting to connect to Redis (attempt 1)
2024-11-14 21:53:30,982 - docstring_workflow - INFO - logger - log_info - Connected to Redis cache successfully
2024-11-14 21:53:30,982 - docstring_workflow - INFO - logger - log_info - Interaction Handler initialized with batch processing capability
2024-11-14 21:53:30,982 - docstring_workflow - DEBUG - logger - log_debug - Starting batch processing of all functions.
2024-11-14 21:53:30,982 - docstring_workflow - DEBUG - logger - log_debug - Extracting functions from source code.
2024-11-14 21:53:30,985 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions.
2024-11-14 21:53:30,985 - docstring_workflow - INFO - logger - log_info - Extracted 6 functions from source code.
2024-11-14 21:53:30,985 - docstring_workflow - DEBUG - logger - log_debug - Processing batch of functions: ['__init__', '_extract_python_dependencies', '_extract_javascript_dependencies', 'get_module_dependencies', 'export_dependency_graph']
2024-11-14 21:53:30,985 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 92d525bbacb7d2bcc7a58bbe70ba5ad0
2024-11-14 21:53:30,985 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 92d525bbacb7d2bcc7a58bbe70ba5ad0 with key: docstring:v1:92d525bbacb7d2bcc7a58bbe70ba5ad0
2024-11-14 21:53:30,985 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 92d525bbacb7d2bcc7a58bbe70ba5ad0
2024-11-14 21:53:30,986 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: __init__
2024-11-14 21:53:30,986 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity for BoolOp with 1 decision points: BoolOp(op=Or(), values=[Name(id='multilang_manager', ctx=Load()), Call(func=Name(id='MultiLanguageManager', ctx=Load()), args=[], keywords=[])])
2024-11-14 21:53:30,986 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity for BoolOp with 1 decision points: BoolOp(op=Or(), values=[Name(id='hierarchy_manager', ctx=Load()), Call(func=Name(id='CodeHierarchy', ctx=Load()), args=[], keywords=[])])
2024-11-14 21:53:30,986 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity for BoolOp with 1 decision points: BoolOp(op=Or(), values=[Name(id='context_manager', ctx=Load()), Call(func=Name(id='ContextManager', ctx=Load()), args=[], keywords=[])])
2024-11-14 21:53:30,986 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: Or()
2024-11-14 21:53:30,986 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: Or()
2024-11-14 21:53:30,986 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: Or()
2024-11-14 21:53:30,986 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function '__init__' is 7
2024-11-14 21:53:30,986 - docstring_workflow - ERROR - logger - log_error - Expected 5, got 7
2024-11-14 21:53:31,155 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 7
        }

        Function: __init__
        Parameters: self: Any, project_root: str, multilang_manager: Optional[MultiLanguageManager], hierarchy_manager: Optional[CodeHierarchy], context_manager: Optional[ContextManager]
        Returns: Any
        Decorators: None
        Exceptions: None
        Existing docstring: Initialize the DependencyAnalyzer.

Args:
    project_root: The root directory of the project
    multilang_manager: Optional multi-language support manager
    hierarchy_manager: Optional hierarchy management instance
    context_manager: Optional context management instance
2024-11-14 21:53:31,155 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:53:32,597 - docstring_workflow - ERROR - logger - log_error - Error processing function __init__: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:53:32,597 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 461c6439790fd423ac9dcc5f737b77d0
2024-11-14 21:53:32,597 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 461c6439790fd423ac9dcc5f737b77d0 with key: docstring:v1:461c6439790fd423ac9dcc5f737b77d0
2024-11-14 21:53:32,598 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 461c6439790fd423ac9dcc5f737b77d0
2024-11-14 21:53:32,598 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: _extract_python_dependencies
2024-11-14 21:53:32,598 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='node', ctx=Store()), iter=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='tree', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Import', ctx=Load())], keywords=[]), body=[For(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='names', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='imports'), ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='name', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='ImportFrom', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Name(id='node', ctx=Load()), attr='module', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='imports'), ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='module', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Call', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='internal_calls'), ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='id', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Attribute', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='external_calls'), ctx=Load()), attr='add', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='value', ctx=Load()), attr='id', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='attr', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])])], orelse=[])])])], orelse=[])
2024-11-14 21:53:32,598 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Import', ctx=Load())], keywords=[]), body=[For(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='names', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='imports'), ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='name', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='ImportFrom', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Name(id='node', ctx=Load()), attr='module', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='imports'), ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='module', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Call', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='internal_calls'), ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='id', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Attribute', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='external_calls'), ctx=Load()), attr='add', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='value', ctx=Load()), attr='id', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='attr', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])])], orelse=[])])])
2024-11-14 21:53:32,598 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: For(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='node', ctx=Load()), attr='names', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='imports'), ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='name', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], orelse=[])
2024-11-14 21:53:32,599 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='ImportFrom', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Name(id='node', ctx=Load()), attr='module', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='imports'), ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='module', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Call', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='internal_calls'), ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='id', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Attribute', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='external_calls'), ctx=Load()), attr='add', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='value', ctx=Load()), attr='id', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='attr', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])])], orelse=[])])
2024-11-14 21:53:32,599 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Attribute(value=Name(id='node', ctx=Load()), attr='module', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='imports'), ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='module', ctx=Load())], keywords=[]))], orelse=[])
2024-11-14 21:53:32,599 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='node', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Call', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='internal_calls'), ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='id', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Attribute', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='external_calls'), ctx=Load()), attr='add', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='value', ctx=Load()), attr='id', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='attr', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])])], orelse=[])
2024-11-14 21:53:32,599 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Name', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='internal_calls'), ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='id', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Attribute', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='external_calls'), ctx=Load()), attr='add', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='value', ctx=Load()), attr='id', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='attr', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])])
2024-11-14 21:53:32,599 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), Attribute(value=Name(id='ast', ctx=Load()), attr='Attribute', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='deps', ctx=Load()), slice=Constant(value='external_calls'), ctx=Load()), attr='add', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='value', ctx=Load()), attr='id', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='func', ctx=Load()), attr='attr', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])
2024-11-14 21:53:32,599 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function '_extract_python_dependencies' is 9
2024-11-14 21:53:32,599 - docstring_workflow - ERROR - logger - log_error - Expected 5, got 9
2024-11-14 21:53:32,599 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 9
        }

        Function: _extract_python_dependencies
        Parameters: self: Any, tree: ast.AST
        Returns: Dict[str, Set[str]]
        Decorators: None
        Exceptions: None
        Existing docstring: Extract dependencies from Python AST.
2024-11-14 21:53:32,600 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:53:34,022 - docstring_workflow - ERROR - logger - log_error - Error processing function _extract_python_dependencies: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:53:34,022 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: f4857b58c1eae304f2012cb1931f40e0
2024-11-14 21:53:34,023 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: f4857b58c1eae304f2012cb1931f40e0 with key: docstring:v1:f4857b58c1eae304f2012cb1931f40e0
2024-11-14 21:53:34,023 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: f4857b58c1eae304f2012cb1931f40e0
2024-11-14 21:53:34,023 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: _extract_javascript_dependencies
2024-11-14 21:53:34,023 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function '_extract_javascript_dependencies' is 1
2024-11-14 21:53:34,023 - docstring_workflow - ERROR - logger - log_error - Expected 5, got 1
2024-11-14 21:53:34,023 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: _extract_javascript_dependencies
        Parameters: self: Any, content: str
        Returns: Dict[str, Set[str]]
        Decorators: None
        Exceptions: None
        Existing docstring: Extract dependencies from JavaScript code.
2024-11-14 21:53:34,023 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:53:35,414 - docstring_workflow - ERROR - logger - log_error - Error processing function _extract_javascript_dependencies: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:53:35,414 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: 271e8811db99b7581b15bda400f5af39
2024-11-14 21:53:35,414 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: 271e8811db99b7581b15bda400f5af39 with key: docstring:v1:271e8811db99b7581b15bda400f5af39
2024-11-14 21:53:35,414 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: 271e8811db99b7581b15bda400f5af39
2024-11-14 21:53:35,414 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: get_module_dependencies
2024-11-14 21:53:35,414 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'get_module_dependencies' is 1
2024-11-14 21:53:35,415 - docstring_workflow - ERROR - logger - log_error - Expected 5, got 1
2024-11-14 21:53:35,415 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 1
        }

        Function: get_module_dependencies
        Parameters: self: Any
        Returns: Dict[str, Set[str]]
        Decorators: None
        Exceptions: None
        Existing docstring: Get the mapping of modules to their dependencies.
2024-11-14 21:53:35,415 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:53:36,752 - docstring_workflow - ERROR - logger - log_error - Error processing function get_module_dependencies: SystemMonitor.log_request() got an unexpected keyword argument 'response_time'
2024-11-14 21:53:36,752 - docstring_workflow - DEBUG - logger - log_debug - Generating cache key for function ID: d067fd84d5c99f70d4adaee2a2d7e310
2024-11-14 21:53:36,752 - docstring_workflow - DEBUG - logger - log_debug - Retrieving cache for function ID: d067fd84d5c99f70d4adaee2a2d7e310 with key: docstring:v1:d067fd84d5c99f70d4adaee2a2d7e310
2024-11-14 21:53:36,752 - docstring_workflow - INFO - logger - log_info - Cache miss for function ID: d067fd84d5c99f70d4adaee2a2d7e310
2024-11-14 21:53:36,752 - docstring_workflow - DEBUG - logger - log_debug - Calculating cyclomatic complexity for function: export_dependency_graph
2024-11-14 21:53:36,752 - docstring_workflow - DEBUG - logger - log_debug - Incremented complexity at node: With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='output_path', ctx=Load()), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='graph_data', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=2)), keyword(arg='default', value=Name(id='list', ctx=Load()))]))])
2024-11-14 21:53:36,752 - docstring_workflow - INFO - logger - log_info - Calculated cyclomatic complexity for function 'export_dependency_graph' is 2
2024-11-14 21:53:36,752 - docstring_workflow - ERROR - logger - log_error - Expected 5, got 2
2024-11-14 21:53:36,753 - docstring_workflow - DEBUG - logger - log_debug - Optimized prompt: Generate a JSON object with the following fields:
        {
            "summary": "Brief function overview.",
            "changelog": "Change history or 'Initial documentation.'",
            "docstring": "Google-style docstring including a Complexity section and examples.",
            "complexity_score": 2
        }

        Function: export_dependency_graph
        Parameters: self: Any, output_path: str
        Returns: None
        Decorators: None
        Exceptions: None
        Existing docstring: Export dependency information as a JSON file.

Args:
    output_path: Path to save the dependency graph
2024-11-14 21:53:36,753 - docstring_workflow - DEBUG - logger - log_debug - Attempt 1 to generate docstring.
2024-11-14 21:53:37,521 - docstring_workflow - DEBUG - logger - log_debug - Cleaning up temporary directory: /tmp/tmpf310fumb
